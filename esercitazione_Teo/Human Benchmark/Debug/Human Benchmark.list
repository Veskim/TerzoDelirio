
Human Benchmark.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a280  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800a410  0800a410  0000b410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abe8  0800abe8  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800abe8  0800abe8  0000bbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abf0  0800abf0  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abf0  0800abf0  0000bbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abf4  0800abf4  0000bbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800abf8  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  200001e0  0800add4  0000c1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  0800add4  0000c8a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113e3  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c2  00000000  00000000  0001d5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0001fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9c  00000000  00000000  00020be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a2b  00000000  00000000  00021884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131a0  00000000  00000000  000492af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f37b1  00000000  00000000  0005c44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0014fc00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005720  00000000  00000000  0014fc88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001553a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3f8 	.word	0x0800a3f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a3f8 	.word	0x0800a3f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <WS2812_Send>:
/**
  * @brief Loads LED data into the DMA and pushes them into the LED
  * @param None
  * @retval None
  */
void WS2812_Send (void){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	e036      	b.n	8000ff6 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8000f88:	4a2e      	ldr	r2, [pc, #184]	@ (8001044 <WS2812_Send+0xcc>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	041a      	lsls	r2, r3, #16
 8000f94:	492b      	ldr	r1, [pc, #172]	@ (8001044 <WS2812_Send+0xcc>)
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	789b      	ldrb	r3, [r3, #2]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	4928      	ldr	r1, [pc, #160]	@ (8001044 <WS2812_Send+0xcc>)
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	78db      	ldrb	r3, [r3, #3]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8000fb0:	2317      	movs	r3, #23
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	e019      	b.n	8000fea <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d005      	beq.n	8000fd4 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8000fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001048 <WS2812_Send+0xd0>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	213c      	movs	r1, #60	@ 0x3c
 8000fce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fd2:	e004      	b.n	8000fde <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8000fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8001048 <WS2812_Send+0xd0>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	211e      	movs	r1, #30
 8000fda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	dae2      	bge.n	8000fb6 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	ddc5      	ble.n	8000f88 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	e00a      	b.n	8001018 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8001002:	4a11      	ldr	r2, [pc, #68]	@ (8001048 <WS2812_Send+0xd0>)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	2100      	movs	r1, #0
 8001008:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	3301      	adds	r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2b31      	cmp	r3, #49	@ 0x31
 800101c:	ddf1      	ble.n	8001002 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&TIM_HANDLE, TIM_CH, (uint32_t *)pwmData, indx);
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	b29b      	uxth	r3, r3
 8001022:	4a09      	ldr	r2, [pc, #36]	@ (8001048 <WS2812_Send+0xd0>)
 8001024:	2108      	movs	r1, #8
 8001026:	4809      	ldr	r0, [pc, #36]	@ (800104c <WS2812_Send+0xd4>)
 8001028:	f003 faa2 	bl	8004570 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 800102c:	bf00      	nop
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <WS2812_Send+0xd8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0fb      	beq.n	800102e <WS2812_Send+0xb6>
	datasentflag = 0;
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <WS2812_Send+0xd8>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000224 	.word	0x20000224
 8001048:	20000248 	.word	0x20000248
 800104c:	200004a4 	.word	0x200004a4
 8001050:	200001fc 	.word	0x200001fc

08001054 <Set_LED>:
  * @param int Green
  * @param int Blue
  * @retval None
  */
void Set_LED (int LEDNum, int Red, int Green, int Blue)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
	LED_Data[LEDNum][0] = LEDNum;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	b2d9      	uxtb	r1, r3
 8001066:	4a11      	ldr	r2, [pc, #68]	@ (80010ac <Set_LED+0x58>)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDNum][1] = Green;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	b2d9      	uxtb	r1, r3
 8001072:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <Set_LED+0x58>)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	460a      	mov	r2, r1
 800107c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDNum][2] = Red;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	b2d9      	uxtb	r1, r3
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <Set_LED+0x58>)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	460a      	mov	r2, r1
 800108c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDNum][3] = Blue;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2d9      	uxtb	r1, r3
 8001092:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <Set_LED+0x58>)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	460a      	mov	r2, r1
 800109c:	70da      	strb	r2, [r3, #3]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000200 	.word	0x20000200

080010b0 <Set_Brightness>:
  * @brief Set LED Brightness, goes from 0 to 45
  * @param int
  * @retval None
  */
void Set_Brightness (int brightness)  // 0-45
{
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80010bc:	dd01      	ble.n	80010c2 <Set_Brightness+0x12>
 80010be:	232d      	movs	r3, #45	@ 0x2d
 80010c0:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	e060      	b.n	800118a <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 80010c8:	4a37      	ldr	r2, [pc, #220]	@ (80011a8 <Set_Brightness+0xf8>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80010d0:	4a36      	ldr	r2, [pc, #216]	@ (80011ac <Set_Brightness+0xfc>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 80010d8:	2301      	movs	r3, #1
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	e04f      	b.n	800117e <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ec:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff fa29 	bl	8000548 <__aeabi_f2d>
 80010f6:	a32a      	add	r3, pc, #168	@ (adr r3, 80011a0 <Set_Brightness+0xf0>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff fa7c 	bl	80005f8 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <Set_Brightness+0x100>)
 800110e:	f7ff fb9d 	bl	800084c <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fd65 	bl	8000be8 <__aeabi_d2f>
 800111e:	4603      	mov	r3, r0
 8001120:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8001122:	4a21      	ldr	r2, [pc, #132]	@ (80011a8 <Set_Brightness+0xf8>)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	441a      	add	r2, r3
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4413      	add	r3, r2
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f9f7 	bl	8000524 <__aeabi_i2d>
 8001136:	4604      	mov	r4, r0
 8001138:	460d      	mov	r5, r1
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f7ff fa04 	bl	8000548 <__aeabi_f2d>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	ec43 2b10 	vmov	d0, r2, r3
 8001148:	f008 f8c6 	bl	80092d8 <tan>
 800114c:	ec53 2b10 	vmov	r2, r3, d0
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	f7ff fb7a 	bl	800084c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd22 	bl	8000ba8 <__aeabi_d2uiz>
 8001164:	4603      	mov	r3, r0
 8001166:	b2d9      	uxtb	r1, r3
 8001168:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <Set_Brightness+0xfc>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	441a      	add	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4413      	add	r3, r2
 8001174:	460a      	mov	r2, r1
 8001176:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	3301      	adds	r3, #1
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	2b03      	cmp	r3, #3
 8001182:	ddac      	ble.n	80010de <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2b08      	cmp	r3, #8
 800118e:	dd9b      	ble.n	80010c8 <Set_Brightness+0x18>
		}
	}

#endif
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bdb0      	pop	{r4, r5, r7, pc}
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w
 80011a0:	53c8d4f1 	.word	0x53c8d4f1
 80011a4:	400921fb 	.word	0x400921fb
 80011a8:	20000200 	.word	0x20000200
 80011ac:	20000224 	.word	0x20000224
 80011b0:	40668000 	.word	0x40668000

080011b4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&TIM_HANDLE, TIM_CH);
 80011bc:	2108      	movs	r1, #8
 80011be:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80011c0:	f003 fbf6 	bl	80049b0 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 80011c4:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200004a4 	.word	0x200004a4
 80011d8:	200001fc 	.word	0x200001fc

080011dc <Reset_LED>:
  * @param int Green
  * @param int Blue
  * @retval None
  */
void Reset_LED (void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

	for(int Led_Num=0; Led_Num<MAX_LED; Led_Num++){
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	e008      	b.n	80011fa <Reset_LED+0x1e>
		Set_LED(Led_Num, 0, 0, 0);
 80011e8:	2300      	movs	r3, #0
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff30 	bl	8001054 <Set_LED>
	for(int Led_Num=0; Led_Num<MAX_LED; Led_Num++){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3301      	adds	r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	ddf3      	ble.n	80011e8 <Reset_LED+0xc>
	}
	WS2812_Send();
 8001200:	f7ff feba 	bl	8000f78 <WS2812_Send>

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <Attiva_LED>:

/**
 * @brief Funzione di attivazione di un singolo LED, richiedendo il numero del led e quale colorazione assegnarli.
 * Richiede l'uso di altre funzioni della libreria ed una funzione nuova che resetti tutta la stricia (reset -> tutti i led hanno valore 0)
 */
void Attiva_LED(int num, int R, int G, int B){
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
	Reset_LED();
 800121a:	f7ff ffdf 	bl	80011dc <Reset_LED>
	Set_LED(num, R, G, B);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	68b9      	ldr	r1, [r7, #8]
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f7ff ff15 	bl	8001054 <Set_LED>
	Set_Brightness(40);
 800122a:	2028      	movs	r0, #40	@ 0x28
 800122c:	f7ff ff40 	bl	80010b0 <Set_Brightness>
	WS2812_Send();
 8001230:	f7ff fea2 	bl	8000f78 <WS2812_Send>
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b08f      	sub	sp, #60	@ 0x3c
 8001240:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */

  //FARE DOUBLE CHECK CHE I COLLEGAMENTI HARDWARE RISPECCHIANO LE COPPIE SOFTWARE
  Pulsanti[0].GPIO_Pulsante = GPIO_PIN_0; //Pulsante 1 - PC0
 8001242:	4bac      	ldr	r3, [pc, #688]	@ (80014f4 <main+0x2b8>)
 8001244:	2201      	movs	r2, #1
 8001246:	801a      	strh	r2, [r3, #0]
  Pulsanti[0].Led_num = 0;
 8001248:	4baa      	ldr	r3, [pc, #680]	@ (80014f4 <main+0x2b8>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]

  Pulsanti[1].GPIO_Pulsante = GPIO_PIN_1 ; //Pulsante 2 - PC1
 800124e:	4ba9      	ldr	r3, [pc, #676]	@ (80014f4 <main+0x2b8>)
 8001250:	2202      	movs	r2, #2
 8001252:	811a      	strh	r2, [r3, #8]
  Pulsanti[1].Led_num = 1;
 8001254:	4ba7      	ldr	r3, [pc, #668]	@ (80014f4 <main+0x2b8>)
 8001256:	2201      	movs	r2, #1
 8001258:	60da      	str	r2, [r3, #12]

  Pulsanti[2].GPIO_Pulsante = GPIO_PIN_2; //Pulsante 3 - PC2
 800125a:	4ba6      	ldr	r3, [pc, #664]	@ (80014f4 <main+0x2b8>)
 800125c:	2204      	movs	r2, #4
 800125e:	821a      	strh	r2, [r3, #16]
  Pulsanti[2].Led_num = 2;
 8001260:	4ba4      	ldr	r3, [pc, #656]	@ (80014f4 <main+0x2b8>)
 8001262:	2202      	movs	r2, #2
 8001264:	615a      	str	r2, [r3, #20]

  Pulsanti[3].GPIO_Pulsante = GPIO_PIN_3; //Pulsante 4 - PC3
 8001266:	4ba3      	ldr	r3, [pc, #652]	@ (80014f4 <main+0x2b8>)
 8001268:	2208      	movs	r2, #8
 800126a:	831a      	strh	r2, [r3, #24]
  Pulsanti[3].Led_num = 3;
 800126c:	4ba1      	ldr	r3, [pc, #644]	@ (80014f4 <main+0x2b8>)
 800126e:	2203      	movs	r2, #3
 8001270:	61da      	str	r2, [r3, #28]

  Pulsanti[4].GPIO_Pulsante = GPIO_PIN_4; //Pulsante 5 - PC4  //PULSANTE CENTRALE
 8001272:	4ba0      	ldr	r3, [pc, #640]	@ (80014f4 <main+0x2b8>)
 8001274:	2210      	movs	r2, #16
 8001276:	841a      	strh	r2, [r3, #32]
  Pulsanti[4].Led_num = 4;
 8001278:	4b9e      	ldr	r3, [pc, #632]	@ (80014f4 <main+0x2b8>)
 800127a:	2204      	movs	r2, #4
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24

  Pulsanti[5].GPIO_Pulsante = GPIO_PIN_5; //Pulsante 6 - PC5
 800127e:	4b9d      	ldr	r3, [pc, #628]	@ (80014f4 <main+0x2b8>)
 8001280:	2220      	movs	r2, #32
 8001282:	851a      	strh	r2, [r3, #40]	@ 0x28
  Pulsanti[5].Led_num = 5;
 8001284:	4b9b      	ldr	r3, [pc, #620]	@ (80014f4 <main+0x2b8>)
 8001286:	2205      	movs	r2, #5
 8001288:	62da      	str	r2, [r3, #44]	@ 0x2c

  Pulsanti[6].GPIO_Pulsante = GPIO_PIN_6; //Pulsante 7 - PA6
 800128a:	4b9a      	ldr	r3, [pc, #616]	@ (80014f4 <main+0x2b8>)
 800128c:	2240      	movs	r2, #64	@ 0x40
 800128e:	861a      	strh	r2, [r3, #48]	@ 0x30
  Pulsanti[6].Led_num = 6;
 8001290:	4b98      	ldr	r3, [pc, #608]	@ (80014f4 <main+0x2b8>)
 8001292:	2206      	movs	r2, #6
 8001294:	635a      	str	r2, [r3, #52]	@ 0x34

  Pulsanti[7].GPIO_Pulsante = GPIO_PIN_7; //Pulsante 8 - PA7
 8001296:	4b97      	ldr	r3, [pc, #604]	@ (80014f4 <main+0x2b8>)
 8001298:	2280      	movs	r2, #128	@ 0x80
 800129a:	871a      	strh	r2, [r3, #56]	@ 0x38
  Pulsanti[7].Led_num = 7;
 800129c:	4b95      	ldr	r3, [pc, #596]	@ (80014f4 <main+0x2b8>)
 800129e:	2207      	movs	r2, #7
 80012a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  Pulsanti[8].GPIO_Pulsante = GPIO_PIN_8; //Pulsante 9 - PB8
 80012a2:	4b94      	ldr	r3, [pc, #592]	@ (80014f4 <main+0x2b8>)
 80012a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  Pulsanti[8].Led_num = 8;
 80012ac:	4b91      	ldr	r3, [pc, #580]	@ (80014f4 <main+0x2b8>)
 80012ae:	2208      	movs	r2, #8
 80012b0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f000 ff76 	bl	80021a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 fa27 	bl	8001708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f000 fb49 	bl	8001950 <MX_GPIO_Init>
  MX_DMA_Init();
 80012be:	f000 fb29 	bl	8001914 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80012c2:	f000 faf7 	bl	80018b4 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80012c6:	f000 facd 	bl	8001864 <MX_TIM16_Init>
  MX_TIM3_Init();
 80012ca:	f000 fa71 	bl	80017b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  sprintf((char*)s,"Inizializzazione e Caricamento dati...\r\n\r\n");
 80012ce:	498a      	ldr	r1, [pc, #552]	@ (80014f8 <main+0x2bc>)
 80012d0:	488a      	ldr	r0, [pc, #552]	@ (80014fc <main+0x2c0>)
 80012d2:	f005 fed1 	bl	8007078 <siprintf>
  HAL_UART_Transmit(&huart1, s, sizeof(s), 100);
 80012d6:	2364      	movs	r3, #100	@ 0x64
 80012d8:	22c8      	movs	r2, #200	@ 0xc8
 80012da:	4988      	ldr	r1, [pc, #544]	@ (80014fc <main+0x2c0>)
 80012dc:	4888      	ldr	r0, [pc, #544]	@ (8001500 <main+0x2c4>)
 80012de:	f004 fc15 	bl	8005b0c <HAL_UART_Transmit>
  memset(s ,0, sizeof(s));
 80012e2:	22c8      	movs	r2, #200	@ 0xc8
 80012e4:	2100      	movs	r1, #0
 80012e6:	4885      	ldr	r0, [pc, #532]	@ (80014fc <main+0x2c0>)
 80012e8:	f005 ff29 	bl	800713e <memset>
  HAL_Delay(100);
 80012ec:	2064      	movs	r0, #100	@ 0x64
 80012ee:	f000 fc43 	bl	8001b78 <HAL_Delay>
  Reset_LED();
 80012f2:	f7ff ff73 	bl	80011dc <Reset_LED>
  HAL_TIM_Base_Stop(&htim16);
 80012f6:	4883      	ldr	r0, [pc, #524]	@ (8001504 <main+0x2c8>)
 80012f8:	f003 f84b 	bl	8004392 <HAL_TIM_Base_Stop>
  TIM_ResetCounter(TIM16);
 80012fc:	4882      	ldr	r0, [pc, #520]	@ (8001508 <main+0x2cc>)
 80012fe:	f000 fc2b 	bl	8001b58 <TIM_ResetCounter>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1){
      switch(curr_state){
 8001302:	4b82      	ldr	r3, [pc, #520]	@ (800150c <main+0x2d0>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b02      	cmp	r3, #2
 8001308:	f000 80ac 	beq.w	8001464 <main+0x228>
 800130c:	2b02      	cmp	r3, #2
 800130e:	dcf8      	bgt.n	8001302 <main+0xc6>
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <main+0xde>
 8001314:	2b01      	cmp	r3, #1
 8001316:	d058      	beq.n	80013ca <main+0x18e>
 8001318:	e7f3      	b.n	8001302 <main+0xc6>
      case start:
        //setup o reset dati
    	it_tot = TEMPI_QTY;
 800131a:	4b7d      	ldr	r3, [pc, #500]	@ (8001510 <main+0x2d4>)
 800131c:	220b      	movs	r2, #11
 800131e:	601a      	str	r2, [r3, #0]
        it_cor = 0;
 8001320:	4b7c      	ldr	r3, [pc, #496]	@ (8001514 <main+0x2d8>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
        //Colpiti = 0;
        //Mancati = 0;
        lento = 0.0;
 8001326:	497c      	ldr	r1, [pc, #496]	@ (8001518 <main+0x2dc>)
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	e9c1 2300 	strd	r2, r3, [r1]
        veloce = 1000.0;
 8001334:	4979      	ldr	r1, [pc, #484]	@ (800151c <main+0x2e0>)
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b79      	ldr	r3, [pc, #484]	@ (8001520 <main+0x2e4>)
 800133c:	e9c1 2300 	strd	r2, r3, [r1]
        for(int i = 0; i < it_tot; i++) Tempi[i] = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	e00c      	b.n	8001360 <main+0x124>
 8001346:	4a77      	ldr	r2, [pc, #476]	@ (8001524 <main+0x2e8>)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	18d1      	adds	r1, r2, r3
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	e9c1 2300 	strd	r2, r3, [r1]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	4b6b      	ldr	r3, [pc, #428]	@ (8001510 <main+0x2d4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	429a      	cmp	r2, r3
 8001368:	dbed      	blt.n	8001346 <main+0x10a>

        sprintf((char*)s,"Iterazioni Totali: %d \r\nTempo massimo di reazione: 2 secondi\r\n", it_tot);
 800136a:	4b69      	ldr	r3, [pc, #420]	@ (8001510 <main+0x2d4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	496d      	ldr	r1, [pc, #436]	@ (8001528 <main+0x2ec>)
 8001372:	4862      	ldr	r0, [pc, #392]	@ (80014fc <main+0x2c0>)
 8001374:	f005 fe80 	bl	8007078 <siprintf>
        HAL_UART_Transmit(&huart1, s, sizeof(s), 100);
 8001378:	2364      	movs	r3, #100	@ 0x64
 800137a:	22c8      	movs	r2, #200	@ 0xc8
 800137c:	495f      	ldr	r1, [pc, #380]	@ (80014fc <main+0x2c0>)
 800137e:	4860      	ldr	r0, [pc, #384]	@ (8001500 <main+0x2c4>)
 8001380:	f004 fbc4 	bl	8005b0c <HAL_UART_Transmit>
        memset(s ,0, sizeof(s));
 8001384:	22c8      	movs	r2, #200	@ 0xc8
 8001386:	2100      	movs	r1, #0
 8001388:	485c      	ldr	r0, [pc, #368]	@ (80014fc <main+0x2c0>)
 800138a:	f005 fed8 	bl	800713e <memset>
        sprintf((char*)s,"Premere il Pulsante Verde per Iniziare.\r\n");
 800138e:	4967      	ldr	r1, [pc, #412]	@ (800152c <main+0x2f0>)
 8001390:	485a      	ldr	r0, [pc, #360]	@ (80014fc <main+0x2c0>)
 8001392:	f005 fe71 	bl	8007078 <siprintf>
        HAL_UART_Transmit(&huart1, s, sizeof(s), 100);
 8001396:	2364      	movs	r3, #100	@ 0x64
 8001398:	22c8      	movs	r2, #200	@ 0xc8
 800139a:	4958      	ldr	r1, [pc, #352]	@ (80014fc <main+0x2c0>)
 800139c:	4858      	ldr	r0, [pc, #352]	@ (8001500 <main+0x2c4>)
 800139e:	f004 fbb5 	bl	8005b0c <HAL_UART_Transmit>
        memset(s,0,sizeof(s));
 80013a2:	22c8      	movs	r2, #200	@ 0xc8
 80013a4:	2100      	movs	r1, #0
 80013a6:	4855      	ldr	r0, [pc, #340]	@ (80014fc <main+0x2c0>)
 80013a8:	f005 fec9 	bl	800713e <memset>
        Attiva_LED(GREEN_BUTTON_PIN, 0, 255, 0);
 80013ac:	2300      	movs	r3, #0
 80013ae:	22ff      	movs	r2, #255	@ 0xff
 80013b0:	2100      	movs	r1, #0
 80013b2:	2004      	movs	r0, #4
 80013b4:	f7ff ff2a 	bl	800120c <Attiva_LED>
        while(curr_state == start){ //dovrebbe bloccarsi qua
 80013b8:	e002      	b.n	80013c0 <main+0x184>
        	HAL_Delay(250);
 80013ba:	20fa      	movs	r0, #250	@ 0xfa
 80013bc:	f000 fbdc 	bl	8001b78 <HAL_Delay>
        while(curr_state == start){ //dovrebbe bloccarsi qua
 80013c0:	4b52      	ldr	r3, [pc, #328]	@ (800150c <main+0x2d0>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f8      	beq.n	80013ba <main+0x17e>
        }
        break;
 80013c8:	e184      	b.n	80016d4 <main+0x498>

      case running:
    	HAL_TIM_Base_Stop(&htim16);
 80013ca:	484e      	ldr	r0, [pc, #312]	@ (8001504 <main+0x2c8>)
 80013cc:	f002 ffe1 	bl	8004392 <HAL_TIM_Base_Stop>
		TIM_ResetCounter(TIM16);
 80013d0:	484d      	ldr	r0, [pc, #308]	@ (8001508 <main+0x2cc>)
 80013d2:	f000 fbc1 	bl	8001b58 <TIM_ResetCounter>
		sprintf((char*)s,"\r\nINIZO SESSIONE in 3 secondi\r\nIl primo è di assestamento, non verrà contato.\r\n");
 80013d6:	4956      	ldr	r1, [pc, #344]	@ (8001530 <main+0x2f4>)
 80013d8:	4848      	ldr	r0, [pc, #288]	@ (80014fc <main+0x2c0>)
 80013da:	f005 fe4d 	bl	8007078 <siprintf>
		HAL_UART_Transmit(&huart1, s, sizeof(s), 100);
 80013de:	2364      	movs	r3, #100	@ 0x64
 80013e0:	22c8      	movs	r2, #200	@ 0xc8
 80013e2:	4946      	ldr	r1, [pc, #280]	@ (80014fc <main+0x2c0>)
 80013e4:	4846      	ldr	r0, [pc, #280]	@ (8001500 <main+0x2c4>)
 80013e6:	f004 fb91 	bl	8005b0c <HAL_UART_Transmit>
		memset(s,0,sizeof(s));
 80013ea:	22c8      	movs	r2, #200	@ 0xc8
 80013ec:	2100      	movs	r1, #0
 80013ee:	4843      	ldr	r0, [pc, #268]	@ (80014fc <main+0x2c0>)
 80013f0:	f005 fea5 	bl	800713e <memset>
        Attiva_LED(4, 0,0,0);
 80013f4:	2300      	movs	r3, #0
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2004      	movs	r0, #4
 80013fc:	f7ff ff06 	bl	800120c <Attiva_LED>
        HAL_Delay(3000);
 8001400:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001404:	f000 fbb8 	bl	8001b78 <HAL_Delay>
        pressed = 0;
 8001408:	4b4a      	ldr	r3, [pc, #296]	@ (8001534 <main+0x2f8>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]

        while(it_cor < it_tot){
 800140e:	e01f      	b.n	8001450 <main+0x214>
//            sprintf((char*)s,"Tentativo: %d \r\n", it_cor);
//            HAL_UART_Transmit(&huart1, s, sizeof(s), 100);
//			memset(s,0,sizeof(s));
            //wait = rand()%2000 +1000;
            puls_id = rand()%MAX_LED;
 8001410:	f005 f8da 	bl	80065c8 <rand>
 8001414:	4601      	mov	r1, r0
 8001416:	4b48      	ldr	r3, [pc, #288]	@ (8001538 <main+0x2fc>)
 8001418:	fb83 2301 	smull	r2, r3, r3, r1
 800141c:	105a      	asrs	r2, r3, #1
 800141e:	17cb      	asrs	r3, r1, #31
 8001420:	1ad2      	subs	r2, r2, r3
 8001422:	4613      	mov	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4413      	add	r3, r2
 8001428:	1aca      	subs	r2, r1, r3
 800142a:	4b44      	ldr	r3, [pc, #272]	@ (800153c <main+0x300>)
 800142c:	601a      	str	r2, [r3, #0]
            Attiva_LED(puls_id, 0, 50, 140);
 800142e:	4b43      	ldr	r3, [pc, #268]	@ (800153c <main+0x300>)
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	238c      	movs	r3, #140	@ 0x8c
 8001434:	2232      	movs	r2, #50	@ 0x32
 8001436:	2100      	movs	r1, #0
 8001438:	f7ff fee8 	bl	800120c <Attiva_LED>
//            sprintf((char*)s,"Pulsante attivo: %d \r\n", puls_id);
//			HAL_UART_Transmit(&huart1, s, sizeof(s), 100);
//			memset(s,0,sizeof(s));

            TIM_ResetCounter(TIM16); // Reset del contatore del timer
 800143c:	4832      	ldr	r0, [pc, #200]	@ (8001508 <main+0x2cc>)
 800143e:	f000 fb8b 	bl	8001b58 <TIM_ResetCounter>
            HAL_TIM_Base_Start_IT(&htim16); //&htim16
 8001442:	4830      	ldr	r0, [pc, #192]	@ (8001504 <main+0x2c8>)
 8001444:	f002 ffcc 	bl	80043e0 <HAL_TIM_Base_Start_IT>



            HAL_Delay(2000);
 8001448:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800144c:	f000 fb94 	bl	8001b78 <HAL_Delay>
        while(it_cor < it_tot){
 8001450:	4b30      	ldr	r3, [pc, #192]	@ (8001514 <main+0x2d8>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b2e      	ldr	r3, [pc, #184]	@ (8001510 <main+0x2d4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbd9      	blt.n	8001410 <main+0x1d4>
//            HAL_UART_Transmit(&huart1, s, strlen((char*)s), 100);
//            memset(s, 0, sizeof(s));
        }

        //fine sessione, cambia stato
        curr_state = ended;
 800145c:	4b2b      	ldr	r3, [pc, #172]	@ (800150c <main+0x2d0>)
 800145e:	2202      	movs	r2, #2
 8001460:	701a      	strb	r2, [r3, #0]
        break;
 8001462:	e137      	b.n	80016d4 <main+0x498>

      case ended:
        //Calcoli finali, fuori dal while dato che la sessione è finita.
    	//EVITA IL PRIMO GIRO DATO CHE IL TIMER DA PROBLEMI
        double media = 0;
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        for(int i = 0; i < it_tot; i++){
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e01e      	b.n	80014b4 <main+0x278>
        	if(Tempi[i] != -1.0)
 8001476:	4a2b      	ldr	r2, [pc, #172]	@ (8001524 <main+0x2e8>)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	4b2e      	ldr	r3, [pc, #184]	@ (8001540 <main+0x304>)
 8001488:	f7ff fb1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <main+0x272>
        		media += Tempi[i];
 8001492:	4a24      	ldr	r2, [pc, #144]	@ (8001524 <main+0x2e8>)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4413      	add	r3, r2
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014a2:	f7fe fef3 	bl	800028c <__adddf3>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
        for(int i = 0; i < it_tot; i++){
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <main+0x2d4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	dbdb      	blt.n	8001476 <main+0x23a>
        }
        media = media / it_tot-1;
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <main+0x2d4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f82e 	bl	8000524 <__aeabi_i2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014d0:	f7ff f9bc 	bl	800084c <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <main+0x308>)
 80014e2:	f7fe fed1 	bl	8000288 <__aeabi_dsub>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	e9c7 2304 	strd	r2, r3, [r7, #16]

        for(int i = 1; i < it_tot; i++){
 80014ee:	2301      	movs	r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	e077      	b.n	80015e4 <main+0x3a8>
 80014f4:	2000045c 	.word	0x2000045c
 80014f8:	0800a410 	.word	0x0800a410
 80014fc:	2000060c 	.word	0x2000060c
 8001500:	20000584 	.word	0x20000584
 8001504:	200004f0 	.word	0x200004f0
 8001508:	40014400 	.word	0x40014400
 800150c:	2000074c 	.word	0x2000074c
 8001510:	200006d4 	.word	0x200006d4
 8001514:	200006d8 	.word	0x200006d8
 8001518:	20000740 	.word	0x20000740
 800151c:	20000000 	.word	0x20000000
 8001520:	408f4000 	.word	0x408f4000
 8001524:	200006e0 	.word	0x200006e0
 8001528:	0800a43c 	.word	0x0800a43c
 800152c:	0800a47c 	.word	0x0800a47c
 8001530:	0800a4a8 	.word	0x0800a4a8
 8001534:	20000748 	.word	0x20000748
 8001538:	38e38e39 	.word	0x38e38e39
 800153c:	20000738 	.word	0x20000738
 8001540:	bff00000 	.word	0xbff00000
 8001544:	3ff00000 	.word	0x3ff00000
        	if(Tempi[i] > lento && Tempi[i]!=-1.0) lento = Tempi[i];
 8001548:	4a63      	ldr	r2, [pc, #396]	@ (80016d8 <main+0x49c>)
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001554:	4b61      	ldr	r3, [pc, #388]	@ (80016dc <main+0x4a0>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7ff fadd 	bl	8000b18 <__aeabi_dcmpgt>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d017      	beq.n	8001594 <main+0x358>
 8001564:	4a5c      	ldr	r2, [pc, #368]	@ (80016d8 <main+0x49c>)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4b5a      	ldr	r3, [pc, #360]	@ (80016e0 <main+0x4a4>)
 8001576:	f7ff faa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d109      	bne.n	8001594 <main+0x358>
 8001580:	4a55      	ldr	r2, [pc, #340]	@ (80016d8 <main+0x49c>)
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	4413      	add	r3, r2
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	4953      	ldr	r1, [pc, #332]	@ (80016dc <main+0x4a0>)
 800158e:	e9c1 2300 	strd	r2, r3, [r1]
 8001592:	e024      	b.n	80015de <main+0x3a2>
        	else if(Tempi[i] <= veloce && Tempi[i]!=-1.0) veloce = Tempi[i];
 8001594:	4a50      	ldr	r2, [pc, #320]	@ (80016d8 <main+0x49c>)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4413      	add	r3, r2
 800159c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a0:	4b50      	ldr	r3, [pc, #320]	@ (80016e4 <main+0x4a8>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff faa3 	bl	8000af0 <__aeabi_dcmple>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d016      	beq.n	80015de <main+0x3a2>
 80015b0:	4a49      	ldr	r2, [pc, #292]	@ (80016d8 <main+0x49c>)
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b47      	ldr	r3, [pc, #284]	@ (80016e0 <main+0x4a4>)
 80015c2:	f7ff fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d108      	bne.n	80015de <main+0x3a2>
 80015cc:	4a42      	ldr	r2, [pc, #264]	@ (80016d8 <main+0x49c>)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	4942      	ldr	r1, [pc, #264]	@ (80016e4 <main+0x4a8>)
 80015da:	e9c1 2300 	strd	r2, r3, [r1]
        for(int i = 1; i < it_tot; i++){
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3301      	adds	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	4b40      	ldr	r3, [pc, #256]	@ (80016e8 <main+0x4ac>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	dbac      	blt.n	8001548 <main+0x30c>
        }


        ///////----RESOCONTO----///////
        sprintf((char*)s,"Test completato, ecco i risultati:\r\n");
 80015ee:	493f      	ldr	r1, [pc, #252]	@ (80016ec <main+0x4b0>)
 80015f0:	483f      	ldr	r0, [pc, #252]	@ (80016f0 <main+0x4b4>)
 80015f2:	f005 fd41 	bl	8007078 <siprintf>
        HAL_UART_Transmit(&huart1, s, sizeof(s), 100);
 80015f6:	2364      	movs	r3, #100	@ 0x64
 80015f8:	22c8      	movs	r2, #200	@ 0xc8
 80015fa:	493d      	ldr	r1, [pc, #244]	@ (80016f0 <main+0x4b4>)
 80015fc:	483d      	ldr	r0, [pc, #244]	@ (80016f4 <main+0x4b8>)
 80015fe:	f004 fa85 	bl	8005b0c <HAL_UART_Transmit>
		memset(s,0,sizeof(s));
 8001602:	22c8      	movs	r2, #200	@ 0xc8
 8001604:	2100      	movs	r1, #0
 8001606:	483a      	ldr	r0, [pc, #232]	@ (80016f0 <main+0x4b4>)
 8001608:	f005 fd99 	bl	800713e <memset>
        for(int i = 1; i < it_tot; i++){
 800160c:	2301      	movs	r3, #1
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	e01a      	b.n	8001648 <main+0x40c>
            sprintf((char*)s,"Tentativo %d:\tTempo: %.2lf ms\r\n", i, Tempi[i]);
 8001612:	4a31      	ldr	r2, [pc, #196]	@ (80016d8 <main+0x49c>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4413      	add	r3, r2
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	e9cd 2300 	strd	r2, r3, [sp]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4934      	ldr	r1, [pc, #208]	@ (80016f8 <main+0x4bc>)
 8001626:	4832      	ldr	r0, [pc, #200]	@ (80016f0 <main+0x4b4>)
 8001628:	f005 fd26 	bl	8007078 <siprintf>
            HAL_UART_Transmit(&huart1, s, sizeof(s), 100);
 800162c:	2364      	movs	r3, #100	@ 0x64
 800162e:	22c8      	movs	r2, #200	@ 0xc8
 8001630:	492f      	ldr	r1, [pc, #188]	@ (80016f0 <main+0x4b4>)
 8001632:	4830      	ldr	r0, [pc, #192]	@ (80016f4 <main+0x4b8>)
 8001634:	f004 fa6a 	bl	8005b0c <HAL_UART_Transmit>
			memset(s,0,sizeof(s));
 8001638:	22c8      	movs	r2, #200	@ 0xc8
 800163a:	2100      	movs	r1, #0
 800163c:	482c      	ldr	r0, [pc, #176]	@ (80016f0 <main+0x4b4>)
 800163e:	f005 fd7e 	bl	800713e <memset>
        for(int i = 1; i < it_tot; i++){
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3301      	adds	r3, #1
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <main+0x4ac>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	429a      	cmp	r2, r3
 8001650:	dbdf      	blt.n	8001612 <main+0x3d6>
        }
//        sprintf((char*)s,"\r\nNumero Pulsanti Totali:%d\tPulsanti Corretti:%d \tPulsanti Mancati:%d \r\nTempo Medio: %.2lf ms\tReazione Piu\' Veloce: %.2lf ms\tReazione piu\' Lenta: %.2lf ms\r\n",it_tot, Colpiti, Mancati, media, veloce, lento);
//        HAL_UART_Transmit(&huart1, s, sizeof(s), 100);
//        memset(s ,0, sizeof(s));
        sprintf((char*)s,"\r\nNumero Pulsanti Totali:%d\r\nTempo Medio: %.2lf ms\tReazione Piu\' Veloce: %.2lf ms\tReazione piu\' Lenta: %.2lf ms\r\n", (it_tot-1), media, veloce, lento);
 8001652:	4b25      	ldr	r3, [pc, #148]	@ (80016e8 <main+0x4ac>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1e5c      	subs	r4, r3, #1
 8001658:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <main+0x4a8>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	491f      	ldr	r1, [pc, #124]	@ (80016dc <main+0x4a0>)
 8001660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001664:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001668:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800166c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001670:	e9cd 2300 	strd	r2, r3, [sp]
 8001674:	4622      	mov	r2, r4
 8001676:	4921      	ldr	r1, [pc, #132]	@ (80016fc <main+0x4c0>)
 8001678:	481d      	ldr	r0, [pc, #116]	@ (80016f0 <main+0x4b4>)
 800167a:	f005 fcfd 	bl	8007078 <siprintf>
        HAL_UART_Transmit(&huart1, s, sizeof(s), 100);
 800167e:	2364      	movs	r3, #100	@ 0x64
 8001680:	22c8      	movs	r2, #200	@ 0xc8
 8001682:	491b      	ldr	r1, [pc, #108]	@ (80016f0 <main+0x4b4>)
 8001684:	481b      	ldr	r0, [pc, #108]	@ (80016f4 <main+0x4b8>)
 8001686:	f004 fa41 	bl	8005b0c <HAL_UART_Transmit>
        memset(s ,0, sizeof(s));
 800168a:	22c8      	movs	r2, #200	@ 0xc8
 800168c:	2100      	movs	r1, #0
 800168e:	4818      	ldr	r0, [pc, #96]	@ (80016f0 <main+0x4b4>)
 8001690:	f005 fd55 	bl	800713e <memset>
        sprintf((char*)s, "Premere il pulsante verde per ricominciare.\r\n");
 8001694:	491a      	ldr	r1, [pc, #104]	@ (8001700 <main+0x4c4>)
 8001696:	4816      	ldr	r0, [pc, #88]	@ (80016f0 <main+0x4b4>)
 8001698:	f005 fcee 	bl	8007078 <siprintf>
        HAL_UART_Transmit(&huart1, s, sizeof(s), 100);
 800169c:	2364      	movs	r3, #100	@ 0x64
 800169e:	22c8      	movs	r2, #200	@ 0xc8
 80016a0:	4913      	ldr	r1, [pc, #76]	@ (80016f0 <main+0x4b4>)
 80016a2:	4814      	ldr	r0, [pc, #80]	@ (80016f4 <main+0x4b8>)
 80016a4:	f004 fa32 	bl	8005b0c <HAL_UART_Transmit>
        memset(s ,0, sizeof(s));
 80016a8:	22c8      	movs	r2, #200	@ 0xc8
 80016aa:	2100      	movs	r1, #0
 80016ac:	4810      	ldr	r0, [pc, #64]	@ (80016f0 <main+0x4b4>)
 80016ae:	f005 fd46 	bl	800713e <memset>
        Attiva_LED(GREEN_BUTTON_PIN, 0, 255, 0);
 80016b2:	2300      	movs	r3, #0
 80016b4:	22ff      	movs	r2, #255	@ 0xff
 80016b6:	2100      	movs	r1, #0
 80016b8:	2004      	movs	r0, #4
 80016ba:	f7ff fda7 	bl	800120c <Attiva_LED>
        while(curr_state == ended){ //dovrebbe bloccarsi qua
 80016be:	e002      	b.n	80016c6 <main+0x48a>
        	HAL_Delay(250);
 80016c0:	20fa      	movs	r0, #250	@ 0xfa
 80016c2:	f000 fa59 	bl	8001b78 <HAL_Delay>
        while(curr_state == ended){ //dovrebbe bloccarsi qua
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <main+0x4c8>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d0f8      	beq.n	80016c0 <main+0x484>
		}
		Reset_LED();
 80016ce:	f7ff fd85 	bl	80011dc <Reset_LED>
        break;
 80016d2:	bf00      	nop
      switch(curr_state){
 80016d4:	e615      	b.n	8001302 <main+0xc6>
 80016d6:	bf00      	nop
 80016d8:	200006e0 	.word	0x200006e0
 80016dc:	20000740 	.word	0x20000740
 80016e0:	bff00000 	.word	0xbff00000
 80016e4:	20000000 	.word	0x20000000
 80016e8:	200006d4 	.word	0x200006d4
 80016ec:	0800a4fc 	.word	0x0800a4fc
 80016f0:	2000060c 	.word	0x2000060c
 80016f4:	20000584 	.word	0x20000584
 80016f8:	0800a524 	.word	0x0800a524
 80016fc:	0800a544 	.word	0x0800a544
 8001700:	0800a5b8 	.word	0x0800a5b8
 8001704:	2000074c 	.word	0x2000074c

08001708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b096      	sub	sp, #88	@ 0x58
 800170c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	2244      	movs	r2, #68	@ 0x44
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f005 fd11 	bl	800713e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	463b      	mov	r3, r7
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800172a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800172e:	f001 fac7 	bl	8002cc0 <HAL_PWREx_ControlVoltageScaling>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001738:	f000 fa7a 	bl	8001c30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800173c:	2310      	movs	r3, #16
 800173e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001740:	2301      	movs	r3, #1
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001748:	2360      	movs	r3, #96	@ 0x60
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174c:	2302      	movs	r3, #2
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001750:	2301      	movs	r3, #1
 8001752:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001758:	2324      	movs	r3, #36	@ 0x24
 800175a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800175c:	2307      	movs	r3, #7
 800175e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001760:	2302      	movs	r3, #2
 8001762:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001764:	2302      	movs	r3, #2
 8001766:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4618      	mov	r0, r3
 800176e:	f001 fafd 	bl	8002d6c <HAL_RCC_OscConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001778:	f000 fa5a 	bl	8001c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177c:	230f      	movs	r3, #15
 800177e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001780:	2303      	movs	r3, #3
 8001782:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001788:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800178c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800178e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001792:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001794:	463b      	mov	r3, r7
 8001796:	2104      	movs	r1, #4
 8001798:	4618      	mov	r0, r3
 800179a:	f001 fec3 	bl	8003524 <HAL_RCC_ClockConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80017a4:	f000 fa44 	bl	8001c30 <Error_Handler>
  }
}
 80017a8:	bf00      	nop
 80017aa:	3758      	adds	r7, #88	@ 0x58
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c2:	463b      	mov	r3, r7
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
 80017d0:	615a      	str	r2, [r3, #20]
 80017d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d4:	4b21      	ldr	r3, [pc, #132]	@ (800185c <MX_TIM3_Init+0xac>)
 80017d6:	4a22      	ldr	r2, [pc, #136]	@ (8001860 <MX_TIM3_Init+0xb0>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017da:	4b20      	ldr	r3, [pc, #128]	@ (800185c <MX_TIM3_Init+0xac>)
 80017dc:	2200      	movs	r2, #0
 80017de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <MX_TIM3_Init+0xac>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 72-1;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <MX_TIM3_Init+0xac>)
 80017e8:	2247      	movs	r2, #71	@ 0x47
 80017ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <MX_TIM3_Init+0xac>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <MX_TIM3_Init+0xac>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017f8:	4818      	ldr	r0, [pc, #96]	@ (800185c <MX_TIM3_Init+0xac>)
 80017fa:	f002 fe61 	bl	80044c0 <HAL_TIM_PWM_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001804:	f000 fa14 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	4811      	ldr	r0, [pc, #68]	@ (800185c <MX_TIM3_Init+0xac>)
 8001818:	f004 f884 	bl	8005924 <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001822:	f000 fa05 	bl	8001c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001826:	2360      	movs	r3, #96	@ 0x60
 8001828:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001836:	463b      	mov	r3, r7
 8001838:	2208      	movs	r2, #8
 800183a:	4619      	mov	r1, r3
 800183c:	4807      	ldr	r0, [pc, #28]	@ (800185c <MX_TIM3_Init+0xac>)
 800183e:	f003 fab7 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001848:	f000 f9f2 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800184c:	4803      	ldr	r0, [pc, #12]	@ (800185c <MX_TIM3_Init+0xac>)
 800184e:	f000 fa8b 	bl	8001d68 <HAL_TIM_MspPostInit>

}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	@ 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200004a4 	.word	0x200004a4
 8001860:	40000400 	.word	0x40000400

08001864 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001868:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <MX_TIM16_Init+0x48>)
 800186a:	4a11      	ldr	r2, [pc, #68]	@ (80018b0 <MX_TIM16_Init+0x4c>)
 800186c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2231;
 800186e:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <MX_TIM16_Init+0x48>)
 8001870:	f640 02b7 	movw	r2, #2231	@ 0x8b7
 8001874:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001876:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <MX_TIM16_Init+0x48>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64515;
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <MX_TIM16_Init+0x48>)
 800187e:	f64f 4203 	movw	r2, #64515	@ 0xfc03
 8001882:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001884:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <MX_TIM16_Init+0x48>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800188a:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <MX_TIM16_Init+0x48>)
 800188c:	2200      	movs	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <MX_TIM16_Init+0x48>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_TIM16_Init+0x48>)
 8001898:	f002 fd24 	bl	80042e4 <HAL_TIM_Base_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80018a2:	f000 f9c5 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200004f0 	.word	0x200004f0
 80018b0:	40014400 	.word	0x40014400

080018b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b8:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_USART1_UART_Init+0x58>)
 80018ba:	4a15      	ldr	r2, [pc, #84]	@ (8001910 <MX_USART1_UART_Init+0x5c>)
 80018bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018be:	4b13      	ldr	r3, [pc, #76]	@ (800190c <MX_USART1_UART_Init+0x58>)
 80018c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <MX_USART1_UART_Init+0x58>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <MX_USART1_UART_Init+0x58>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <MX_USART1_UART_Init+0x58>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_USART1_UART_Init+0x58>)
 80018da:	220c      	movs	r2, #12
 80018dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <MX_USART1_UART_Init+0x58>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_USART1_UART_Init+0x58>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	@ (800190c <MX_USART1_UART_Init+0x58>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_USART1_UART_Init+0x58>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	@ (800190c <MX_USART1_UART_Init+0x58>)
 80018f8:	f004 f8ba 	bl	8005a70 <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001902:	f000 f995 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000584 	.word	0x20000584
 8001910:	40013800 	.word	0x40013800

08001914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800191a:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <MX_DMA_Init+0x38>)
 800191c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191e:	4a0b      	ldr	r2, [pc, #44]	@ (800194c <MX_DMA_Init+0x38>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6493      	str	r3, [r2, #72]	@ 0x48
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MX_DMA_Init+0x38>)
 8001928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	200c      	movs	r0, #12
 8001938:	f000 fd83 	bl	8002442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800193c:	200c      	movs	r0, #12
 800193e:	f000 fd9c 	bl	800247a <HAL_NVIC_EnableIRQ>

}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000

08001950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	@ 0x28
 8001954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001966:	4b46      	ldr	r3, [pc, #280]	@ (8001a80 <MX_GPIO_Init+0x130>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	4a45      	ldr	r2, [pc, #276]	@ (8001a80 <MX_GPIO_Init+0x130>)
 800196c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001972:	4b43      	ldr	r3, [pc, #268]	@ (8001a80 <MX_GPIO_Init+0x130>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	4b40      	ldr	r3, [pc, #256]	@ (8001a80 <MX_GPIO_Init+0x130>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001982:	4a3f      	ldr	r2, [pc, #252]	@ (8001a80 <MX_GPIO_Init+0x130>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a80 <MX_GPIO_Init+0x130>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	4b3a      	ldr	r3, [pc, #232]	@ (8001a80 <MX_GPIO_Init+0x130>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	4a39      	ldr	r2, [pc, #228]	@ (8001a80 <MX_GPIO_Init+0x130>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a2:	4b37      	ldr	r3, [pc, #220]	@ (8001a80 <MX_GPIO_Init+0x130>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	4b34      	ldr	r3, [pc, #208]	@ (8001a80 <MX_GPIO_Init+0x130>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	4a33      	ldr	r2, [pc, #204]	@ (8001a80 <MX_GPIO_Init+0x130>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ba:	4b31      	ldr	r3, [pc, #196]	@ (8001a80 <MX_GPIO_Init+0x130>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019c6:	233f      	movs	r3, #63	@ 0x3f
 80019c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	482a      	ldr	r0, [pc, #168]	@ (8001a84 <MX_GPIO_Init+0x134>)
 80019dc:	f000 ffa0 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e0:	23c0      	movs	r3, #192	@ 0xc0
 80019e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f8:	f000 ff92 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a02:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4619      	mov	r1, r3
 8001a12:	481d      	ldr	r0, [pc, #116]	@ (8001a88 <MX_GPIO_Init+0x138>)
 8001a14:	f000 ff84 	bl	8002920 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	2006      	movs	r0, #6
 8001a1e:	f000 fd10 	bl	8002442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a22:	2006      	movs	r0, #6
 8001a24:	f000 fd29 	bl	800247a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	2007      	movs	r0, #7
 8001a2e:	f000 fd08 	bl	8002442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a32:	2007      	movs	r0, #7
 8001a34:	f000 fd21 	bl	800247a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	2008      	movs	r0, #8
 8001a3e:	f000 fd00 	bl	8002442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a42:	2008      	movs	r0, #8
 8001a44:	f000 fd19 	bl	800247a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	2009      	movs	r0, #9
 8001a4e:	f000 fcf8 	bl	8002442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a52:	2009      	movs	r0, #9
 8001a54:	f000 fd11 	bl	800247a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	200a      	movs	r0, #10
 8001a5e:	f000 fcf0 	bl	8002442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a62:	200a      	movs	r0, #10
 8001a64:	f000 fd09 	bl	800247a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	2017      	movs	r0, #23
 8001a6e:	f000 fce8 	bl	8002442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a72:	2017      	movs	r0, #23
 8001a74:	f000 fd01 	bl	800247a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	@ 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48000800 	.word	0x48000800
 8001a88:	48000400 	.word	0x48000400

08001a8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
  if(curr_state == running){
 8001a96:	4b29      	ldr	r3, [pc, #164]	@ (8001b3c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d136      	bne.n	8001b0c <HAL_GPIO_EXTI_Callback+0x80>
    //int pulsanteCorretto = 0;
	HAL_TIM_Base_Stop(&htim16);
 8001a9e:	4828      	ldr	r0, [pc, #160]	@ (8001b40 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001aa0:	f002 fc77 	bl	8004392 <HAL_TIM_Base_Stop>
    Attiva_LED(puls_id, 0,0,0);
 8001aa4:	4b27      	ldr	r3, [pc, #156]	@ (8001b44 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	f7ff fbad 	bl	800120c <Attiva_LED>
    for(int i = 0; i < MAX_LED; i++){
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e025      	b.n	8001b04 <HAL_GPIO_EXTI_Callback+0x78>
      if(puls_id == Pulsanti[i].Led_num){
 8001ab8:	4a23      	ldr	r2, [pc, #140]	@ (8001b48 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4413      	add	r3, r2
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d119      	bne.n	8001afe <HAL_GPIO_EXTI_Callback+0x72>
        //pulsanteCorretto = 1; // Imposta il flag per indicare che il pulsante corretto è stato premuto
        Tempi[it_cor] = __HAL_TIM_GET_COUNTER(&htim16) / 100.0; // esempio: calcolo del tempo in secondi
 8001aca:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd17 	bl	8000504 <__aeabi_ui2d>
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001ad8:	681c      	ldr	r4, [r3, #0]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001ae0:	f7fe feb4 	bl	800084c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	481a      	ldr	r0, [pc, #104]	@ (8001b54 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001aea:	00e1      	lsls	r1, r4, #3
 8001aec:	4401      	add	r1, r0
 8001aee:	e9c1 2300 	strd	r2, r3, [r1]
        //Colpiti++;
//        sprintf((char*)s,"Premuto il pin %d\r\n", GPIO_Pin);
//		HAL_UART_Transmit(&huart1, s, sizeof(s), 1000);
//		memset(s,0,sizeof(s));
        it_cor++;
 8001af2:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	4a14      	ldr	r2, [pc, #80]	@ (8001b4c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001afa:	6013      	str	r3, [r2, #0]
        // TIM_ResetCounter(TIM16); // Reset del contatore del timer
        return;
 8001afc:	e01b      	b.n	8001b36 <HAL_GPIO_EXTI_Callback+0xaa>
    for(int i = 0; i < MAX_LED; i++){
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3301      	adds	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	ddd6      	ble.n	8001ab8 <HAL_GPIO_EXTI_Callback+0x2c>
 8001b0a:	e014      	b.n	8001b36 <HAL_GPIO_EXTI_Callback+0xaa>
//		it_cor++;
//        Mancati++;
//        return;
//     }
  }
  else if(curr_state == start && GPIO_Pin == GPIO_PIN_4){ // Assicurati che il pin sia corretto
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d106      	bne.n	8001b22 <HAL_GPIO_EXTI_Callback+0x96>
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	2b10      	cmp	r3, #16
 8001b18:	d103      	bne.n	8001b22 <HAL_GPIO_EXTI_Callback+0x96>
    curr_state = running; // Cambia stato a running per iniziare il test
 8001b1a:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	e009      	b.n	8001b36 <HAL_GPIO_EXTI_Callback+0xaa>
  }
  else if(curr_state == ended && GPIO_Pin == GPIO_PIN_4){
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d105      	bne.n	8001b36 <HAL_GPIO_EXTI_Callback+0xaa>
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	2b10      	cmp	r3, #16
 8001b2e:	d102      	bne.n	8001b36 <HAL_GPIO_EXTI_Callback+0xaa>
    curr_state = start; // Ritorna allo stato iniziale per ricominciare
 8001b30:	4b02      	ldr	r3, [pc, #8]	@ (8001b3c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
  }
}
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}
 8001b3c:	2000074c 	.word	0x2000074c
 8001b40:	200004f0 	.word	0x200004f0
 8001b44:	20000738 	.word	0x20000738
 8001b48:	2000045c 	.word	0x2000045c
 8001b4c:	200006d8 	.word	0x200006d8
 8001b50:	40590000 	.word	0x40590000
 8001b54:	200006e0 	.word	0x200006e0

08001b58 <TIM_ResetCounter>:

static void TIM_ResetCounter(TIM_TypeDef* TIM) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8001b60:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <TIM_ResetCounter+0x1c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2200      	movs	r2, #0
 8001b66:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	200004f0 	.word	0x200004f0

08001b78 <HAL_Delay>:
/**
 * Rifacimento della funzione HAL_Delay, ci aggiungiamo una flag per impedire il funzionamento dei pulsanti
 * POSSIAMO CHIAMARE INTERRUPT DURANTE UN DELAY
 */
void HAL_Delay(uint32_t Delay)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  //pauseFlag = 1;
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f000 fb78 	bl	8002274 <HAL_GetTick>
 8001b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	60fb      	str	r3, [r7, #12]


  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d005      	beq.n	8001b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_Delay+0x44>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b9e:	bf00      	nop
 8001ba0:	f000 fb68 	bl	8002274 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d8f7      	bhi.n	8001ba0 <HAL_Delay+0x28>
  {
  }

  //pauseFlag=0;
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000010 	.word	0x20000010

08001bc0 <HAL_TIM_PeriodElapsedCallback>:

// La funzione viene chiamata se il timer scade
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim16);
 8001bc8:	4812      	ldr	r0, [pc, #72]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001bca:	f002 fbe2 	bl	8004392 <HAL_TIM_Base_Stop>
	//Mancati++;
	Tempi[it_cor] = -1.0;
 8001bce:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	18d1      	adds	r1, r2, r3
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001bde:	e9c1 2300 	strd	r2, r3, [r1]
	sprintf((char*)s, "Tempo Scaduto!\r\n");
 8001be2:	4910      	ldr	r1, [pc, #64]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001be4:	4810      	ldr	r0, [pc, #64]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001be6:	f005 fa47 	bl	8007078 <siprintf>
	HAL_UART_Transmit(&huart1, s, sizeof(s), 100);
 8001bea:	2364      	movs	r3, #100	@ 0x64
 8001bec:	22c8      	movs	r2, #200	@ 0xc8
 8001bee:	490e      	ldr	r1, [pc, #56]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001bf0:	480e      	ldr	r0, [pc, #56]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001bf2:	f003 ff8b 	bl	8005b0c <HAL_UART_Transmit>
	memset(s,0,sizeof(s));
 8001bf6:	22c8      	movs	r2, #200	@ 0xc8
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	480b      	ldr	r0, [pc, #44]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001bfc:	f005 fa9f 	bl	800713e <memset>
	it_cor++;
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	3301      	adds	r3, #1
 8001c06:	4a04      	ldr	r2, [pc, #16]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c08:	6013      	str	r3, [r2, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200004f0 	.word	0x200004f0
 8001c18:	200006d8 	.word	0x200006d8
 8001c1c:	200006e0 	.word	0x200006e0
 8001c20:	bff00000 	.word	0xbff00000
 8001c24:	0800a5e8 	.word	0x0800a5e8
 8001c28:	2000060c 	.word	0x2000060c
 8001c2c:	20000584 	.word	0x20000584

08001c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <Error_Handler+0x8>

08001c3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <HAL_MspInit+0x44>)
 8001c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c46:	4a0e      	ldr	r2, [pc, #56]	@ (8001c80 <HAL_MspInit+0x44>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <HAL_MspInit+0x44>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_MspInit+0x44>)
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5e:	4a08      	ldr	r2, [pc, #32]	@ (8001c80 <HAL_MspInit+0x44>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_MspInit+0x44>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000

08001c84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1e      	ldr	r2, [pc, #120]	@ (8001d0c <HAL_TIM_PWM_MspInit+0x88>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d136      	bne.n	8001d04 <HAL_TIM_PWM_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c96:	4b1e      	ldr	r3, [pc, #120]	@ (8001d10 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d10 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <HAL_TIM_PWM_MspInit+0x8c>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 8001cae:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x90>)
 8001cb0:	4a19      	ldr	r2, [pc, #100]	@ (8001d18 <HAL_TIM_PWM_MspInit+0x94>)
 8001cb2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_5;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x90>)
 8001cb6:	2205      	movs	r2, #5
 8001cb8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cba:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x90>)
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc0:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x90>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001cc6:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x90>)
 8001cc8:	2280      	movs	r2, #128	@ 0x80
 8001cca:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x90>)
 8001cce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x90>)
 8001cd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cda:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x90>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8001ce8:	480a      	ldr	r0, [pc, #40]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x90>)
 8001cea:	f000 fbe1 	bl	80024b0 <HAL_DMA_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8001cf4:	f7ff ff9c 	bl	8001c30 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a06      	ldr	r2, [pc, #24]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x90>)
 8001cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001cfe:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x90>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40021000 	.word	0x40021000
 8001d14:	2000053c 	.word	0x2000053c
 8001d18:	4002001c 	.word	0x4002001c

08001d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0d      	ldr	r2, [pc, #52]	@ (8001d60 <HAL_TIM_Base_MspInit+0x44>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d113      	bne.n	8001d56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d64 <HAL_TIM_Base_MspInit+0x48>)
 8001d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d32:	4a0c      	ldr	r2, [pc, #48]	@ (8001d64 <HAL_TIM_Base_MspInit+0x48>)
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d38:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <HAL_TIM_Base_MspInit+0x48>)
 8001d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2102      	movs	r1, #2
 8001d4a:	2019      	movs	r0, #25
 8001d4c:	f000 fb79 	bl	8002442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d50:	2019      	movs	r0, #25
 8001d52:	f000 fb92 	bl	800247a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40014400 	.word	0x40014400
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a11      	ldr	r2, [pc, #68]	@ (8001dcc <HAL_TIM_MspPostInit+0x64>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d11b      	bne.n	8001dc2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_TIM_MspPostInit+0x68>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8e:	4a10      	ldr	r2, [pc, #64]	@ (8001dd0 <HAL_TIM_MspPostInit+0x68>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d96:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <HAL_TIM_MspPostInit+0x68>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_DIN_Pin;
 8001da2:	2301      	movs	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DIN_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <HAL_TIM_MspPostInit+0x6c>)
 8001dbe:	f000 fdaf 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40000400 	.word	0x40000400
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	48000400 	.word	0x48000400

08001dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0ac      	sub	sp, #176	@ 0xb0
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2288      	movs	r2, #136	@ 0x88
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f005 f9a0 	bl	800713e <memset>
  if(huart->Instance==USART1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a27      	ldr	r2, [pc, #156]	@ (8001ea0 <HAL_UART_MspInit+0xc8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d146      	bne.n	8001e96 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fda9 	bl	800396c <HAL_RCCEx_PeriphCLKConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e20:	f7ff ff06 	bl	8001c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea4 <HAL_UART_MspInit+0xcc>)
 8001e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e28:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea4 <HAL_UART_MspInit+0xcc>)
 8001e2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea4 <HAL_UART_MspInit+0xcc>)
 8001e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <HAL_UART_MspInit+0xcc>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e40:	4a18      	ldr	r2, [pc, #96]	@ (8001ea4 <HAL_UART_MspInit+0xcc>)
 8001e42:	f043 0302 	orr.w	r3, r3, #2
 8001e46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e48:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <HAL_UART_MspInit+0xcc>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e54:	23c0      	movs	r3, #192	@ 0xc0
 8001e56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e6c:	2307      	movs	r3, #7
 8001e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e72:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e76:	4619      	mov	r1, r3
 8001e78:	480b      	ldr	r0, [pc, #44]	@ (8001ea8 <HAL_UART_MspInit+0xd0>)
 8001e7a:	f000 fd51 	bl	8002920 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <HAL_UART_MspInit+0xd4>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <HAL_UART_MspInit+0xd4>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e88:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <HAL_UART_MspInit+0xd4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4a07      	ldr	r2, [pc, #28]	@ (8001eac <HAL_UART_MspInit+0xd4>)
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e94:	6053      	str	r3, [r2, #4]

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e96:	bf00      	nop
 8001e98:	37b0      	adds	r7, #176	@ 0xb0
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40013800 	.word	0x40013800
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	48000400 	.word	0x48000400
 8001eac:	40010000 	.word	0x40010000

08001eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <NMI_Handler+0x4>

08001eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <HardFault_Handler+0x4>

08001ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <MemManage_Handler+0x4>

08001ec8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <BusFault_Handler+0x4>

08001ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <UsageFault_Handler+0x4>

08001ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f06:	f000 f9a1 	bl	800224c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f000 feae 	bl	8002c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f20:	2002      	movs	r0, #2
 8001f22:	f000 fea7 	bl	8002c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001f2e:	2004      	movs	r0, #4
 8001f30:	f000 fea0 	bl	8002c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001f3c:	2008      	movs	r0, #8
 8001f3e:	f000 fe99 	bl	8002c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001f4a:	2010      	movs	r0, #16
 8001f4c:	f000 fe92 	bl	8002c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <DMA1_Channel2_IRQHandler+0x10>)
 8001f5a:	f000 fc02 	bl	8002762 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000053c 	.word	0x2000053c

08001f68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001f6c:	2020      	movs	r0, #32
 8001f6e:	f000 fe81 	bl	8002c74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001f72:	2040      	movs	r0, #64	@ 0x40
 8001f74:	f000 fe7e 	bl	8002c74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001f78:	2080      	movs	r0, #128	@ 0x80
 8001f7a:	f000 fe7b 	bl	8002c74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001f7e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001f82:	f000 fe77 	bl	8002c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001f90:	4802      	ldr	r0, [pc, #8]	@ (8001f9c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001f92:	f002 fe05 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200004f0 	.word	0x200004f0

08001fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return 1;
 8001fa4:	2301      	movs	r3, #1
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_kill>:

int _kill(int pid, int sig)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fba:	f005 f913 	bl	80071e4 <__errno>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2216      	movs	r2, #22
 8001fc2:	601a      	str	r2, [r3, #0]
  return -1;
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_exit>:

void _exit (int status)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ffe7 	bl	8001fb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fe2:	bf00      	nop
 8001fe4:	e7fd      	b.n	8001fe2 <_exit+0x12>

08001fe6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e00a      	b.n	800200e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ff8:	f3af 8000 	nop.w
 8001ffc:	4601      	mov	r1, r0
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	60ba      	str	r2, [r7, #8]
 8002004:	b2ca      	uxtb	r2, r1
 8002006:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3301      	adds	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	429a      	cmp	r2, r3
 8002014:	dbf0      	blt.n	8001ff8 <_read+0x12>
  }

  return len;
 8002016:	687b      	ldr	r3, [r7, #4]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	e009      	b.n	8002046 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	60ba      	str	r2, [r7, #8]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3301      	adds	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	dbf1      	blt.n	8002032 <_write+0x12>
  }
  return len;
 800204e:	687b      	ldr	r3, [r7, #4]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_close>:

int _close(int file)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002060:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002080:	605a      	str	r2, [r3, #4]
  return 0;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <_isatty>:

int _isatty(int file)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002098:	2301      	movs	r3, #1
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b085      	sub	sp, #20
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c8:	4a14      	ldr	r2, [pc, #80]	@ (800211c <_sbrk+0x5c>)
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <_sbrk+0x60>)
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d4:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <_sbrk+0x64>)
 80020de:	4a12      	ldr	r2, [pc, #72]	@ (8002128 <_sbrk+0x68>)
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d207      	bcs.n	8002100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f0:	f005 f878 	bl	80071e4 <__errno>
 80020f4:	4603      	mov	r3, r0
 80020f6:	220c      	movs	r2, #12
 80020f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	e009      	b.n	8002114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002106:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <_sbrk+0x64>)
 8002110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20018000 	.word	0x20018000
 8002120:	00000400 	.word	0x00000400
 8002124:	20000750 	.word	0x20000750
 8002128:	200008a8 	.word	0x200008a8

0800212c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <SystemInit+0x20>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	4a05      	ldr	r2, [pc, #20]	@ (800214c <SystemInit+0x20>)
 8002138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002188 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002154:	f7ff ffea 	bl	800212c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002158:	480c      	ldr	r0, [pc, #48]	@ (800218c <LoopForever+0x6>)
  ldr r1, =_edata
 800215a:	490d      	ldr	r1, [pc, #52]	@ (8002190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800215c:	4a0d      	ldr	r2, [pc, #52]	@ (8002194 <LoopForever+0xe>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002160:	e002      	b.n	8002168 <LoopCopyDataInit>

08002162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002166:	3304      	adds	r3, #4

08002168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800216c:	d3f9      	bcc.n	8002162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216e:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002170:	4c0a      	ldr	r4, [pc, #40]	@ (800219c <LoopForever+0x16>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002174:	e001      	b.n	800217a <LoopFillZerobss>

08002176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002178:	3204      	adds	r2, #4

0800217a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800217c:	d3fb      	bcc.n	8002176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800217e:	f005 f837 	bl	80071f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002182:	f7ff f85b 	bl	800123c <main>

08002186 <LoopForever>:

LoopForever:
    b LoopForever
 8002186:	e7fe      	b.n	8002186 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002188:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800218c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002190:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002194:	0800abf8 	.word	0x0800abf8
  ldr r2, =_sbss
 8002198:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800219c:	200008a4 	.word	0x200008a4

080021a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC1_2_IRQHandler>

080021a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ac:	2003      	movs	r0, #3
 80021ae:	f000 f93d 	bl	800242c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021b2:	200f      	movs	r0, #15
 80021b4:	f000 f80e 	bl	80021d4 <HAL_InitTick>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	71fb      	strb	r3, [r7, #7]
 80021c2:	e001      	b.n	80021c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021c4:	f7ff fd3a 	bl	8001c3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021c8:	79fb      	ldrb	r3, [r7, #7]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021e0:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <HAL_InitTick+0x6c>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d023      	beq.n	8002230 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021e8:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <HAL_InitTick+0x70>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <HAL_InitTick+0x6c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f949 	bl	8002496 <HAL_SYSTICK_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10f      	bne.n	800222a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b0f      	cmp	r3, #15
 800220e:	d809      	bhi.n	8002224 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002210:	2200      	movs	r2, #0
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f000 f913 	bl	8002442 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800221c:	4a0a      	ldr	r2, [pc, #40]	@ (8002248 <HAL_InitTick+0x74>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e007      	b.n	8002234 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e004      	b.n	8002234 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
 800222e:	e001      	b.n	8002234 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000010 	.word	0x20000010
 8002244:	20000008 	.word	0x20000008
 8002248:	2000000c 	.word	0x2000000c

0800224c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_IncTick+0x20>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_IncTick+0x24>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4413      	add	r3, r2
 800225c:	4a04      	ldr	r2, [pc, #16]	@ (8002270 <HAL_IncTick+0x24>)
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000010 	.word	0x20000010
 8002270:	20000754 	.word	0x20000754

08002274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return uwTick;
 8002278:	4b03      	ldr	r3, [pc, #12]	@ (8002288 <HAL_GetTick+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000754 	.word	0x20000754

0800228c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	@ (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db0b      	blt.n	800231a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4907      	ldr	r1, [pc, #28]	@ (8002328 <__NVIC_EnableIRQ+0x38>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2001      	movs	r0, #1
 8002312:	fa00 f202 	lsl.w	r2, r0, r2
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100

0800232c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	490c      	ldr	r1, [pc, #48]	@ (8002378 <__NVIC_SetPriority+0x4c>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	440b      	add	r3, r1
 8002350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002354:	e00a      	b.n	800236c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4908      	ldr	r1, [pc, #32]	@ (800237c <__NVIC_SetPriority+0x50>)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3b04      	subs	r3, #4
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	440b      	add	r3, r1
 800236a:	761a      	strb	r2, [r3, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	@ 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f1c3 0307 	rsb	r3, r3, #7
 800239a:	2b04      	cmp	r3, #4
 800239c:	bf28      	it	cs
 800239e:	2304      	movcs	r3, #4
 80023a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d902      	bls.n	80023b0 <NVIC_EncodePriority+0x30>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3b03      	subs	r3, #3
 80023ae:	e000      	b.n	80023b2 <NVIC_EncodePriority+0x32>
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	4313      	orrs	r3, r2
         );
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	@ 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f8:	d301      	bcc.n	80023fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00f      	b.n	800241e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002428 <SysTick_Config+0x40>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002406:	210f      	movs	r1, #15
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f7ff ff8e 	bl	800232c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <SysTick_Config+0x40>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002416:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <SysTick_Config+0x40>)
 8002418:	2207      	movs	r2, #7
 800241a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	e000e010 	.word	0xe000e010

0800242c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff29 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002454:	f7ff ff3e 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 8002458:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7ff ff8e 	bl	8002380 <NVIC_EncodePriority>
 8002464:	4602      	mov	r2, r0
 8002466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff5d 	bl	800232c <__NVIC_SetPriority>
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff31 	bl	80022f0 <__NVIC_EnableIRQ>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ffa2 	bl	80023e8 <SysTick_Config>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e098      	b.n	80025f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002600 <HAL_DMA_Init+0x150>)
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d80f      	bhi.n	80024ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002604 <HAL_DMA_Init+0x154>)
 80024d6:	4413      	add	r3, r2
 80024d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002608 <HAL_DMA_Init+0x158>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	009a      	lsls	r2, r3, #2
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a48      	ldr	r2, [pc, #288]	@ (800260c <HAL_DMA_Init+0x15c>)
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80024ec:	e00e      	b.n	800250c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b46      	ldr	r3, [pc, #280]	@ (8002610 <HAL_DMA_Init+0x160>)
 80024f6:	4413      	add	r3, r2
 80024f8:	4a43      	ldr	r2, [pc, #268]	@ (8002608 <HAL_DMA_Init+0x158>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	009a      	lsls	r2, r3, #2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a42      	ldr	r2, [pc, #264]	@ (8002614 <HAL_DMA_Init+0x164>)
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002526:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002530:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800253c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002548:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002566:	d039      	beq.n	80025dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256c:	4a27      	ldr	r2, [pc, #156]	@ (800260c <HAL_DMA_Init+0x15c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d11a      	bne.n	80025a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002572:	4b29      	ldr	r3, [pc, #164]	@ (8002618 <HAL_DMA_Init+0x168>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	f003 031c 	and.w	r3, r3, #28
 800257e:	210f      	movs	r1, #15
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	4924      	ldr	r1, [pc, #144]	@ (8002618 <HAL_DMA_Init+0x168>)
 8002588:	4013      	ands	r3, r2
 800258a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800258c:	4b22      	ldr	r3, [pc, #136]	@ (8002618 <HAL_DMA_Init+0x168>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002598:	f003 031c 	and.w	r3, r3, #28
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	491d      	ldr	r1, [pc, #116]	@ (8002618 <HAL_DMA_Init+0x168>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
 80025a6:	e019      	b.n	80025dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025a8:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <HAL_DMA_Init+0x16c>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b0:	f003 031c 	and.w	r3, r3, #28
 80025b4:	210f      	movs	r1, #15
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	4917      	ldr	r1, [pc, #92]	@ (800261c <HAL_DMA_Init+0x16c>)
 80025be:	4013      	ands	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025c2:	4b16      	ldr	r3, [pc, #88]	@ (800261c <HAL_DMA_Init+0x16c>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6859      	ldr	r1, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ce:	f003 031c 	and.w	r3, r3, #28
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	4911      	ldr	r1, [pc, #68]	@ (800261c <HAL_DMA_Init+0x16c>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40020407 	.word	0x40020407
 8002604:	bffdfff8 	.word	0xbffdfff8
 8002608:	cccccccd 	.word	0xcccccccd
 800260c:	40020000 	.word	0x40020000
 8002610:	bffdfbf8 	.word	0xbffdfbf8
 8002614:	40020400 	.word	0x40020400
 8002618:	400200a8 	.word	0x400200a8
 800261c:	400204a8 	.word	0x400204a8

08002620 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_DMA_Start_IT+0x20>
 800263c:	2302      	movs	r3, #2
 800263e:	e04b      	b.n	80026d8 <HAL_DMA_Start_IT+0xb8>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b01      	cmp	r3, #1
 8002652:	d13a      	bne.n	80026ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f921 	bl	80028c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 020e 	orr.w	r2, r2, #14
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e00f      	b.n	80026b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0204 	bic.w	r2, r2, #4
 80026a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 020a 	orr.w	r2, r2, #10
 80026b6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e005      	b.n	80026d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
 80026d4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d005      	beq.n	8002704 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2204      	movs	r2, #4
 80026fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
 8002702:	e029      	b.n	8002758 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 020e 	bic.w	r2, r2, #14
 8002712:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002728:	f003 021c 	and.w	r2, r3, #28
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f202 	lsl.w	r2, r1, r2
 8002736:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	4798      	blx	r3
    }
  }
  return status;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	f003 031c 	and.w	r3, r3, #28
 8002782:	2204      	movs	r2, #4
 8002784:	409a      	lsls	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d026      	beq.n	80027dc <HAL_DMA_IRQHandler+0x7a>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d021      	beq.n	80027dc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d107      	bne.n	80027b6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0204 	bic.w	r2, r2, #4
 80027b4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f003 021c 	and.w	r2, r3, #28
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	2104      	movs	r1, #4
 80027c4:	fa01 f202 	lsl.w	r2, r1, r2
 80027c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d071      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027da:	e06c      	b.n	80028b6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e0:	f003 031c 	and.w	r3, r3, #28
 80027e4:	2202      	movs	r2, #2
 80027e6:	409a      	lsls	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d02e      	beq.n	800284e <HAL_DMA_IRQHandler+0xec>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d029      	beq.n	800284e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10b      	bne.n	8002820 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 020a 	bic.w	r2, r2, #10
 8002816:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002824:	f003 021c 	and.w	r2, r3, #28
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	2102      	movs	r1, #2
 800282e:	fa01 f202 	lsl.w	r2, r1, r2
 8002832:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d038      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800284c:	e033      	b.n	80028b6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	f003 031c 	and.w	r3, r3, #28
 8002856:	2208      	movs	r2, #8
 8002858:	409a      	lsls	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4013      	ands	r3, r2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d02a      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x156>
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d025      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 020e 	bic.w	r2, r2, #14
 800287a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002880:	f003 021c 	and.w	r2, r3, #28
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	2101      	movs	r1, #1
 800288a:	fa01 f202 	lsl.w	r2, r1, r2
 800288e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d004      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028b6:	bf00      	nop
 80028b8:	bf00      	nop
}
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	f003 021c 	and.w	r2, r3, #28
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f202 	lsl.w	r2, r1, r2
 80028e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d108      	bne.n	8002904 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002902:	e007      	b.n	8002914 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	60da      	str	r2, [r3, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292e:	e17f      	b.n	8002c30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8171 	beq.w	8002c2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d005      	beq.n	8002960 <HAL_GPIO_Init+0x40>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d130      	bne.n	80029c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002996:	2201      	movs	r2, #1
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 0201 	and.w	r2, r3, #1
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d118      	bne.n	8002a00 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029d4:	2201      	movs	r2, #1
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	08db      	lsrs	r3, r3, #3
 80029ea:	f003 0201 	and.w	r2, r3, #1
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d017      	beq.n	8002a3c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d123      	bne.n	8002a90 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	08da      	lsrs	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3208      	adds	r2, #8
 8002a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	220f      	movs	r2, #15
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	08da      	lsrs	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3208      	adds	r2, #8
 8002a8a:	6939      	ldr	r1, [r7, #16]
 8002a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0203 	and.w	r2, r3, #3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80ac 	beq.w	8002c2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c50 <HAL_GPIO_Init+0x330>)
 8002ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad6:	4a5e      	ldr	r2, [pc, #376]	@ (8002c50 <HAL_GPIO_Init+0x330>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ade:	4b5c      	ldr	r3, [pc, #368]	@ (8002c50 <HAL_GPIO_Init+0x330>)
 8002ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002aea:	4a5a      	ldr	r2, [pc, #360]	@ (8002c54 <HAL_GPIO_Init+0x334>)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	089b      	lsrs	r3, r3, #2
 8002af0:	3302      	adds	r3, #2
 8002af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	220f      	movs	r2, #15
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b14:	d025      	beq.n	8002b62 <HAL_GPIO_Init+0x242>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4f      	ldr	r2, [pc, #316]	@ (8002c58 <HAL_GPIO_Init+0x338>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01f      	beq.n	8002b5e <HAL_GPIO_Init+0x23e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4e      	ldr	r2, [pc, #312]	@ (8002c5c <HAL_GPIO_Init+0x33c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d019      	beq.n	8002b5a <HAL_GPIO_Init+0x23a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4d      	ldr	r2, [pc, #308]	@ (8002c60 <HAL_GPIO_Init+0x340>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_GPIO_Init+0x236>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4c      	ldr	r2, [pc, #304]	@ (8002c64 <HAL_GPIO_Init+0x344>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00d      	beq.n	8002b52 <HAL_GPIO_Init+0x232>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4b      	ldr	r2, [pc, #300]	@ (8002c68 <HAL_GPIO_Init+0x348>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <HAL_GPIO_Init+0x22e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4a      	ldr	r2, [pc, #296]	@ (8002c6c <HAL_GPIO_Init+0x34c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_GPIO_Init+0x22a>
 8002b46:	2306      	movs	r3, #6
 8002b48:	e00c      	b.n	8002b64 <HAL_GPIO_Init+0x244>
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	e00a      	b.n	8002b64 <HAL_GPIO_Init+0x244>
 8002b4e:	2305      	movs	r3, #5
 8002b50:	e008      	b.n	8002b64 <HAL_GPIO_Init+0x244>
 8002b52:	2304      	movs	r3, #4
 8002b54:	e006      	b.n	8002b64 <HAL_GPIO_Init+0x244>
 8002b56:	2303      	movs	r3, #3
 8002b58:	e004      	b.n	8002b64 <HAL_GPIO_Init+0x244>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e002      	b.n	8002b64 <HAL_GPIO_Init+0x244>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_GPIO_Init+0x244>
 8002b62:	2300      	movs	r3, #0
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	f002 0203 	and.w	r2, r2, #3
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	4093      	lsls	r3, r2
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b74:	4937      	ldr	r1, [pc, #220]	@ (8002c54 <HAL_GPIO_Init+0x334>)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b82:	4b3b      	ldr	r3, [pc, #236]	@ (8002c70 <HAL_GPIO_Init+0x350>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ba6:	4a32      	ldr	r2, [pc, #200]	@ (8002c70 <HAL_GPIO_Init+0x350>)
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bac:	4b30      	ldr	r3, [pc, #192]	@ (8002c70 <HAL_GPIO_Init+0x350>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bd0:	4a27      	ldr	r2, [pc, #156]	@ (8002c70 <HAL_GPIO_Init+0x350>)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bd6:	4b26      	ldr	r3, [pc, #152]	@ (8002c70 <HAL_GPIO_Init+0x350>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8002c70 <HAL_GPIO_Init+0x350>)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	@ (8002c70 <HAL_GPIO_Init+0x350>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c24:	4a12      	ldr	r2, [pc, #72]	@ (8002c70 <HAL_GPIO_Init+0x350>)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f47f ae78 	bne.w	8002930 <HAL_GPIO_Init+0x10>
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40010000 	.word	0x40010000
 8002c58:	48000400 	.word	0x48000400
 8002c5c:	48000800 	.word	0x48000800
 8002c60:	48000c00 	.word	0x48000c00
 8002c64:	48001000 	.word	0x48001000
 8002c68:	48001400 	.word	0x48001400
 8002c6c:	48001800 	.word	0x48001800
 8002c70:	40010400 	.word	0x40010400

08002c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fefa 	bl	8001a8c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40010400 	.word	0x40010400

08002ca4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ca8:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <HAL_PWREx_GetVoltageRange+0x18>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40007000 	.word	0x40007000

08002cc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cce:	d130      	bne.n	8002d32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cd0:	4b23      	ldr	r3, [pc, #140]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cdc:	d038      	beq.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cde:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cee:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2232      	movs	r2, #50	@ 0x32
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0c9b      	lsrs	r3, r3, #18
 8002d00:	3301      	adds	r3, #1
 8002d02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d04:	e002      	b.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d0c:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d18:	d102      	bne.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f2      	bne.n	8002d06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d20:	4b0f      	ldr	r3, [pc, #60]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d2c:	d110      	bne.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e00f      	b.n	8002d52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d32:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d3e:	d007      	beq.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d40:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d48:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40007000 	.word	0x40007000
 8002d64:	20000008 	.word	0x20000008
 8002d68:	431bde83 	.word	0x431bde83

08002d6c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e3ca      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d7e:	4b97      	ldr	r3, [pc, #604]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d88:	4b94      	ldr	r3, [pc, #592]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80e4 	beq.w	8002f68 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <HAL_RCC_OscConfig+0x4a>
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b0c      	cmp	r3, #12
 8002daa:	f040 808b 	bne.w	8002ec4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	f040 8087 	bne.w	8002ec4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002db6:	4b89      	ldr	r3, [pc, #548]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <HAL_RCC_OscConfig+0x62>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e3a2      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1a      	ldr	r2, [r3, #32]
 8002dd2:	4b82      	ldr	r3, [pc, #520]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <HAL_RCC_OscConfig+0x7c>
 8002dde:	4b7f      	ldr	r3, [pc, #508]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de6:	e005      	b.n	8002df4 <HAL_RCC_OscConfig+0x88>
 8002de8:	4b7c      	ldr	r3, [pc, #496]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d223      	bcs.n	8002e40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fd55 	bl	80038ac <RCC_SetFlashLatencyFromMSIRange>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e383      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e0c:	4b73      	ldr	r3, [pc, #460]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a72      	ldr	r2, [pc, #456]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e12:	f043 0308 	orr.w	r3, r3, #8
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b70      	ldr	r3, [pc, #448]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	496d      	ldr	r1, [pc, #436]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2a:	4b6c      	ldr	r3, [pc, #432]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	4968      	ldr	r1, [pc, #416]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
 8002e3e:	e025      	b.n	8002e8c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e40:	4b66      	ldr	r3, [pc, #408]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a65      	ldr	r2, [pc, #404]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e46:	f043 0308 	orr.w	r3, r3, #8
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b63      	ldr	r3, [pc, #396]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4960      	ldr	r1, [pc, #384]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	495b      	ldr	r1, [pc, #364]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fd15 	bl	80038ac <RCC_SetFlashLatencyFromMSIRange>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e343      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e8c:	f000 fc4a 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b52      	ldr	r3, [pc, #328]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	4950      	ldr	r1, [pc, #320]	@ (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002e9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea8:	4a4e      	ldr	r2, [pc, #312]	@ (8002fe4 <HAL_RCC_OscConfig+0x278>)
 8002eaa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002eac:	4b4e      	ldr	r3, [pc, #312]	@ (8002fe8 <HAL_RCC_OscConfig+0x27c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff f98f 	bl	80021d4 <HAL_InitTick>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d052      	beq.n	8002f66 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	e327      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d032      	beq.n	8002f32 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ecc:	4b43      	ldr	r3, [pc, #268]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a42      	ldr	r2, [pc, #264]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ed8:	f7ff f9cc 	bl	8002274 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ee0:	f7ff f9c8 	bl	8002274 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e310      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002efe:	4b37      	ldr	r3, [pc, #220]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a36      	ldr	r2, [pc, #216]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f04:	f043 0308 	orr.w	r3, r3, #8
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b34      	ldr	r3, [pc, #208]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4931      	ldr	r1, [pc, #196]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	492c      	ldr	r1, [pc, #176]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
 8002f30:	e01a      	b.n	8002f68 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f32:	4b2a      	ldr	r3, [pc, #168]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a29      	ldr	r2, [pc, #164]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f3e:	f7ff f999 	bl	8002274 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f46:	f7ff f995 	bl	8002274 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e2dd      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f58:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f0      	bne.n	8002f46 <HAL_RCC_OscConfig+0x1da>
 8002f64:	e000      	b.n	8002f68 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d074      	beq.n	800305e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x21a>
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	d10e      	bne.n	8002f9e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d10b      	bne.n	8002f9e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f86:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d064      	beq.n	800305c <HAL_RCC_OscConfig+0x2f0>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d160      	bne.n	800305c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e2ba      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x24a>
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0b      	ldr	r2, [pc, #44]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	e026      	b.n	8003004 <HAL_RCC_OscConfig+0x298>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fbe:	d115      	bne.n	8002fec <HAL_RCC_OscConfig+0x280>
 8002fc0:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002fc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b03      	ldr	r3, [pc, #12]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a02      	ldr	r2, [pc, #8]	@ (8002fdc <HAL_RCC_OscConfig+0x270>)
 8002fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	e014      	b.n	8003004 <HAL_RCC_OscConfig+0x298>
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	0800a5fc 	.word	0x0800a5fc
 8002fe4:	20000008 	.word	0x20000008
 8002fe8:	2000000c 	.word	0x2000000c
 8002fec:	4ba0      	ldr	r3, [pc, #640]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a9f      	ldr	r2, [pc, #636]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	4b9d      	ldr	r3, [pc, #628]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a9c      	ldr	r2, [pc, #624]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8002ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d013      	beq.n	8003034 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7ff f932 	bl	8002274 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003014:	f7ff f92e 	bl	8002274 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	@ 0x64
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e276      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003026:	4b92      	ldr	r3, [pc, #584]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x2a8>
 8003032:	e014      	b.n	800305e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7ff f91e 	bl	8002274 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303c:	f7ff f91a 	bl	8002274 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	@ 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e262      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304e:	4b88      	ldr	r3, [pc, #544]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x2d0>
 800305a:	e000      	b.n	800305e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d060      	beq.n	800312c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d005      	beq.n	800307c <HAL_RCC_OscConfig+0x310>
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b0c      	cmp	r3, #12
 8003074:	d119      	bne.n	80030aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d116      	bne.n	80030aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800307c:	4b7c      	ldr	r3, [pc, #496]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_OscConfig+0x328>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e23f      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	4b76      	ldr	r3, [pc, #472]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	4973      	ldr	r1, [pc, #460]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a8:	e040      	b.n	800312c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d023      	beq.n	80030fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7ff f8d9 	bl	8002274 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c6:	f7ff f8d5 	bl	8002274 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e21d      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d8:	4b65      	ldr	r3, [pc, #404]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b62      	ldr	r3, [pc, #392]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	495f      	ldr	r1, [pc, #380]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
 80030f8:	e018      	b.n	800312c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7ff f8b5 	bl	8002274 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310e:	f7ff f8b1 	bl	8002274 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e1f9      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003120:	4b53      	ldr	r3, [pc, #332]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d03c      	beq.n	80031b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01c      	beq.n	800317a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003140:	4b4b      	ldr	r3, [pc, #300]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003146:	4a4a      	ldr	r2, [pc, #296]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7ff f890 	bl	8002274 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003158:	f7ff f88c 	bl	8002274 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e1d4      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800316a:	4b41      	ldr	r3, [pc, #260]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 800316c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ef      	beq.n	8003158 <HAL_RCC_OscConfig+0x3ec>
 8003178:	e01b      	b.n	80031b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800317a:	4b3d      	ldr	r3, [pc, #244]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 800317c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003180:	4a3b      	ldr	r2, [pc, #236]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318a:	f7ff f873 	bl	8002274 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003192:	f7ff f86f 	bl	8002274 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e1b7      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a4:	4b32      	ldr	r3, [pc, #200]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80031a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1ef      	bne.n	8003192 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80a6 	beq.w	800330c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c0:	2300      	movs	r3, #0
 80031c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10d      	bne.n	80031ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d0:	4b27      	ldr	r3, [pc, #156]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d4:	4a26      	ldr	r2, [pc, #152]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031da:	6593      	str	r3, [r2, #88]	@ 0x58
 80031dc:	4b24      	ldr	r3, [pc, #144]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e8:	2301      	movs	r3, #1
 80031ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ec:	4b21      	ldr	r3, [pc, #132]	@ (8003274 <HAL_RCC_OscConfig+0x508>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d118      	bne.n	800322a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003274 <HAL_RCC_OscConfig+0x508>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003274 <HAL_RCC_OscConfig+0x508>)
 80031fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003202:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003204:	f7ff f836 	bl	8002274 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320c:	f7ff f832 	bl	8002274 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e17a      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321e:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <HAL_RCC_OscConfig+0x508>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d108      	bne.n	8003244 <HAL_RCC_OscConfig+0x4d8>
 8003232:	4b0f      	ldr	r3, [pc, #60]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003238:	4a0d      	ldr	r2, [pc, #52]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003242:	e029      	b.n	8003298 <HAL_RCC_OscConfig+0x52c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b05      	cmp	r3, #5
 800324a:	d115      	bne.n	8003278 <HAL_RCC_OscConfig+0x50c>
 800324c:	4b08      	ldr	r3, [pc, #32]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003252:	4a07      	ldr	r2, [pc, #28]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800325c:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003262:	4a03      	ldr	r2, [pc, #12]	@ (8003270 <HAL_RCC_OscConfig+0x504>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800326c:	e014      	b.n	8003298 <HAL_RCC_OscConfig+0x52c>
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
 8003274:	40007000 	.word	0x40007000
 8003278:	4b9c      	ldr	r3, [pc, #624]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327e:	4a9b      	ldr	r2, [pc, #620]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003288:	4b98      	ldr	r3, [pc, #608]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328e:	4a97      	ldr	r2, [pc, #604]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 8003290:	f023 0304 	bic.w	r3, r3, #4
 8003294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d016      	beq.n	80032ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fe ffe8 	bl	8002274 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a6:	e00a      	b.n	80032be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a8:	f7fe ffe4 	bl	8002274 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e12a      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032be:	4b8b      	ldr	r3, [pc, #556]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ed      	beq.n	80032a8 <HAL_RCC_OscConfig+0x53c>
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ce:	f7fe ffd1 	bl	8002274 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fe ffcd 	bl	8002274 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e113      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ec:	4b7f      	ldr	r3, [pc, #508]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1ed      	bne.n	80032d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032fa:	7ffb      	ldrb	r3, [r7, #31]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d105      	bne.n	800330c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003300:	4b7a      	ldr	r3, [pc, #488]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003304:	4a79      	ldr	r2, [pc, #484]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 8003306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800330a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80fe 	beq.w	8003512 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331a:	2b02      	cmp	r3, #2
 800331c:	f040 80d0 	bne.w	80034c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003320:	4b72      	ldr	r3, [pc, #456]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f003 0203 	and.w	r2, r3, #3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	429a      	cmp	r2, r3
 8003332:	d130      	bne.n	8003396 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	3b01      	subs	r3, #1
 8003340:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d127      	bne.n	8003396 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003350:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003352:	429a      	cmp	r2, r3
 8003354:	d11f      	bne.n	8003396 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003360:	2a07      	cmp	r2, #7
 8003362:	bf14      	ite	ne
 8003364:	2201      	movne	r2, #1
 8003366:	2200      	moveq	r2, #0
 8003368:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800336a:	4293      	cmp	r3, r2
 800336c:	d113      	bne.n	8003396 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	3b01      	subs	r3, #1
 800337c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d109      	bne.n	8003396 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	3b01      	subs	r3, #1
 8003390:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d06e      	beq.n	8003474 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b0c      	cmp	r3, #12
 800339a:	d069      	beq.n	8003470 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800339c:	4b53      	ldr	r3, [pc, #332]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033a8:	4b50      	ldr	r3, [pc, #320]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0ad      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033b8:	4b4c      	ldr	r3, [pc, #304]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a4b      	ldr	r2, [pc, #300]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 80033be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033c4:	f7fe ff56 	bl	8002274 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe ff52 	bl	8002274 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e09a      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033de:	4b43      	ldr	r3, [pc, #268]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ea:	4b40      	ldr	r3, [pc, #256]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	4b40      	ldr	r3, [pc, #256]	@ (80034f0 <HAL_RCC_OscConfig+0x784>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033fa:	3a01      	subs	r2, #1
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	4311      	orrs	r1, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003404:	0212      	lsls	r2, r2, #8
 8003406:	4311      	orrs	r1, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800340c:	0852      	lsrs	r2, r2, #1
 800340e:	3a01      	subs	r2, #1
 8003410:	0552      	lsls	r2, r2, #21
 8003412:	4311      	orrs	r1, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003418:	0852      	lsrs	r2, r2, #1
 800341a:	3a01      	subs	r2, #1
 800341c:	0652      	lsls	r2, r2, #25
 800341e:	4311      	orrs	r1, r2
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003424:	0912      	lsrs	r2, r2, #4
 8003426:	0452      	lsls	r2, r2, #17
 8003428:	430a      	orrs	r2, r1
 800342a:	4930      	ldr	r1, [pc, #192]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 800342c:	4313      	orrs	r3, r2
 800342e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003430:	4b2e      	ldr	r3, [pc, #184]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a2d      	ldr	r2, [pc, #180]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800343a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800343c:	4b2b      	ldr	r3, [pc, #172]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a2a      	ldr	r2, [pc, #168]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 8003442:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003446:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003448:	f7fe ff14 	bl	8002274 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003450:	f7fe ff10 	bl	8002274 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e058      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003462:	4b22      	ldr	r3, [pc, #136]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800346e:	e050      	b.n	8003512 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e04f      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003474:	4b1d      	ldr	r3, [pc, #116]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d148      	bne.n	8003512 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003480:	4b1a      	ldr	r3, [pc, #104]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a19      	ldr	r2, [pc, #100]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 8003486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800348a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800348c:	4b17      	ldr	r3, [pc, #92]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4a16      	ldr	r2, [pc, #88]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 8003492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003496:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003498:	f7fe feec 	bl	8002274 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fe fee8 	bl	8002274 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e030      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x734>
 80034be:	e028      	b.n	8003512 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b0c      	cmp	r3, #12
 80034c4:	d023      	beq.n	800350e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a08      	ldr	r2, [pc, #32]	@ (80034ec <HAL_RCC_OscConfig+0x780>)
 80034cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d2:	f7fe fecf 	bl	8002274 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d8:	e00c      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034da:	f7fe fecb 	bl	8002274 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d905      	bls.n	80034f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e013      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
 80034ec:	40021000 	.word	0x40021000
 80034f0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f4:	4b09      	ldr	r3, [pc, #36]	@ (800351c <HAL_RCC_OscConfig+0x7b0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ec      	bne.n	80034da <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003500:	4b06      	ldr	r3, [pc, #24]	@ (800351c <HAL_RCC_OscConfig+0x7b0>)
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	4905      	ldr	r1, [pc, #20]	@ (800351c <HAL_RCC_OscConfig+0x7b0>)
 8003506:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <HAL_RCC_OscConfig+0x7b4>)
 8003508:	4013      	ands	r3, r2
 800350a:	60cb      	str	r3, [r1, #12]
 800350c:	e001      	b.n	8003512 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3720      	adds	r7, #32
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000
 8003520:	feeefffc 	.word	0xfeeefffc

08003524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0e7      	b.n	8003708 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003538:	4b75      	ldr	r3, [pc, #468]	@ (8003710 <HAL_RCC_ClockConfig+0x1ec>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d910      	bls.n	8003568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b72      	ldr	r3, [pc, #456]	@ (8003710 <HAL_RCC_ClockConfig+0x1ec>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 0207 	bic.w	r2, r3, #7
 800354e:	4970      	ldr	r1, [pc, #448]	@ (8003710 <HAL_RCC_ClockConfig+0x1ec>)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b6e      	ldr	r3, [pc, #440]	@ (8003710 <HAL_RCC_ClockConfig+0x1ec>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0cf      	b.n	8003708 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	4b66      	ldr	r3, [pc, #408]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003580:	429a      	cmp	r2, r3
 8003582:	d908      	bls.n	8003596 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003584:	4b63      	ldr	r3, [pc, #396]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4960      	ldr	r1, [pc, #384]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d04c      	beq.n	800363c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d121      	bne.n	80035fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0a6      	b.n	8003708 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d107      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c2:	4b54      	ldr	r3, [pc, #336]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d115      	bne.n	80035fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e09a      	b.n	8003708 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035da:	4b4e      	ldr	r3, [pc, #312]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e08e      	b.n	8003708 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e086      	b.n	8003708 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035fa:	4b46      	ldr	r3, [pc, #280]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f023 0203 	bic.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	4943      	ldr	r1, [pc, #268]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 8003608:	4313      	orrs	r3, r2
 800360a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360c:	f7fe fe32 	bl	8002274 <HAL_GetTick>
 8003610:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003612:	e00a      	b.n	800362a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003614:	f7fe fe2e 	bl	8002274 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e06e      	b.n	8003708 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	4b3a      	ldr	r3, [pc, #232]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 020c 	and.w	r2, r3, #12
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	429a      	cmp	r2, r3
 800363a:	d1eb      	bne.n	8003614 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d010      	beq.n	800366a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	4b31      	ldr	r3, [pc, #196]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003654:	429a      	cmp	r2, r3
 8003656:	d208      	bcs.n	800366a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003658:	4b2e      	ldr	r3, [pc, #184]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	492b      	ldr	r1, [pc, #172]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800366a:	4b29      	ldr	r3, [pc, #164]	@ (8003710 <HAL_RCC_ClockConfig+0x1ec>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d210      	bcs.n	800369a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003678:	4b25      	ldr	r3, [pc, #148]	@ (8003710 <HAL_RCC_ClockConfig+0x1ec>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 0207 	bic.w	r2, r3, #7
 8003680:	4923      	ldr	r1, [pc, #140]	@ (8003710 <HAL_RCC_ClockConfig+0x1ec>)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003688:	4b21      	ldr	r3, [pc, #132]	@ (8003710 <HAL_RCC_ClockConfig+0x1ec>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d001      	beq.n	800369a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e036      	b.n	8003708 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	4918      	ldr	r1, [pc, #96]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036c4:	4b13      	ldr	r3, [pc, #76]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4910      	ldr	r1, [pc, #64]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036d8:	f000 f824 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b0d      	ldr	r3, [pc, #52]	@ (8003714 <HAL_RCC_ClockConfig+0x1f0>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	091b      	lsrs	r3, r3, #4
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	490b      	ldr	r1, [pc, #44]	@ (8003718 <HAL_RCC_ClockConfig+0x1f4>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	fa22 f303 	lsr.w	r3, r2, r3
 80036f4:	4a09      	ldr	r2, [pc, #36]	@ (800371c <HAL_RCC_ClockConfig+0x1f8>)
 80036f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036f8:	4b09      	ldr	r3, [pc, #36]	@ (8003720 <HAL_RCC_ClockConfig+0x1fc>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fe fd69 	bl	80021d4 <HAL_InitTick>
 8003702:	4603      	mov	r3, r0
 8003704:	72fb      	strb	r3, [r7, #11]

  return status;
 8003706:	7afb      	ldrb	r3, [r7, #11]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40022000 	.word	0x40022000
 8003714:	40021000 	.word	0x40021000
 8003718:	0800a5fc 	.word	0x0800a5fc
 800371c:	20000008 	.word	0x20000008
 8003720:	2000000c 	.word	0x2000000c

08003724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	@ 0x24
 8003728:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003732:	4b3e      	ldr	r3, [pc, #248]	@ (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800373c:	4b3b      	ldr	r3, [pc, #236]	@ (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x34>
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d121      	bne.n	8003796 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d11e      	bne.n	8003796 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003758:	4b34      	ldr	r3, [pc, #208]	@ (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d107      	bne.n	8003774 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003764:	4b31      	ldr	r3, [pc, #196]	@ (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e005      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003774:	4b2d      	ldr	r3, [pc, #180]	@ (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003780:	4a2b      	ldr	r2, [pc, #172]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003788:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003794:	e00a      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b04      	cmp	r3, #4
 800379a:	d102      	bne.n	80037a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800379c:	4b25      	ldr	r3, [pc, #148]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x110>)
 800379e:	61bb      	str	r3, [r7, #24]
 80037a0:	e004      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037a8:	4b23      	ldr	r3, [pc, #140]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x114>)
 80037aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	d134      	bne.n	800381c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037b2:	4b1e      	ldr	r3, [pc, #120]	@ (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d003      	beq.n	80037ca <HAL_RCC_GetSysClockFreq+0xa6>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d003      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0xac>
 80037c8:	e005      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x110>)
 80037cc:	617b      	str	r3, [r7, #20]
      break;
 80037ce:	e005      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037d0:	4b19      	ldr	r3, [pc, #100]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x114>)
 80037d2:	617b      	str	r3, [r7, #20]
      break;
 80037d4:	e002      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	617b      	str	r3, [r7, #20]
      break;
 80037da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037dc:	4b13      	ldr	r3, [pc, #76]	@ (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	3301      	adds	r3, #1
 80037e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037ea:	4b10      	ldr	r3, [pc, #64]	@ (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	fb03 f202 	mul.w	r2, r3, r2
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003802:	4b0a      	ldr	r3, [pc, #40]	@ (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	0e5b      	lsrs	r3, r3, #25
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	3301      	adds	r3, #1
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	fbb2 f3f3 	udiv	r3, r2, r3
 800381a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800381c:	69bb      	ldr	r3, [r7, #24]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3724      	adds	r7, #36	@ 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	0800a614 	.word	0x0800a614
 8003834:	00f42400 	.word	0x00f42400
 8003838:	007a1200 	.word	0x007a1200

0800383c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003840:	4b03      	ldr	r3, [pc, #12]	@ (8003850 <HAL_RCC_GetHCLKFreq+0x14>)
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000008 	.word	0x20000008

08003854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003858:	f7ff fff0 	bl	800383c <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4904      	ldr	r1, [pc, #16]	@ (800387c <HAL_RCC_GetPCLK1Freq+0x28>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	0800a60c 	.word	0x0800a60c

08003880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003884:	f7ff ffda 	bl	800383c <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0adb      	lsrs	r3, r3, #11
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4904      	ldr	r1, [pc, #16]	@ (80038a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000
 80038a8:	0800a60c 	.word	0x0800a60c

080038ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038c4:	f7ff f9ee 	bl	8002ca4 <HAL_PWREx_GetVoltageRange>
 80038c8:	6178      	str	r0, [r7, #20]
 80038ca:	e014      	b.n	80038f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038cc:	4b25      	ldr	r3, [pc, #148]	@ (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d0:	4a24      	ldr	r2, [pc, #144]	@ (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d8:	4b22      	ldr	r3, [pc, #136]	@ (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038e4:	f7ff f9de 	bl	8002ca4 <HAL_PWREx_GetVoltageRange>
 80038e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038fc:	d10b      	bne.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b80      	cmp	r3, #128	@ 0x80
 8003902:	d919      	bls.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2ba0      	cmp	r3, #160	@ 0xa0
 8003908:	d902      	bls.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800390a:	2302      	movs	r3, #2
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	e013      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003910:	2301      	movs	r3, #1
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	e010      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b80      	cmp	r3, #128	@ 0x80
 800391a:	d902      	bls.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800391c:	2303      	movs	r3, #3
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	e00a      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b80      	cmp	r3, #128	@ 0x80
 8003926:	d102      	bne.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003928:	2302      	movs	r3, #2
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	e004      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b70      	cmp	r3, #112	@ 0x70
 8003932:	d101      	bne.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003934:	2301      	movs	r3, #1
 8003936:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003938:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 0207 	bic.w	r2, r3, #7
 8003940:	4909      	ldr	r1, [pc, #36]	@ (8003968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003948:	4b07      	ldr	r3, [pc, #28]	@ (8003968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	40022000 	.word	0x40022000

0800396c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003974:	2300      	movs	r3, #0
 8003976:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003978:	2300      	movs	r3, #0
 800397a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003984:	2b00      	cmp	r3, #0
 8003986:	d041      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800398c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003990:	d02a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003992:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003996:	d824      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003998:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800399c:	d008      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800399e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039a2:	d81e      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039ac:	d010      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039ae:	e018      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039b0:	4b86      	ldr	r3, [pc, #536]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a85      	ldr	r2, [pc, #532]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039bc:	e015      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fabb 	bl	8003f40 <RCCEx_PLLSAI1_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ce:	e00c      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3320      	adds	r3, #32
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fba6 	bl	8004128 <RCCEx_PLLSAI2_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039e0:	e003      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	74fb      	strb	r3, [r7, #19]
      break;
 80039e6:	e000      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ea:	7cfb      	ldrb	r3, [r7, #19]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039f0:	4b76      	ldr	r3, [pc, #472]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039fe:	4973      	ldr	r1, [pc, #460]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a06:	e001      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d041      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a20:	d02a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a26:	d824      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a32:	d81e      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a3c:	d010      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a3e:	e018      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a40:	4b62      	ldr	r3, [pc, #392]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a61      	ldr	r2, [pc, #388]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a4c:	e015      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fa73 	bl	8003f40 <RCCEx_PLLSAI1_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a5e:	e00c      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3320      	adds	r3, #32
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fb5e 	bl	8004128 <RCCEx_PLLSAI2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a70:	e003      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	74fb      	strb	r3, [r7, #19]
      break;
 8003a76:	e000      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a80:	4b52      	ldr	r3, [pc, #328]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a8e:	494f      	ldr	r1, [pc, #316]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a96:	e001      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80a0 	beq.w	8003bea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aae:	4b47      	ldr	r3, [pc, #284]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac4:	4b41      	ldr	r3, [pc, #260]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac8:	4a40      	ldr	r2, [pc, #256]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad0:	4b3e      	ldr	r3, [pc, #248]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003adc:	2301      	movs	r3, #1
 8003ade:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a3a      	ldr	r2, [pc, #232]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aec:	f7fe fbc2 	bl	8002274 <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003af2:	e009      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af4:	f7fe fbbe 	bl	8002274 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d902      	bls.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	74fb      	strb	r3, [r7, #19]
        break;
 8003b06:	e005      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b08:	4b31      	ldr	r3, [pc, #196]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ef      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d15c      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01f      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d019      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b38:	4b24      	ldr	r3, [pc, #144]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b44:	4b21      	ldr	r3, [pc, #132]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4a:	4a20      	ldr	r2, [pc, #128]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b54:	4b1d      	ldr	r3, [pc, #116]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b64:	4a19      	ldr	r2, [pc, #100]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d016      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fe fb7d 	bl	8002274 <HAL_GetTick>
 8003b7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b7c:	e00b      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fe fb79 	bl	8002274 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d902      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	74fb      	strb	r3, [r7, #19]
            break;
 8003b94:	e006      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b96:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ec      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ba4:	7cfb      	ldrb	r3, [r7, #19]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003baa:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bba:	4904      	ldr	r1, [pc, #16]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003bc2:	e009      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bd8:	7c7b      	ldrb	r3, [r7, #17]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d105      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bde:	4b9e      	ldr	r3, [pc, #632]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be2:	4a9d      	ldr	r2, [pc, #628]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bf6:	4b98      	ldr	r3, [pc, #608]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfc:	f023 0203 	bic.w	r2, r3, #3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	4994      	ldr	r1, [pc, #592]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c18:	4b8f      	ldr	r3, [pc, #572]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1e:	f023 020c 	bic.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c26:	498c      	ldr	r1, [pc, #560]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c3a:	4b87      	ldr	r3, [pc, #540]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	4983      	ldr	r1, [pc, #524]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c5c:	4b7e      	ldr	r3, [pc, #504]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	497b      	ldr	r1, [pc, #492]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c7e:	4b76      	ldr	r3, [pc, #472]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c8c:	4972      	ldr	r1, [pc, #456]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ca0:	4b6d      	ldr	r3, [pc, #436]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cae:	496a      	ldr	r1, [pc, #424]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc2:	4b65      	ldr	r3, [pc, #404]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd0:	4961      	ldr	r1, [pc, #388]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce4:	4b5c      	ldr	r3, [pc, #368]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf2:	4959      	ldr	r1, [pc, #356]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d06:	4b54      	ldr	r3, [pc, #336]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d14:	4950      	ldr	r1, [pc, #320]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d28:	4b4b      	ldr	r3, [pc, #300]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d36:	4948      	ldr	r1, [pc, #288]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d4a:	4b43      	ldr	r3, [pc, #268]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d58:	493f      	ldr	r1, [pc, #252]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d028      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d6c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d7a:	4937      	ldr	r1, [pc, #220]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d8a:	d106      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d8c:	4b32      	ldr	r3, [pc, #200]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4a31      	ldr	r2, [pc, #196]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d96:	60d3      	str	r3, [r2, #12]
 8003d98:	e011      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003da2:	d10c      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f8c8 	bl	8003f40 <RCCEx_PLLSAI1_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dba:	7cfb      	ldrb	r3, [r7, #19]
 8003dbc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d028      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dca:	4b23      	ldr	r3, [pc, #140]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd8:	491f      	ldr	r1, [pc, #124]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003de8:	d106      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dea:	4b1b      	ldr	r3, [pc, #108]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4a1a      	ldr	r2, [pc, #104]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003df4:	60d3      	str	r3, [r2, #12]
 8003df6:	e011      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3304      	adds	r3, #4
 8003e06:	2101      	movs	r1, #1
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 f899 	bl	8003f40 <RCCEx_PLLSAI1_Config>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d02b      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e28:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e36:	4908      	ldr	r1, [pc, #32]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e46:	d109      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e48:	4b03      	ldr	r3, [pc, #12]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a02      	ldr	r2, [pc, #8]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]
 8003e54:	e014      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f867 	bl	8003f40 <RCCEx_PLLSAI1_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d02f      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e9a:	4928      	ldr	r1, [pc, #160]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eaa:	d10d      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f844 	bl	8003f40 <RCCEx_PLLSAI1_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d014      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ec2:	7cfb      	ldrb	r3, [r7, #19]
 8003ec4:	74bb      	strb	r3, [r7, #18]
 8003ec6:	e011      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ecc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3320      	adds	r3, #32
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 f925 	bl	8004128 <RCCEx_PLLSAI2_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ee2:	7cfb      	ldrb	r3, [r7, #19]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ee8:	7cfb      	ldrb	r3, [r7, #19]
 8003eea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ef8:	4b10      	ldr	r3, [pc, #64]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f06:	490d      	ldr	r1, [pc, #52]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f1a:	4b08      	ldr	r3, [pc, #32]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f2a:	4904      	ldr	r1, [pc, #16]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f32:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000

08003f40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f4e:	4b75      	ldr	r3, [pc, #468]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d018      	beq.n	8003f8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f5a:	4b72      	ldr	r3, [pc, #456]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0203 	and.w	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d10d      	bne.n	8003f86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f72:	4b6c      	ldr	r3, [pc, #432]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
       ||
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d047      	beq.n	8004016 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
 8003f8a:	e044      	b.n	8004016 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d018      	beq.n	8003fc6 <RCCEx_PLLSAI1_Config+0x86>
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d825      	bhi.n	8003fe4 <RCCEx_PLLSAI1_Config+0xa4>
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d002      	beq.n	8003fa2 <RCCEx_PLLSAI1_Config+0x62>
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d009      	beq.n	8003fb4 <RCCEx_PLLSAI1_Config+0x74>
 8003fa0:	e020      	b.n	8003fe4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fa2:	4b60      	ldr	r3, [pc, #384]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d11d      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb2:	e01a      	b.n	8003fea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fb4:	4b5b      	ldr	r3, [pc, #364]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d116      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc4:	e013      	b.n	8003fee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fc6:	4b57      	ldr	r3, [pc, #348]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10f      	bne.n	8003ff2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fd2:	4b54      	ldr	r3, [pc, #336]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fe2:	e006      	b.n	8003ff2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe8:	e004      	b.n	8003ff4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fea:	bf00      	nop
 8003fec:	e002      	b.n	8003ff4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e000      	b.n	8003ff4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ff2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10d      	bne.n	8004016 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6819      	ldr	r1, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	3b01      	subs	r3, #1
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	430b      	orrs	r3, r1
 8004010:	4944      	ldr	r1, [pc, #272]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d17d      	bne.n	8004118 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800401c:	4b41      	ldr	r3, [pc, #260]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a40      	ldr	r2, [pc, #256]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004022:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004028:	f7fe f924 	bl	8002274 <HAL_GetTick>
 800402c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800402e:	e009      	b.n	8004044 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004030:	f7fe f920 	bl	8002274 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d902      	bls.n	8004044 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	73fb      	strb	r3, [r7, #15]
        break;
 8004042:	e005      	b.n	8004050 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004044:	4b37      	ldr	r3, [pc, #220]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1ef      	bne.n	8004030 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d160      	bne.n	8004118 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d111      	bne.n	8004080 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800405c:	4b31      	ldr	r3, [pc, #196]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6892      	ldr	r2, [r2, #8]
 800406c:	0211      	lsls	r1, r2, #8
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	68d2      	ldr	r2, [r2, #12]
 8004072:	0912      	lsrs	r2, r2, #4
 8004074:	0452      	lsls	r2, r2, #17
 8004076:	430a      	orrs	r2, r1
 8004078:	492a      	ldr	r1, [pc, #168]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407a:	4313      	orrs	r3, r2
 800407c:	610b      	str	r3, [r1, #16]
 800407e:	e027      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d112      	bne.n	80040ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004086:	4b27      	ldr	r3, [pc, #156]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800408e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6892      	ldr	r2, [r2, #8]
 8004096:	0211      	lsls	r1, r2, #8
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6912      	ldr	r2, [r2, #16]
 800409c:	0852      	lsrs	r2, r2, #1
 800409e:	3a01      	subs	r2, #1
 80040a0:	0552      	lsls	r2, r2, #21
 80040a2:	430a      	orrs	r2, r1
 80040a4:	491f      	ldr	r1, [pc, #124]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	610b      	str	r3, [r1, #16]
 80040aa:	e011      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80040b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6892      	ldr	r2, [r2, #8]
 80040bc:	0211      	lsls	r1, r2, #8
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6952      	ldr	r2, [r2, #20]
 80040c2:	0852      	lsrs	r2, r2, #1
 80040c4:	3a01      	subs	r2, #1
 80040c6:	0652      	lsls	r2, r2, #25
 80040c8:	430a      	orrs	r2, r1
 80040ca:	4916      	ldr	r1, [pc, #88]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040d0:	4b14      	ldr	r3, [pc, #80]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a13      	ldr	r2, [pc, #76]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fe f8ca 	bl	8002274 <HAL_GetTick>
 80040e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040e2:	e009      	b.n	80040f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e4:	f7fe f8c6 	bl	8002274 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d902      	bls.n	80040f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	73fb      	strb	r3, [r7, #15]
          break;
 80040f6:	e005      	b.n	8004104 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ef      	beq.n	80040e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800410a:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	4904      	ldr	r1, [pc, #16]	@ (8004124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004114:	4313      	orrs	r3, r2
 8004116:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004118:	7bfb      	ldrb	r3, [r7, #15]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000

08004128 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004136:	4b6a      	ldr	r3, [pc, #424]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d018      	beq.n	8004174 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004142:	4b67      	ldr	r3, [pc, #412]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0203 	and.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d10d      	bne.n	800416e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
       ||
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800415a:	4b61      	ldr	r3, [pc, #388]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
       ||
 800416a:	429a      	cmp	r2, r3
 800416c:	d047      	beq.n	80041fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
 8004172:	e044      	b.n	80041fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d018      	beq.n	80041ae <RCCEx_PLLSAI2_Config+0x86>
 800417c:	2b03      	cmp	r3, #3
 800417e:	d825      	bhi.n	80041cc <RCCEx_PLLSAI2_Config+0xa4>
 8004180:	2b01      	cmp	r3, #1
 8004182:	d002      	beq.n	800418a <RCCEx_PLLSAI2_Config+0x62>
 8004184:	2b02      	cmp	r3, #2
 8004186:	d009      	beq.n	800419c <RCCEx_PLLSAI2_Config+0x74>
 8004188:	e020      	b.n	80041cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800418a:	4b55      	ldr	r3, [pc, #340]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d11d      	bne.n	80041d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800419a:	e01a      	b.n	80041d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800419c:	4b50      	ldr	r3, [pc, #320]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d116      	bne.n	80041d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ac:	e013      	b.n	80041d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041ae:	4b4c      	ldr	r3, [pc, #304]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10f      	bne.n	80041da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ba:	4b49      	ldr	r3, [pc, #292]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ca:	e006      	b.n	80041da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
      break;
 80041d0:	e004      	b.n	80041dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041d2:	bf00      	nop
 80041d4:	e002      	b.n	80041dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041da:	bf00      	nop
    }

    if(status == HAL_OK)
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10d      	bne.n	80041fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041e2:	4b3f      	ldr	r3, [pc, #252]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6819      	ldr	r1, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	430b      	orrs	r3, r1
 80041f8:	4939      	ldr	r1, [pc, #228]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d167      	bne.n	80042d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004204:	4b36      	ldr	r3, [pc, #216]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a35      	ldr	r2, [pc, #212]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800420a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004210:	f7fe f830 	bl	8002274 <HAL_GetTick>
 8004214:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004216:	e009      	b.n	800422c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004218:	f7fe f82c 	bl	8002274 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d902      	bls.n	800422c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	73fb      	strb	r3, [r7, #15]
        break;
 800422a:	e005      	b.n	8004238 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800422c:	4b2c      	ldr	r3, [pc, #176]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1ef      	bne.n	8004218 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d14a      	bne.n	80042d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d111      	bne.n	8004268 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004244:	4b26      	ldr	r3, [pc, #152]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800424c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6892      	ldr	r2, [r2, #8]
 8004254:	0211      	lsls	r1, r2, #8
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68d2      	ldr	r2, [r2, #12]
 800425a:	0912      	lsrs	r2, r2, #4
 800425c:	0452      	lsls	r2, r2, #17
 800425e:	430a      	orrs	r2, r1
 8004260:	491f      	ldr	r1, [pc, #124]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004262:	4313      	orrs	r3, r2
 8004264:	614b      	str	r3, [r1, #20]
 8004266:	e011      	b.n	800428c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004268:	4b1d      	ldr	r3, [pc, #116]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004270:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6892      	ldr	r2, [r2, #8]
 8004278:	0211      	lsls	r1, r2, #8
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6912      	ldr	r2, [r2, #16]
 800427e:	0852      	lsrs	r2, r2, #1
 8004280:	3a01      	subs	r2, #1
 8004282:	0652      	lsls	r2, r2, #25
 8004284:	430a      	orrs	r2, r1
 8004286:	4916      	ldr	r1, [pc, #88]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004288:	4313      	orrs	r3, r2
 800428a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800428c:	4b14      	ldr	r3, [pc, #80]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a13      	ldr	r2, [pc, #76]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004296:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fd ffec 	bl	8002274 <HAL_GetTick>
 800429c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800429e:	e009      	b.n	80042b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042a0:	f7fd ffe8 	bl	8002274 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d902      	bls.n	80042b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	73fb      	strb	r3, [r7, #15]
          break;
 80042b2:	e005      	b.n	80042c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042b4:	4b0a      	ldr	r3, [pc, #40]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ef      	beq.n	80042a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042c6:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	4904      	ldr	r1, [pc, #16]	@ (80042e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000

080042e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e049      	b.n	800438a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fd fd06 	bl	8001d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f000 ff5c 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6a1a      	ldr	r2, [r3, #32]
 80043a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10f      	bne.n	80043ca <HAL_TIM_Base_Stop+0x38>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d107      	bne.n	80043ca <HAL_TIM_Base_Stop+0x38>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d001      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e04f      	b.n	8004498 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a23      	ldr	r2, [pc, #140]	@ (80044a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01d      	beq.n	8004456 <HAL_TIM_Base_Start_IT+0x76>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004422:	d018      	beq.n	8004456 <HAL_TIM_Base_Start_IT+0x76>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1f      	ldr	r2, [pc, #124]	@ (80044a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <HAL_TIM_Base_Start_IT+0x76>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1e      	ldr	r2, [pc, #120]	@ (80044ac <HAL_TIM_Base_Start_IT+0xcc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00e      	beq.n	8004456 <HAL_TIM_Base_Start_IT+0x76>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1c      	ldr	r2, [pc, #112]	@ (80044b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d009      	beq.n	8004456 <HAL_TIM_Base_Start_IT+0x76>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1b      	ldr	r2, [pc, #108]	@ (80044b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d004      	beq.n	8004456 <HAL_TIM_Base_Start_IT+0x76>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a19      	ldr	r2, [pc, #100]	@ (80044b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d115      	bne.n	8004482 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	4b17      	ldr	r3, [pc, #92]	@ (80044bc <HAL_TIM_Base_Start_IT+0xdc>)
 800445e:	4013      	ands	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b06      	cmp	r3, #6
 8004466:	d015      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0xb4>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800446e:	d011      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004480:	e008      	b.n	8004494 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0201 	orr.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e000      	b.n	8004496 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004494:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40000800 	.word	0x40000800
 80044b0:	40000c00 	.word	0x40000c00
 80044b4:	40013400 	.word	0x40013400
 80044b8:	40014000 	.word	0x40014000
 80044bc:	00010007 	.word	0x00010007

080044c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e049      	b.n	8004566 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fd fbcc 	bl	8001c84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4619      	mov	r1, r3
 80044fe:	4610      	mov	r0, r2
 8004500:	f000 fe6e 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	e03c      	b.n	8004616 <HAL_TIM_PWM_Start_DMA+0xa6>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d109      	bne.n	80045b6 <HAL_TIM_PWM_Start_DMA+0x46>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	bf0c      	ite	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	2300      	movne	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	e02f      	b.n	8004616 <HAL_TIM_PWM_Start_DMA+0xa6>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d109      	bne.n	80045d0 <HAL_TIM_PWM_Start_DMA+0x60>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	bf0c      	ite	eq
 80045c8:	2301      	moveq	r3, #1
 80045ca:	2300      	movne	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	e022      	b.n	8004616 <HAL_TIM_PWM_Start_DMA+0xa6>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d109      	bne.n	80045ea <HAL_TIM_PWM_Start_DMA+0x7a>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	bf0c      	ite	eq
 80045e2:	2301      	moveq	r3, #1
 80045e4:	2300      	movne	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	e015      	b.n	8004616 <HAL_TIM_PWM_Start_DMA+0xa6>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d109      	bne.n	8004604 <HAL_TIM_PWM_Start_DMA+0x94>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	bf0c      	ite	eq
 80045fc:	2301      	moveq	r3, #1
 80045fe:	2300      	movne	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	e008      	b.n	8004616 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800461a:	2302      	movs	r3, #2
 800461c:	e1ab      	b.n	8004976 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e03c      	b.n	80046b2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b04      	cmp	r3, #4
 800463c:	d109      	bne.n	8004652 <HAL_TIM_PWM_Start_DMA+0xe2>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b01      	cmp	r3, #1
 8004648:	bf0c      	ite	eq
 800464a:	2301      	moveq	r3, #1
 800464c:	2300      	movne	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	e02f      	b.n	80046b2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b08      	cmp	r3, #8
 8004656:	d109      	bne.n	800466c <HAL_TIM_PWM_Start_DMA+0xfc>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e022      	b.n	80046b2 <HAL_TIM_PWM_Start_DMA+0x142>
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d109      	bne.n	8004686 <HAL_TIM_PWM_Start_DMA+0x116>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	e015      	b.n	80046b2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b10      	cmp	r3, #16
 800468a:	d109      	bne.n	80046a0 <HAL_TIM_PWM_Start_DMA+0x130>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	e008      	b.n	80046b2 <HAL_TIM_PWM_Start_DMA+0x142>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d034      	beq.n	8004720 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_TIM_PWM_Start_DMA+0x152>
 80046bc:	887b      	ldrh	r3, [r7, #2]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e157      	b.n	8004976 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_PWM_Start_DMA+0x166>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d4:	e026      	b.n	8004724 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d104      	bne.n	80046e6 <HAL_TIM_PWM_Start_DMA+0x176>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e4:	e01e      	b.n	8004724 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d104      	bne.n	80046f6 <HAL_TIM_PWM_Start_DMA+0x186>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f4:	e016      	b.n	8004724 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b0c      	cmp	r3, #12
 80046fa:	d104      	bne.n	8004706 <HAL_TIM_PWM_Start_DMA+0x196>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004704:	e00e      	b.n	8004724 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b10      	cmp	r3, #16
 800470a:	d104      	bne.n	8004716 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004714:	e006      	b.n	8004724 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800471e:	e001      	b.n	8004724 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e128      	b.n	8004976 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b0c      	cmp	r3, #12
 8004728:	f200 80ae 	bhi.w	8004888 <HAL_TIM_PWM_Start_DMA+0x318>
 800472c:	a201      	add	r2, pc, #4	@ (adr r2, 8004734 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004769 	.word	0x08004769
 8004738:	08004889 	.word	0x08004889
 800473c:	08004889 	.word	0x08004889
 8004740:	08004889 	.word	0x08004889
 8004744:	080047b1 	.word	0x080047b1
 8004748:	08004889 	.word	0x08004889
 800474c:	08004889 	.word	0x08004889
 8004750:	08004889 	.word	0x08004889
 8004754:	080047f9 	.word	0x080047f9
 8004758:	08004889 	.word	0x08004889
 800475c:	08004889 	.word	0x08004889
 8004760:	08004889 	.word	0x08004889
 8004764:	08004841 	.word	0x08004841
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	4a84      	ldr	r2, [pc, #528]	@ (8004980 <HAL_TIM_PWM_Start_DMA+0x410>)
 800476e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004774:	4a83      	ldr	r2, [pc, #524]	@ (8004984 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	4a82      	ldr	r2, [pc, #520]	@ (8004988 <HAL_TIM_PWM_Start_DMA+0x418>)
 800477e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3334      	adds	r3, #52	@ 0x34
 800478c:	461a      	mov	r2, r3
 800478e:	887b      	ldrh	r3, [r7, #2]
 8004790:	f7fd ff46 	bl	8002620 <HAL_DMA_Start_IT>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e0eb      	b.n	8004976 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ac:	60da      	str	r2, [r3, #12]
      break;
 80047ae:	e06e      	b.n	800488e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	4a72      	ldr	r2, [pc, #456]	@ (8004980 <HAL_TIM_PWM_Start_DMA+0x410>)
 80047b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047bc:	4a71      	ldr	r2, [pc, #452]	@ (8004984 <HAL_TIM_PWM_Start_DMA+0x414>)
 80047be:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c4:	4a70      	ldr	r2, [pc, #448]	@ (8004988 <HAL_TIM_PWM_Start_DMA+0x418>)
 80047c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3338      	adds	r3, #56	@ 0x38
 80047d4:	461a      	mov	r2, r3
 80047d6:	887b      	ldrh	r3, [r7, #2]
 80047d8:	f7fd ff22 	bl	8002620 <HAL_DMA_Start_IT>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e0c7      	b.n	8004976 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047f4:	60da      	str	r2, [r3, #12]
      break;
 80047f6:	e04a      	b.n	800488e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	4a60      	ldr	r2, [pc, #384]	@ (8004980 <HAL_TIM_PWM_Start_DMA+0x410>)
 80047fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004804:	4a5f      	ldr	r2, [pc, #380]	@ (8004984 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004806:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480c:	4a5e      	ldr	r2, [pc, #376]	@ (8004988 <HAL_TIM_PWM_Start_DMA+0x418>)
 800480e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	333c      	adds	r3, #60	@ 0x3c
 800481c:	461a      	mov	r2, r3
 800481e:	887b      	ldrh	r3, [r7, #2]
 8004820:	f7fd fefe 	bl	8002620 <HAL_DMA_Start_IT>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e0a3      	b.n	8004976 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800483c:	60da      	str	r2, [r3, #12]
      break;
 800483e:	e026      	b.n	800488e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004844:	4a4e      	ldr	r2, [pc, #312]	@ (8004980 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004846:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484c:	4a4d      	ldr	r2, [pc, #308]	@ (8004984 <HAL_TIM_PWM_Start_DMA+0x414>)
 800484e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004854:	4a4c      	ldr	r2, [pc, #304]	@ (8004988 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004856:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3340      	adds	r3, #64	@ 0x40
 8004864:	461a      	mov	r2, r3
 8004866:	887b      	ldrh	r3, [r7, #2]
 8004868:	f7fd feda 	bl	8002620 <HAL_DMA_Start_IT>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e07f      	b.n	8004976 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004884:	60da      	str	r2, [r3, #12]
      break;
 8004886:	e002      	b.n	800488e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	75fb      	strb	r3, [r7, #23]
      break;
 800488c:	bf00      	nop
  }

  if (status == HAL_OK)
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d16f      	bne.n	8004974 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2201      	movs	r2, #1
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f001 f81b 	bl	80058d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a39      	ldr	r2, [pc, #228]	@ (800498c <HAL_TIM_PWM_Start_DMA+0x41c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <HAL_TIM_PWM_Start_DMA+0x364>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a37      	ldr	r2, [pc, #220]	@ (8004990 <HAL_TIM_PWM_Start_DMA+0x420>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00e      	beq.n	80048d4 <HAL_TIM_PWM_Start_DMA+0x364>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a36      	ldr	r2, [pc, #216]	@ (8004994 <HAL_TIM_PWM_Start_DMA+0x424>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d009      	beq.n	80048d4 <HAL_TIM_PWM_Start_DMA+0x364>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a34      	ldr	r2, [pc, #208]	@ (8004998 <HAL_TIM_PWM_Start_DMA+0x428>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_TIM_PWM_Start_DMA+0x364>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a33      	ldr	r2, [pc, #204]	@ (800499c <HAL_TIM_PWM_Start_DMA+0x42c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d101      	bne.n	80048d8 <HAL_TIM_PWM_Start_DMA+0x368>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <HAL_TIM_PWM_Start_DMA+0x36a>
 80048d8:	2300      	movs	r3, #0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d007      	beq.n	80048ee <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a26      	ldr	r2, [pc, #152]	@ (800498c <HAL_TIM_PWM_Start_DMA+0x41c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d01d      	beq.n	8004934 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004900:	d018      	beq.n	8004934 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a26      	ldr	r2, [pc, #152]	@ (80049a0 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a24      	ldr	r2, [pc, #144]	@ (80049a4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a23      	ldr	r2, [pc, #140]	@ (80049a8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1a      	ldr	r2, [pc, #104]	@ (8004990 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a19      	ldr	r2, [pc, #100]	@ (8004994 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d115      	bne.n	8004960 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	4b1c      	ldr	r3, [pc, #112]	@ (80049ac <HAL_TIM_PWM_Start_DMA+0x43c>)
 800493c:	4013      	ands	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b06      	cmp	r3, #6
 8004944:	d015      	beq.n	8004972 <HAL_TIM_PWM_Start_DMA+0x402>
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800494c:	d011      	beq.n	8004972 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0201 	orr.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495e:	e008      	b.n	8004972 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e000      	b.n	8004974 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004972:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004974:	7dfb      	ldrb	r3, [r7, #23]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	080050cf 	.word	0x080050cf
 8004984:	08005177 	.word	0x08005177
 8004988:	0800503d 	.word	0x0800503d
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40013400 	.word	0x40013400
 8004994:	40014000 	.word	0x40014000
 8004998:	40014400 	.word	0x40014400
 800499c:	40014800 	.word	0x40014800
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800
 80049a8:	40000c00 	.word	0x40000c00
 80049ac:	00010007 	.word	0x00010007

080049b0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	d855      	bhi.n	8004a70 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80049c4:	a201      	add	r2, pc, #4	@ (adr r2, 80049cc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	08004a01 	.word	0x08004a01
 80049d0:	08004a71 	.word	0x08004a71
 80049d4:	08004a71 	.word	0x08004a71
 80049d8:	08004a71 	.word	0x08004a71
 80049dc:	08004a1d 	.word	0x08004a1d
 80049e0:	08004a71 	.word	0x08004a71
 80049e4:	08004a71 	.word	0x08004a71
 80049e8:	08004a71 	.word	0x08004a71
 80049ec:	08004a39 	.word	0x08004a39
 80049f0:	08004a71 	.word	0x08004a71
 80049f4:	08004a71 	.word	0x08004a71
 80049f8:	08004a71 	.word	0x08004a71
 80049fc:	08004a55 	.word	0x08004a55
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fd fe63 	bl	80026e0 <HAL_DMA_Abort_IT>
      break;
 8004a1a:	e02c      	b.n	8004a76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fd fe55 	bl	80026e0 <HAL_DMA_Abort_IT>
      break;
 8004a36:	e01e      	b.n	8004a76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fd fe47 	bl	80026e0 <HAL_DMA_Abort_IT>
      break;
 8004a52:	e010      	b.n	8004a76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fd fe39 	bl	80026e0 <HAL_DMA_Abort_IT>
      break;
 8004a6e:	e002      	b.n	8004a76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
      break;
 8004a74:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f040 8081 	bne.w	8004b80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2200      	movs	r2, #0
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 ff26 	bl	80058d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a3e      	ldr	r2, [pc, #248]	@ (8004b8c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8004b90 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a3b      	ldr	r2, [pc, #236]	@ (8004b94 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a3a      	ldr	r2, [pc, #232]	@ (8004b98 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a38      	ldr	r2, [pc, #224]	@ (8004b9c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d101      	bne.n	8004ac2 <HAL_TIM_PWM_Stop_DMA+0x112>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d017      	beq.n	8004af8 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6a1a      	ldr	r2, [r3, #32]
 8004ace:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10f      	bne.n	8004af8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6a1a      	ldr	r2, [r3, #32]
 8004ade:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d107      	bne.n	8004af8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004af6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6a1a      	ldr	r2, [r3, #32]
 8004afe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10f      	bne.n	8004b28 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6a1a      	ldr	r2, [r3, #32]
 8004b0e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d107      	bne.n	8004b28 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0201 	bic.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d104      	bne.n	8004b38 <HAL_TIM_PWM_Stop_DMA+0x188>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b36:	e023      	b.n	8004b80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d104      	bne.n	8004b48 <HAL_TIM_PWM_Stop_DMA+0x198>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b46:	e01b      	b.n	8004b80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d104      	bne.n	8004b58 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b56:	e013      	b.n	8004b80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b0c      	cmp	r3, #12
 8004b5c:	d104      	bne.n	8004b68 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b66:	e00b      	b.n	8004b80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b10      	cmp	r3, #16
 8004b6c:	d104      	bne.n	8004b78 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b76:	e003      	b.n	8004b80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	40013400 	.word	0x40013400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d020      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01b      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0202 	mvn.w	r2, #2
 8004bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f9fe 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f9f0 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7fc fadb 	bl	80011b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d020      	beq.n	8004c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0204 	mvn.w	r2, #4
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2202      	movs	r2, #2
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f9d8 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f9ca 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7fc fab5 	bl	80011b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d020      	beq.n	8004c9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01b      	beq.n	8004c9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0208 	mvn.w	r2, #8
 8004c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2204      	movs	r2, #4
 8004c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f9b2 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004c88:	e005      	b.n	8004c96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f9a4 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fc fa8f 	bl	80011b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d020      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01b      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0210 	mvn.w	r2, #16
 8004cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f98c 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f97e 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7fc fa69 	bl	80011b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0201 	mvn.w	r2, #1
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc ff5a 	bl	8001bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d104      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00c      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fe87 	bl	8005a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00c      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fe7f 	bl	8005a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00c      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f949 	bl	8005014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00c      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f06f 0220 	mvn.w	r2, #32
 8004d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fe47 	bl	8005a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e0ff      	b.n	8004fce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b14      	cmp	r3, #20
 8004dda:	f200 80f0 	bhi.w	8004fbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dde:	a201      	add	r2, pc, #4	@ (adr r2, 8004de4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e39 	.word	0x08004e39
 8004de8:	08004fbf 	.word	0x08004fbf
 8004dec:	08004fbf 	.word	0x08004fbf
 8004df0:	08004fbf 	.word	0x08004fbf
 8004df4:	08004e79 	.word	0x08004e79
 8004df8:	08004fbf 	.word	0x08004fbf
 8004dfc:	08004fbf 	.word	0x08004fbf
 8004e00:	08004fbf 	.word	0x08004fbf
 8004e04:	08004ebb 	.word	0x08004ebb
 8004e08:	08004fbf 	.word	0x08004fbf
 8004e0c:	08004fbf 	.word	0x08004fbf
 8004e10:	08004fbf 	.word	0x08004fbf
 8004e14:	08004efb 	.word	0x08004efb
 8004e18:	08004fbf 	.word	0x08004fbf
 8004e1c:	08004fbf 	.word	0x08004fbf
 8004e20:	08004fbf 	.word	0x08004fbf
 8004e24:	08004f3d 	.word	0x08004f3d
 8004e28:	08004fbf 	.word	0x08004fbf
 8004e2c:	08004fbf 	.word	0x08004fbf
 8004e30:	08004fbf 	.word	0x08004fbf
 8004e34:	08004f7d 	.word	0x08004f7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fa74 	bl	800532c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0208 	orr.w	r2, r2, #8
 8004e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0204 	bic.w	r2, r2, #4
 8004e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6999      	ldr	r1, [r3, #24]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	619a      	str	r2, [r3, #24]
      break;
 8004e76:	e0a5      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fae4 	bl	800544c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6999      	ldr	r1, [r3, #24]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	619a      	str	r2, [r3, #24]
      break;
 8004eb8:	e084      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fb4d 	bl	8005560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0208 	orr.w	r2, r2, #8
 8004ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0204 	bic.w	r2, r2, #4
 8004ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69d9      	ldr	r1, [r3, #28]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	61da      	str	r2, [r3, #28]
      break;
 8004ef8:	e064      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fbb5 	bl	8005670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69d9      	ldr	r1, [r3, #28]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	021a      	lsls	r2, r3, #8
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	61da      	str	r2, [r3, #28]
      break;
 8004f3a:	e043      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fbfe 	bl	8005744 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0208 	orr.w	r2, r2, #8
 8004f56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0204 	bic.w	r2, r2, #4
 8004f66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f7a:	e023      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fc42 	bl	800580c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f96:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fa6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	021a      	lsls	r2, r3, #8
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004fbc:	e002      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop

08004fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005048:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d107      	bne.n	8005064 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005062:	e02a      	b.n	80050ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	429a      	cmp	r2, r3
 800506c:	d107      	bne.n	800507e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2202      	movs	r2, #2
 8005072:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800507c:	e01d      	b.n	80050ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	d107      	bne.n	8005098 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2204      	movs	r2, #4
 800508c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005096:	e010      	b.n	80050ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d107      	bne.n	80050b2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2208      	movs	r2, #8
 80050a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050b0:	e003      	b.n	80050ba <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7ff ffb4 	bl	8005028 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	771a      	strb	r2, [r3, #28]
}
 80050c6:	bf00      	nop
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d10b      	bne.n	80050fe <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d136      	bne.n	8005162 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050fc:	e031      	b.n	8005162 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	429a      	cmp	r2, r3
 8005106:	d10b      	bne.n	8005120 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2202      	movs	r2, #2
 800510c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d125      	bne.n	8005162 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800511e:	e020      	b.n	8005162 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	429a      	cmp	r2, r3
 8005128:	d10b      	bne.n	8005142 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2204      	movs	r2, #4
 800512e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d114      	bne.n	8005162 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005140:	e00f      	b.n	8005162 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	429a      	cmp	r2, r3
 800514a:	d10a      	bne.n	8005162 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2208      	movs	r2, #8
 8005150:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d103      	bne.n	8005162 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7fc f826 	bl	80011b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	771a      	strb	r2, [r3, #28]
}
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	429a      	cmp	r2, r3
 800518c:	d103      	bne.n	8005196 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	771a      	strb	r2, [r3, #28]
 8005194:	e019      	b.n	80051ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	429a      	cmp	r2, r3
 800519e:	d103      	bne.n	80051a8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2202      	movs	r2, #2
 80051a4:	771a      	strb	r2, [r3, #28]
 80051a6:	e010      	b.n	80051ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d103      	bne.n	80051ba <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2204      	movs	r2, #4
 80051b6:	771a      	strb	r2, [r3, #28]
 80051b8:	e007      	b.n	80051ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d102      	bne.n	80051ca <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2208      	movs	r2, #8
 80051c8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7ff ff18 	bl	8005000 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	771a      	strb	r2, [r3, #28]
}
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a46      	ldr	r2, [pc, #280]	@ (800530c <TIM_Base_SetConfig+0x12c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fe:	d00f      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a43      	ldr	r2, [pc, #268]	@ (8005310 <TIM_Base_SetConfig+0x130>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00b      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a42      	ldr	r2, [pc, #264]	@ (8005314 <TIM_Base_SetConfig+0x134>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a41      	ldr	r2, [pc, #260]	@ (8005318 <TIM_Base_SetConfig+0x138>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a40      	ldr	r2, [pc, #256]	@ (800531c <TIM_Base_SetConfig+0x13c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d108      	bne.n	8005232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a35      	ldr	r2, [pc, #212]	@ (800530c <TIM_Base_SetConfig+0x12c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01f      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005240:	d01b      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a32      	ldr	r2, [pc, #200]	@ (8005310 <TIM_Base_SetConfig+0x130>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d017      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a31      	ldr	r2, [pc, #196]	@ (8005314 <TIM_Base_SetConfig+0x134>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a30      	ldr	r2, [pc, #192]	@ (8005318 <TIM_Base_SetConfig+0x138>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00f      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2f      	ldr	r2, [pc, #188]	@ (800531c <TIM_Base_SetConfig+0x13c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00b      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2e      	ldr	r2, [pc, #184]	@ (8005320 <TIM_Base_SetConfig+0x140>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d007      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2d      	ldr	r2, [pc, #180]	@ (8005324 <TIM_Base_SetConfig+0x144>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2c      	ldr	r2, [pc, #176]	@ (8005328 <TIM_Base_SetConfig+0x148>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d108      	bne.n	800528c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a16      	ldr	r2, [pc, #88]	@ (800530c <TIM_Base_SetConfig+0x12c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00f      	beq.n	80052d8 <TIM_Base_SetConfig+0xf8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a18      	ldr	r2, [pc, #96]	@ (800531c <TIM_Base_SetConfig+0x13c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00b      	beq.n	80052d8 <TIM_Base_SetConfig+0xf8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a17      	ldr	r2, [pc, #92]	@ (8005320 <TIM_Base_SetConfig+0x140>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d007      	beq.n	80052d8 <TIM_Base_SetConfig+0xf8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a16      	ldr	r2, [pc, #88]	@ (8005324 <TIM_Base_SetConfig+0x144>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_Base_SetConfig+0xf8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a15      	ldr	r2, [pc, #84]	@ (8005328 <TIM_Base_SetConfig+0x148>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d103      	bne.n	80052e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d105      	bne.n	80052fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f023 0201 	bic.w	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	611a      	str	r2, [r3, #16]
  }
}
 80052fe:	bf00      	nop
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40012c00 	.word	0x40012c00
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40000c00 	.word	0x40000c00
 800531c:	40013400 	.word	0x40013400
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800

0800532c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f023 0201 	bic.w	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800535a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f023 0302 	bic.w	r3, r3, #2
 8005378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a2c      	ldr	r2, [pc, #176]	@ (8005438 <TIM_OC1_SetConfig+0x10c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00f      	beq.n	80053ac <TIM_OC1_SetConfig+0x80>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a2b      	ldr	r2, [pc, #172]	@ (800543c <TIM_OC1_SetConfig+0x110>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00b      	beq.n	80053ac <TIM_OC1_SetConfig+0x80>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a2a      	ldr	r2, [pc, #168]	@ (8005440 <TIM_OC1_SetConfig+0x114>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_OC1_SetConfig+0x80>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a29      	ldr	r2, [pc, #164]	@ (8005444 <TIM_OC1_SetConfig+0x118>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_OC1_SetConfig+0x80>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a28      	ldr	r2, [pc, #160]	@ (8005448 <TIM_OC1_SetConfig+0x11c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d10c      	bne.n	80053c6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f023 0308 	bic.w	r3, r3, #8
 80053b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f023 0304 	bic.w	r3, r3, #4
 80053c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005438 <TIM_OC1_SetConfig+0x10c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00f      	beq.n	80053ee <TIM_OC1_SetConfig+0xc2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1a      	ldr	r2, [pc, #104]	@ (800543c <TIM_OC1_SetConfig+0x110>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00b      	beq.n	80053ee <TIM_OC1_SetConfig+0xc2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a19      	ldr	r2, [pc, #100]	@ (8005440 <TIM_OC1_SetConfig+0x114>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d007      	beq.n	80053ee <TIM_OC1_SetConfig+0xc2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <TIM_OC1_SetConfig+0x118>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d003      	beq.n	80053ee <TIM_OC1_SetConfig+0xc2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <TIM_OC1_SetConfig+0x11c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d111      	bne.n	8005412 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	621a      	str	r2, [r3, #32]
}
 800542c:	bf00      	nop
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40013400 	.word	0x40013400
 8005440:	40014000 	.word	0x40014000
 8005444:	40014400 	.word	0x40014400
 8005448:	40014800 	.word	0x40014800

0800544c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f023 0210 	bic.w	r2, r3, #16
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800547a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800547e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0320 	bic.w	r3, r3, #32
 800549a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a28      	ldr	r2, [pc, #160]	@ (800554c <TIM_OC2_SetConfig+0x100>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_OC2_SetConfig+0x6c>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a27      	ldr	r2, [pc, #156]	@ (8005550 <TIM_OC2_SetConfig+0x104>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d10d      	bne.n	80054d4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a1d      	ldr	r2, [pc, #116]	@ (800554c <TIM_OC2_SetConfig+0x100>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00f      	beq.n	80054fc <TIM_OC2_SetConfig+0xb0>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a1c      	ldr	r2, [pc, #112]	@ (8005550 <TIM_OC2_SetConfig+0x104>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00b      	beq.n	80054fc <TIM_OC2_SetConfig+0xb0>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005554 <TIM_OC2_SetConfig+0x108>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d007      	beq.n	80054fc <TIM_OC2_SetConfig+0xb0>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005558 <TIM_OC2_SetConfig+0x10c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_OC2_SetConfig+0xb0>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a19      	ldr	r2, [pc, #100]	@ (800555c <TIM_OC2_SetConfig+0x110>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d113      	bne.n	8005524 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005502:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800550a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40013400 	.word	0x40013400
 8005554:	40014000 	.word	0x40014000
 8005558:	40014400 	.word	0x40014400
 800555c:	40014800 	.word	0x40014800

08005560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800558e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0303 	bic.w	r3, r3, #3
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a27      	ldr	r2, [pc, #156]	@ (800565c <TIM_OC3_SetConfig+0xfc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_OC3_SetConfig+0x6a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a26      	ldr	r2, [pc, #152]	@ (8005660 <TIM_OC3_SetConfig+0x100>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d10d      	bne.n	80055e6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1c      	ldr	r2, [pc, #112]	@ (800565c <TIM_OC3_SetConfig+0xfc>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00f      	beq.n	800560e <TIM_OC3_SetConfig+0xae>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005660 <TIM_OC3_SetConfig+0x100>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00b      	beq.n	800560e <TIM_OC3_SetConfig+0xae>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005664 <TIM_OC3_SetConfig+0x104>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d007      	beq.n	800560e <TIM_OC3_SetConfig+0xae>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a19      	ldr	r2, [pc, #100]	@ (8005668 <TIM_OC3_SetConfig+0x108>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d003      	beq.n	800560e <TIM_OC3_SetConfig+0xae>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a18      	ldr	r2, [pc, #96]	@ (800566c <TIM_OC3_SetConfig+0x10c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d113      	bne.n	8005636 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800561c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	40012c00 	.word	0x40012c00
 8005660:	40013400 	.word	0x40013400
 8005664:	40014000 	.word	0x40014000
 8005668:	40014400 	.word	0x40014400
 800566c:	40014800 	.word	0x40014800

08005670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	031b      	lsls	r3, r3, #12
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a18      	ldr	r2, [pc, #96]	@ (8005730 <TIM_OC4_SetConfig+0xc0>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00f      	beq.n	80056f4 <TIM_OC4_SetConfig+0x84>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a17      	ldr	r2, [pc, #92]	@ (8005734 <TIM_OC4_SetConfig+0xc4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00b      	beq.n	80056f4 <TIM_OC4_SetConfig+0x84>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a16      	ldr	r2, [pc, #88]	@ (8005738 <TIM_OC4_SetConfig+0xc8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d007      	beq.n	80056f4 <TIM_OC4_SetConfig+0x84>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a15      	ldr	r2, [pc, #84]	@ (800573c <TIM_OC4_SetConfig+0xcc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <TIM_OC4_SetConfig+0x84>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a14      	ldr	r2, [pc, #80]	@ (8005740 <TIM_OC4_SetConfig+0xd0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d109      	bne.n	8005708 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	019b      	lsls	r3, r3, #6
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40012c00 	.word	0x40012c00
 8005734:	40013400 	.word	0x40013400
 8005738:	40014000 	.word	0x40014000
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800

08005744 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005788:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	041b      	lsls	r3, r3, #16
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a17      	ldr	r2, [pc, #92]	@ (80057f8 <TIM_OC5_SetConfig+0xb4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00f      	beq.n	80057be <TIM_OC5_SetConfig+0x7a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a16      	ldr	r2, [pc, #88]	@ (80057fc <TIM_OC5_SetConfig+0xb8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00b      	beq.n	80057be <TIM_OC5_SetConfig+0x7a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a15      	ldr	r2, [pc, #84]	@ (8005800 <TIM_OC5_SetConfig+0xbc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d007      	beq.n	80057be <TIM_OC5_SetConfig+0x7a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a14      	ldr	r2, [pc, #80]	@ (8005804 <TIM_OC5_SetConfig+0xc0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d003      	beq.n	80057be <TIM_OC5_SetConfig+0x7a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a13      	ldr	r2, [pc, #76]	@ (8005808 <TIM_OC5_SetConfig+0xc4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d109      	bne.n	80057d2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	621a      	str	r2, [r3, #32]
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40013400 	.word	0x40013400
 8005800:	40014000 	.word	0x40014000
 8005804:	40014400 	.word	0x40014400
 8005808:	40014800 	.word	0x40014800

0800580c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800583a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	051b      	lsls	r3, r3, #20
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a18      	ldr	r2, [pc, #96]	@ (80058c4 <TIM_OC6_SetConfig+0xb8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00f      	beq.n	8005888 <TIM_OC6_SetConfig+0x7c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a17      	ldr	r2, [pc, #92]	@ (80058c8 <TIM_OC6_SetConfig+0xbc>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00b      	beq.n	8005888 <TIM_OC6_SetConfig+0x7c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a16      	ldr	r2, [pc, #88]	@ (80058cc <TIM_OC6_SetConfig+0xc0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d007      	beq.n	8005888 <TIM_OC6_SetConfig+0x7c>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a15      	ldr	r2, [pc, #84]	@ (80058d0 <TIM_OC6_SetConfig+0xc4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_OC6_SetConfig+0x7c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a14      	ldr	r2, [pc, #80]	@ (80058d4 <TIM_OC6_SetConfig+0xc8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d109      	bne.n	800589c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800588e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	029b      	lsls	r3, r3, #10
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	621a      	str	r2, [r3, #32]
}
 80058b6:	bf00      	nop
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40012c00 	.word	0x40012c00
 80058c8:	40013400 	.word	0x40013400
 80058cc:	40014000 	.word	0x40014000
 80058d0:	40014400 	.word	0x40014400
 80058d4:	40014800 	.word	0x40014800

080058d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	2201      	movs	r2, #1
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1a      	ldr	r2, [r3, #32]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	43db      	mvns	r3, r3
 80058fa:	401a      	ands	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a1a      	ldr	r2, [r3, #32]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f003 031f 	and.w	r3, r3, #31
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	fa01 f303 	lsl.w	r3, r1, r3
 8005910:	431a      	orrs	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	621a      	str	r2, [r3, #32]
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005938:	2302      	movs	r3, #2
 800593a:	e068      	b.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a2e      	ldr	r2, [pc, #184]	@ (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a2d      	ldr	r2, [pc, #180]	@ (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d108      	bne.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005976:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005988:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01d      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ae:	d018      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d013      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a1a      	ldr	r2, [pc, #104]	@ (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00e      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a18      	ldr	r2, [pc, #96]	@ (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d009      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a13      	ldr	r2, [pc, #76]	@ (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d004      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a14      	ldr	r2, [pc, #80]	@ (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10c      	bne.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40013400 	.word	0x40013400
 8005a24:	40000400 	.word	0x40000400
 8005a28:	40000800 	.word	0x40000800
 8005a2c:	40000c00 	.word	0x40000c00
 8005a30:	40014000 	.word	0x40014000

08005a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e040      	b.n	8005b04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fc f9a0 	bl	8001dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2224      	movs	r2, #36	@ 0x24
 8005a9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0201 	bic.w	r2, r2, #1
 8005aac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fb6a 	bl	8006190 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f8af 	bl	8005c20 <UART_SetConfig>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e01b      	b.n	8005b04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fbe9 	bl	80062d4 <UART_CheckIdleState>
 8005b02:	4603      	mov	r3, r0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08a      	sub	sp, #40	@ 0x28
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	d177      	bne.n	8005c14 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_UART_Transmit+0x24>
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e070      	b.n	8005c16 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2221      	movs	r2, #33	@ 0x21
 8005b40:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b42:	f7fc fb97 	bl	8002274 <HAL_GetTick>
 8005b46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	88fa      	ldrh	r2, [r7, #6]
 8005b4c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	88fa      	ldrh	r2, [r7, #6]
 8005b54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b60:	d108      	bne.n	8005b74 <HAL_UART_Transmit+0x68>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	e003      	b.n	8005b7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b7c:	e02f      	b.n	8005bde <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2200      	movs	r2, #0
 8005b86:	2180      	movs	r1, #128	@ 0x80
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 fc4b 	bl	8006424 <UART_WaitOnFlagUntilTimeout>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e03b      	b.n	8005c16 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10b      	bne.n	8005bbc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	881a      	ldrh	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bb0:	b292      	uxth	r2, r2
 8005bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	3302      	adds	r3, #2
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	e007      	b.n	8005bcc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	781a      	ldrb	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1c9      	bne.n	8005b7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2140      	movs	r1, #64	@ 0x40
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 fc15 	bl	8006424 <UART_WaitOnFlagUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e005      	b.n	8005c16 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	e000      	b.n	8005c16 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005c14:	2302      	movs	r3, #2
  }
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3720      	adds	r7, #32
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c24:	b08a      	sub	sp, #40	@ 0x28
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	4ba4      	ldr	r3, [pc, #656]	@ (8005ee0 <UART_SetConfig+0x2c0>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a99      	ldr	r2, [pc, #612]	@ (8005ee4 <UART_SetConfig+0x2c4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d004      	beq.n	8005c8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a90      	ldr	r2, [pc, #576]	@ (8005ee8 <UART_SetConfig+0x2c8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d126      	bne.n	8005cf8 <UART_SetConfig+0xd8>
 8005caa:	4b90      	ldr	r3, [pc, #576]	@ (8005eec <UART_SetConfig+0x2cc>)
 8005cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d81b      	bhi.n	8005cf0 <UART_SetConfig+0xd0>
 8005cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc0 <UART_SetConfig+0xa0>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005ce1 	.word	0x08005ce1
 8005cc8:	08005cd9 	.word	0x08005cd9
 8005ccc:	08005ce9 	.word	0x08005ce9
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cd6:	e116      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cde:	e112      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ce6:	e10e      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005ce8:	2308      	movs	r3, #8
 8005cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cee:	e10a      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cf6:	e106      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a7c      	ldr	r2, [pc, #496]	@ (8005ef0 <UART_SetConfig+0x2d0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d138      	bne.n	8005d74 <UART_SetConfig+0x154>
 8005d02:	4b7a      	ldr	r3, [pc, #488]	@ (8005eec <UART_SetConfig+0x2cc>)
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d08:	f003 030c 	and.w	r3, r3, #12
 8005d0c:	2b0c      	cmp	r3, #12
 8005d0e:	d82d      	bhi.n	8005d6c <UART_SetConfig+0x14c>
 8005d10:	a201      	add	r2, pc, #4	@ (adr r2, 8005d18 <UART_SetConfig+0xf8>)
 8005d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d16:	bf00      	nop
 8005d18:	08005d4d 	.word	0x08005d4d
 8005d1c:	08005d6d 	.word	0x08005d6d
 8005d20:	08005d6d 	.word	0x08005d6d
 8005d24:	08005d6d 	.word	0x08005d6d
 8005d28:	08005d5d 	.word	0x08005d5d
 8005d2c:	08005d6d 	.word	0x08005d6d
 8005d30:	08005d6d 	.word	0x08005d6d
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d55 	.word	0x08005d55
 8005d3c:	08005d6d 	.word	0x08005d6d
 8005d40:	08005d6d 	.word	0x08005d6d
 8005d44:	08005d6d 	.word	0x08005d6d
 8005d48:	08005d65 	.word	0x08005d65
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d52:	e0d8      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005d54:	2302      	movs	r3, #2
 8005d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d5a:	e0d4      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d62:	e0d0      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005d64:	2308      	movs	r3, #8
 8005d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d6a:	e0cc      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d72:	e0c8      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a5e      	ldr	r2, [pc, #376]	@ (8005ef4 <UART_SetConfig+0x2d4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d125      	bne.n	8005dca <UART_SetConfig+0x1aa>
 8005d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8005eec <UART_SetConfig+0x2cc>)
 8005d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d88:	2b30      	cmp	r3, #48	@ 0x30
 8005d8a:	d016      	beq.n	8005dba <UART_SetConfig+0x19a>
 8005d8c:	2b30      	cmp	r3, #48	@ 0x30
 8005d8e:	d818      	bhi.n	8005dc2 <UART_SetConfig+0x1a2>
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	d00a      	beq.n	8005daa <UART_SetConfig+0x18a>
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d814      	bhi.n	8005dc2 <UART_SetConfig+0x1a2>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <UART_SetConfig+0x182>
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	d008      	beq.n	8005db2 <UART_SetConfig+0x192>
 8005da0:	e00f      	b.n	8005dc2 <UART_SetConfig+0x1a2>
 8005da2:	2300      	movs	r3, #0
 8005da4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da8:	e0ad      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005daa:	2302      	movs	r3, #2
 8005dac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005db0:	e0a9      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005db2:	2304      	movs	r3, #4
 8005db4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005db8:	e0a5      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005dba:	2308      	movs	r3, #8
 8005dbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dc0:	e0a1      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005dc2:	2310      	movs	r3, #16
 8005dc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dc8:	e09d      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a4a      	ldr	r2, [pc, #296]	@ (8005ef8 <UART_SetConfig+0x2d8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d125      	bne.n	8005e20 <UART_SetConfig+0x200>
 8005dd4:	4b45      	ldr	r3, [pc, #276]	@ (8005eec <UART_SetConfig+0x2cc>)
 8005dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005dde:	2bc0      	cmp	r3, #192	@ 0xc0
 8005de0:	d016      	beq.n	8005e10 <UART_SetConfig+0x1f0>
 8005de2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005de4:	d818      	bhi.n	8005e18 <UART_SetConfig+0x1f8>
 8005de6:	2b80      	cmp	r3, #128	@ 0x80
 8005de8:	d00a      	beq.n	8005e00 <UART_SetConfig+0x1e0>
 8005dea:	2b80      	cmp	r3, #128	@ 0x80
 8005dec:	d814      	bhi.n	8005e18 <UART_SetConfig+0x1f8>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <UART_SetConfig+0x1d8>
 8005df2:	2b40      	cmp	r3, #64	@ 0x40
 8005df4:	d008      	beq.n	8005e08 <UART_SetConfig+0x1e8>
 8005df6:	e00f      	b.n	8005e18 <UART_SetConfig+0x1f8>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfe:	e082      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005e00:	2302      	movs	r3, #2
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e06:	e07e      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e0e:	e07a      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005e10:	2308      	movs	r3, #8
 8005e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e16:	e076      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e1e:	e072      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a35      	ldr	r2, [pc, #212]	@ (8005efc <UART_SetConfig+0x2dc>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d12a      	bne.n	8005e80 <UART_SetConfig+0x260>
 8005e2a:	4b30      	ldr	r3, [pc, #192]	@ (8005eec <UART_SetConfig+0x2cc>)
 8005e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e38:	d01a      	beq.n	8005e70 <UART_SetConfig+0x250>
 8005e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e3e:	d81b      	bhi.n	8005e78 <UART_SetConfig+0x258>
 8005e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e44:	d00c      	beq.n	8005e60 <UART_SetConfig+0x240>
 8005e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e4a:	d815      	bhi.n	8005e78 <UART_SetConfig+0x258>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <UART_SetConfig+0x238>
 8005e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e54:	d008      	beq.n	8005e68 <UART_SetConfig+0x248>
 8005e56:	e00f      	b.n	8005e78 <UART_SetConfig+0x258>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e5e:	e052      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005e60:	2302      	movs	r3, #2
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e66:	e04e      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005e68:	2304      	movs	r3, #4
 8005e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e6e:	e04a      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005e70:	2308      	movs	r3, #8
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e76:	e046      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e7e:	e042      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a17      	ldr	r2, [pc, #92]	@ (8005ee4 <UART_SetConfig+0x2c4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d13a      	bne.n	8005f00 <UART_SetConfig+0x2e0>
 8005e8a:	4b18      	ldr	r3, [pc, #96]	@ (8005eec <UART_SetConfig+0x2cc>)
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e98:	d01a      	beq.n	8005ed0 <UART_SetConfig+0x2b0>
 8005e9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e9e:	d81b      	bhi.n	8005ed8 <UART_SetConfig+0x2b8>
 8005ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea4:	d00c      	beq.n	8005ec0 <UART_SetConfig+0x2a0>
 8005ea6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eaa:	d815      	bhi.n	8005ed8 <UART_SetConfig+0x2b8>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <UART_SetConfig+0x298>
 8005eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb4:	d008      	beq.n	8005ec8 <UART_SetConfig+0x2a8>
 8005eb6:	e00f      	b.n	8005ed8 <UART_SetConfig+0x2b8>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ebe:	e022      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ec6:	e01e      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ece:	e01a      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ed6:	e016      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005ed8:	2310      	movs	r3, #16
 8005eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ede:	e012      	b.n	8005f06 <UART_SetConfig+0x2e6>
 8005ee0:	efff69f3 	.word	0xefff69f3
 8005ee4:	40008000 	.word	0x40008000
 8005ee8:	40013800 	.word	0x40013800
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	40004400 	.word	0x40004400
 8005ef4:	40004800 	.word	0x40004800
 8005ef8:	40004c00 	.word	0x40004c00
 8005efc:	40005000 	.word	0x40005000
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a9f      	ldr	r2, [pc, #636]	@ (8006188 <UART_SetConfig+0x568>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d17a      	bne.n	8006006 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d824      	bhi.n	8005f62 <UART_SetConfig+0x342>
 8005f18:	a201      	add	r2, pc, #4	@ (adr r2, 8005f20 <UART_SetConfig+0x300>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f63 	.word	0x08005f63
 8005f28:	08005f4d 	.word	0x08005f4d
 8005f2c:	08005f63 	.word	0x08005f63
 8005f30:	08005f53 	.word	0x08005f53
 8005f34:	08005f63 	.word	0x08005f63
 8005f38:	08005f63 	.word	0x08005f63
 8005f3c:	08005f63 	.word	0x08005f63
 8005f40:	08005f5b 	.word	0x08005f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f44:	f7fd fc86 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8005f48:	61f8      	str	r0, [r7, #28]
        break;
 8005f4a:	e010      	b.n	8005f6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f4c:	4b8f      	ldr	r3, [pc, #572]	@ (800618c <UART_SetConfig+0x56c>)
 8005f4e:	61fb      	str	r3, [r7, #28]
        break;
 8005f50:	e00d      	b.n	8005f6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f52:	f7fd fbe7 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8005f56:	61f8      	str	r0, [r7, #28]
        break;
 8005f58:	e009      	b.n	8005f6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f5e:	61fb      	str	r3, [r7, #28]
        break;
 8005f60:	e005      	b.n	8005f6e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 80fb 	beq.w	800616c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	4413      	add	r3, r2
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d305      	bcc.n	8005f92 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d903      	bls.n	8005f9a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f98:	e0e8      	b.n	800616c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	461c      	mov	r4, r3
 8005fa0:	4615      	mov	r5, r2
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	f04f 0300 	mov.w	r3, #0
 8005faa:	022b      	lsls	r3, r5, #8
 8005fac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005fb0:	0222      	lsls	r2, r4, #8
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	6849      	ldr	r1, [r1, #4]
 8005fb6:	0849      	lsrs	r1, r1, #1
 8005fb8:	2000      	movs	r0, #0
 8005fba:	4688      	mov	r8, r1
 8005fbc:	4681      	mov	r9, r0
 8005fbe:	eb12 0a08 	adds.w	sl, r2, r8
 8005fc2:	eb43 0b09 	adc.w	fp, r3, r9
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fd4:	4650      	mov	r0, sl
 8005fd6:	4659      	mov	r1, fp
 8005fd8:	f7fa fe56 	bl	8000c88 <__aeabi_uldivmod>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fea:	d308      	bcc.n	8005ffe <UART_SetConfig+0x3de>
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ff2:	d204      	bcs.n	8005ffe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	60da      	str	r2, [r3, #12]
 8005ffc:	e0b6      	b.n	800616c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006004:	e0b2      	b.n	800616c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800600e:	d15e      	bne.n	80060ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006010:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006014:	2b08      	cmp	r3, #8
 8006016:	d828      	bhi.n	800606a <UART_SetConfig+0x44a>
 8006018:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <UART_SetConfig+0x400>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006045 	.word	0x08006045
 8006024:	0800604d 	.word	0x0800604d
 8006028:	08006055 	.word	0x08006055
 800602c:	0800606b 	.word	0x0800606b
 8006030:	0800605b 	.word	0x0800605b
 8006034:	0800606b 	.word	0x0800606b
 8006038:	0800606b 	.word	0x0800606b
 800603c:	0800606b 	.word	0x0800606b
 8006040:	08006063 	.word	0x08006063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006044:	f7fd fc06 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8006048:	61f8      	str	r0, [r7, #28]
        break;
 800604a:	e014      	b.n	8006076 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800604c:	f7fd fc18 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8006050:	61f8      	str	r0, [r7, #28]
        break;
 8006052:	e010      	b.n	8006076 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006054:	4b4d      	ldr	r3, [pc, #308]	@ (800618c <UART_SetConfig+0x56c>)
 8006056:	61fb      	str	r3, [r7, #28]
        break;
 8006058:	e00d      	b.n	8006076 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800605a:	f7fd fb63 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 800605e:	61f8      	str	r0, [r7, #28]
        break;
 8006060:	e009      	b.n	8006076 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006066:	61fb      	str	r3, [r7, #28]
        break;
 8006068:	e005      	b.n	8006076 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006074:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d077      	beq.n	800616c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	005a      	lsls	r2, r3, #1
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	441a      	add	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b0f      	cmp	r3, #15
 8006096:	d916      	bls.n	80060c6 <UART_SetConfig+0x4a6>
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800609e:	d212      	bcs.n	80060c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f023 030f 	bic.w	r3, r3, #15
 80060a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	8afb      	ldrh	r3, [r7, #22]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	8afa      	ldrh	r2, [r7, #22]
 80060c2:	60da      	str	r2, [r3, #12]
 80060c4:	e052      	b.n	800616c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060cc:	e04e      	b.n	800616c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060d2:	2b08      	cmp	r3, #8
 80060d4:	d827      	bhi.n	8006126 <UART_SetConfig+0x506>
 80060d6:	a201      	add	r2, pc, #4	@ (adr r2, 80060dc <UART_SetConfig+0x4bc>)
 80060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060dc:	08006101 	.word	0x08006101
 80060e0:	08006109 	.word	0x08006109
 80060e4:	08006111 	.word	0x08006111
 80060e8:	08006127 	.word	0x08006127
 80060ec:	08006117 	.word	0x08006117
 80060f0:	08006127 	.word	0x08006127
 80060f4:	08006127 	.word	0x08006127
 80060f8:	08006127 	.word	0x08006127
 80060fc:	0800611f 	.word	0x0800611f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006100:	f7fd fba8 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8006104:	61f8      	str	r0, [r7, #28]
        break;
 8006106:	e014      	b.n	8006132 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006108:	f7fd fbba 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 800610c:	61f8      	str	r0, [r7, #28]
        break;
 800610e:	e010      	b.n	8006132 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006110:	4b1e      	ldr	r3, [pc, #120]	@ (800618c <UART_SetConfig+0x56c>)
 8006112:	61fb      	str	r3, [r7, #28]
        break;
 8006114:	e00d      	b.n	8006132 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006116:	f7fd fb05 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 800611a:	61f8      	str	r0, [r7, #28]
        break;
 800611c:	e009      	b.n	8006132 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800611e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006122:	61fb      	str	r3, [r7, #28]
        break;
 8006124:	e005      	b.n	8006132 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006130:	bf00      	nop
    }

    if (pclk != 0U)
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d019      	beq.n	800616c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	085a      	lsrs	r2, r3, #1
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	441a      	add	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	fbb2 f3f3 	udiv	r3, r2, r3
 800614a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	2b0f      	cmp	r3, #15
 8006150:	d909      	bls.n	8006166 <UART_SetConfig+0x546>
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006158:	d205      	bcs.n	8006166 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60da      	str	r2, [r3, #12]
 8006164:	e002      	b.n	800616c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006178:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800617c:	4618      	mov	r0, r3
 800617e:	3728      	adds	r7, #40	@ 0x28
 8006180:	46bd      	mov	sp, r7
 8006182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006186:	bf00      	nop
 8006188:	40008000 	.word	0x40008000
 800618c:	00f42400 	.word	0x00f42400

08006190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01a      	beq.n	80062a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800628e:	d10a      	bne.n	80062a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	605a      	str	r2, [r3, #4]
  }
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b098      	sub	sp, #96	@ 0x60
 80062d8:	af02      	add	r7, sp, #8
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062e4:	f7fb ffc6 	bl	8002274 <HAL_GetTick>
 80062e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d12e      	bne.n	8006356 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006300:	2200      	movs	r2, #0
 8006302:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f88c 	bl	8006424 <UART_WaitOnFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d021      	beq.n	8006356 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006326:	653b      	str	r3, [r7, #80]	@ 0x50
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006330:	647b      	str	r3, [r7, #68]	@ 0x44
 8006332:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800633e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e6      	bne.n	8006312 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e062      	b.n	800641c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b04      	cmp	r3, #4
 8006362:	d149      	bne.n	80063f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006364:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800636c:	2200      	movs	r2, #0
 800636e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f856 	bl	8006424 <UART_WaitOnFlagUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d03c      	beq.n	80063f8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	e853 3f00 	ldrex	r3, [r3]
 800638a:	623b      	str	r3, [r7, #32]
   return(result);
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800639c:	633b      	str	r3, [r7, #48]	@ 0x30
 800639e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a4:	e841 2300 	strex	r3, r2, [r1]
 80063a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e6      	bne.n	800637e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3308      	adds	r3, #8
 80063b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	e853 3f00 	ldrex	r3, [r3]
 80063be:	60fb      	str	r3, [r7, #12]
   return(result);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0301 	bic.w	r3, r3, #1
 80063c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3308      	adds	r3, #8
 80063ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063d0:	61fa      	str	r2, [r7, #28]
 80063d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d4:	69b9      	ldr	r1, [r7, #24]
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	e841 2300 	strex	r3, r2, [r1]
 80063dc:	617b      	str	r3, [r7, #20]
   return(result);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1e5      	bne.n	80063b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e011      	b.n	800641c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2220      	movs	r2, #32
 80063fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3758      	adds	r7, #88	@ 0x58
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4613      	mov	r3, r2
 8006432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006434:	e04f      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d04b      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643e:	f7fb ff19 	bl	8002274 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	429a      	cmp	r2, r3
 800644c:	d302      	bcc.n	8006454 <UART_WaitOnFlagUntilTimeout+0x30>
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e04e      	b.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0304 	and.w	r3, r3, #4
 8006462:	2b00      	cmp	r3, #0
 8006464:	d037      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b80      	cmp	r3, #128	@ 0x80
 800646a:	d034      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b40      	cmp	r3, #64	@ 0x40
 8006470:	d031      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b08      	cmp	r3, #8
 800647e:	d110      	bne.n	80064a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2208      	movs	r2, #8
 8006486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f838 	bl	80064fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2208      	movs	r2, #8
 8006492:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e029      	b.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064b0:	d111      	bne.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f81e 	bl	80064fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e00f      	b.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	bf0c      	ite	eq
 80064e6:	2301      	moveq	r3, #1
 80064e8:	2300      	movne	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d0a0      	beq.n	8006436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064fe:	b480      	push	{r7}
 8006500:	b095      	sub	sp, #84	@ 0x54
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006516:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800651a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	461a      	mov	r2, r3
 8006522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006524:	643b      	str	r3, [r7, #64]	@ 0x40
 8006526:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800652a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e6      	bne.n	8006506 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3308      	adds	r3, #8
 800653e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	61fb      	str	r3, [r7, #28]
   return(result);
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f023 0301 	bic.w	r3, r3, #1
 800654e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006558:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800655a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800655e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e5      	bne.n	8006538 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006570:	2b01      	cmp	r3, #1
 8006572:	d118      	bne.n	80065a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	60bb      	str	r3, [r7, #8]
   return(result);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f023 0310 	bic.w	r3, r3, #16
 8006588:	647b      	str	r3, [r7, #68]	@ 0x44
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006592:	61bb      	str	r3, [r7, #24]
 8006594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6979      	ldr	r1, [r7, #20]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	613b      	str	r3, [r7, #16]
   return(result);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e6      	bne.n	8006574 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80065ba:	bf00      	nop
 80065bc:	3754      	adds	r7, #84	@ 0x54
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <rand>:
 80065c8:	4b16      	ldr	r3, [pc, #88]	@ (8006624 <rand+0x5c>)
 80065ca:	b510      	push	{r4, lr}
 80065cc:	681c      	ldr	r4, [r3, #0]
 80065ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80065d0:	b9b3      	cbnz	r3, 8006600 <rand+0x38>
 80065d2:	2018      	movs	r0, #24
 80065d4:	f001 fcea 	bl	8007fac <malloc>
 80065d8:	4602      	mov	r2, r0
 80065da:	6320      	str	r0, [r4, #48]	@ 0x30
 80065dc:	b920      	cbnz	r0, 80065e8 <rand+0x20>
 80065de:	4b12      	ldr	r3, [pc, #72]	@ (8006628 <rand+0x60>)
 80065e0:	4812      	ldr	r0, [pc, #72]	@ (800662c <rand+0x64>)
 80065e2:	2152      	movs	r1, #82	@ 0x52
 80065e4:	f000 fe2c 	bl	8007240 <__assert_func>
 80065e8:	4911      	ldr	r1, [pc, #68]	@ (8006630 <rand+0x68>)
 80065ea:	4b12      	ldr	r3, [pc, #72]	@ (8006634 <rand+0x6c>)
 80065ec:	e9c0 1300 	strd	r1, r3, [r0]
 80065f0:	4b11      	ldr	r3, [pc, #68]	@ (8006638 <rand+0x70>)
 80065f2:	6083      	str	r3, [r0, #8]
 80065f4:	230b      	movs	r3, #11
 80065f6:	8183      	strh	r3, [r0, #12]
 80065f8:	2100      	movs	r1, #0
 80065fa:	2001      	movs	r0, #1
 80065fc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006600:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006602:	480e      	ldr	r0, [pc, #56]	@ (800663c <rand+0x74>)
 8006604:	690b      	ldr	r3, [r1, #16]
 8006606:	694c      	ldr	r4, [r1, #20]
 8006608:	4a0d      	ldr	r2, [pc, #52]	@ (8006640 <rand+0x78>)
 800660a:	4358      	muls	r0, r3
 800660c:	fb02 0004 	mla	r0, r2, r4, r0
 8006610:	fba3 3202 	umull	r3, r2, r3, r2
 8006614:	3301      	adds	r3, #1
 8006616:	eb40 0002 	adc.w	r0, r0, r2
 800661a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800661e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006622:	bd10      	pop	{r4, pc}
 8006624:	20000020 	.word	0x20000020
 8006628:	0800a644 	.word	0x0800a644
 800662c:	0800a65b 	.word	0x0800a65b
 8006630:	abcd330e 	.word	0xabcd330e
 8006634:	e66d1234 	.word	0xe66d1234
 8006638:	0005deec 	.word	0x0005deec
 800663c:	5851f42d 	.word	0x5851f42d
 8006640:	4c957f2d 	.word	0x4c957f2d

08006644 <__cvt>:
 8006644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006648:	ec57 6b10 	vmov	r6, r7, d0
 800664c:	2f00      	cmp	r7, #0
 800664e:	460c      	mov	r4, r1
 8006650:	4619      	mov	r1, r3
 8006652:	463b      	mov	r3, r7
 8006654:	bfbb      	ittet	lt
 8006656:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800665a:	461f      	movlt	r7, r3
 800665c:	2300      	movge	r3, #0
 800665e:	232d      	movlt	r3, #45	@ 0x2d
 8006660:	700b      	strb	r3, [r1, #0]
 8006662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006664:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006668:	4691      	mov	r9, r2
 800666a:	f023 0820 	bic.w	r8, r3, #32
 800666e:	bfbc      	itt	lt
 8006670:	4632      	movlt	r2, r6
 8006672:	4616      	movlt	r6, r2
 8006674:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006678:	d005      	beq.n	8006686 <__cvt+0x42>
 800667a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800667e:	d100      	bne.n	8006682 <__cvt+0x3e>
 8006680:	3401      	adds	r4, #1
 8006682:	2102      	movs	r1, #2
 8006684:	e000      	b.n	8006688 <__cvt+0x44>
 8006686:	2103      	movs	r1, #3
 8006688:	ab03      	add	r3, sp, #12
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	ab02      	add	r3, sp, #8
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	ec47 6b10 	vmov	d0, r6, r7
 8006694:	4653      	mov	r3, sl
 8006696:	4622      	mov	r2, r4
 8006698:	f000 fe7a 	bl	8007390 <_dtoa_r>
 800669c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80066a0:	4605      	mov	r5, r0
 80066a2:	d119      	bne.n	80066d8 <__cvt+0x94>
 80066a4:	f019 0f01 	tst.w	r9, #1
 80066a8:	d00e      	beq.n	80066c8 <__cvt+0x84>
 80066aa:	eb00 0904 	add.w	r9, r0, r4
 80066ae:	2200      	movs	r2, #0
 80066b0:	2300      	movs	r3, #0
 80066b2:	4630      	mov	r0, r6
 80066b4:	4639      	mov	r1, r7
 80066b6:	f7fa fa07 	bl	8000ac8 <__aeabi_dcmpeq>
 80066ba:	b108      	cbz	r0, 80066c0 <__cvt+0x7c>
 80066bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80066c0:	2230      	movs	r2, #48	@ 0x30
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	454b      	cmp	r3, r9
 80066c6:	d31e      	bcc.n	8006706 <__cvt+0xc2>
 80066c8:	9b03      	ldr	r3, [sp, #12]
 80066ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066cc:	1b5b      	subs	r3, r3, r5
 80066ce:	4628      	mov	r0, r5
 80066d0:	6013      	str	r3, [r2, #0]
 80066d2:	b004      	add	sp, #16
 80066d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066dc:	eb00 0904 	add.w	r9, r0, r4
 80066e0:	d1e5      	bne.n	80066ae <__cvt+0x6a>
 80066e2:	7803      	ldrb	r3, [r0, #0]
 80066e4:	2b30      	cmp	r3, #48	@ 0x30
 80066e6:	d10a      	bne.n	80066fe <__cvt+0xba>
 80066e8:	2200      	movs	r2, #0
 80066ea:	2300      	movs	r3, #0
 80066ec:	4630      	mov	r0, r6
 80066ee:	4639      	mov	r1, r7
 80066f0:	f7fa f9ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80066f4:	b918      	cbnz	r0, 80066fe <__cvt+0xba>
 80066f6:	f1c4 0401 	rsb	r4, r4, #1
 80066fa:	f8ca 4000 	str.w	r4, [sl]
 80066fe:	f8da 3000 	ldr.w	r3, [sl]
 8006702:	4499      	add	r9, r3
 8006704:	e7d3      	b.n	80066ae <__cvt+0x6a>
 8006706:	1c59      	adds	r1, r3, #1
 8006708:	9103      	str	r1, [sp, #12]
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	e7d9      	b.n	80066c2 <__cvt+0x7e>

0800670e <__exponent>:
 800670e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006710:	2900      	cmp	r1, #0
 8006712:	bfba      	itte	lt
 8006714:	4249      	neglt	r1, r1
 8006716:	232d      	movlt	r3, #45	@ 0x2d
 8006718:	232b      	movge	r3, #43	@ 0x2b
 800671a:	2909      	cmp	r1, #9
 800671c:	7002      	strb	r2, [r0, #0]
 800671e:	7043      	strb	r3, [r0, #1]
 8006720:	dd29      	ble.n	8006776 <__exponent+0x68>
 8006722:	f10d 0307 	add.w	r3, sp, #7
 8006726:	461d      	mov	r5, r3
 8006728:	270a      	movs	r7, #10
 800672a:	461a      	mov	r2, r3
 800672c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006730:	fb07 1416 	mls	r4, r7, r6, r1
 8006734:	3430      	adds	r4, #48	@ 0x30
 8006736:	f802 4c01 	strb.w	r4, [r2, #-1]
 800673a:	460c      	mov	r4, r1
 800673c:	2c63      	cmp	r4, #99	@ 0x63
 800673e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006742:	4631      	mov	r1, r6
 8006744:	dcf1      	bgt.n	800672a <__exponent+0x1c>
 8006746:	3130      	adds	r1, #48	@ 0x30
 8006748:	1e94      	subs	r4, r2, #2
 800674a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800674e:	1c41      	adds	r1, r0, #1
 8006750:	4623      	mov	r3, r4
 8006752:	42ab      	cmp	r3, r5
 8006754:	d30a      	bcc.n	800676c <__exponent+0x5e>
 8006756:	f10d 0309 	add.w	r3, sp, #9
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	42ac      	cmp	r4, r5
 800675e:	bf88      	it	hi
 8006760:	2300      	movhi	r3, #0
 8006762:	3302      	adds	r3, #2
 8006764:	4403      	add	r3, r0
 8006766:	1a18      	subs	r0, r3, r0
 8006768:	b003      	add	sp, #12
 800676a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800676c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006770:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006774:	e7ed      	b.n	8006752 <__exponent+0x44>
 8006776:	2330      	movs	r3, #48	@ 0x30
 8006778:	3130      	adds	r1, #48	@ 0x30
 800677a:	7083      	strb	r3, [r0, #2]
 800677c:	70c1      	strb	r1, [r0, #3]
 800677e:	1d03      	adds	r3, r0, #4
 8006780:	e7f1      	b.n	8006766 <__exponent+0x58>
	...

08006784 <_printf_float>:
 8006784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006788:	b08d      	sub	sp, #52	@ 0x34
 800678a:	460c      	mov	r4, r1
 800678c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006790:	4616      	mov	r6, r2
 8006792:	461f      	mov	r7, r3
 8006794:	4605      	mov	r5, r0
 8006796:	f000 fcdb 	bl	8007150 <_localeconv_r>
 800679a:	6803      	ldr	r3, [r0, #0]
 800679c:	9304      	str	r3, [sp, #16]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7f9 fd66 	bl	8000270 <strlen>
 80067a4:	2300      	movs	r3, #0
 80067a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80067a8:	f8d8 3000 	ldr.w	r3, [r8]
 80067ac:	9005      	str	r0, [sp, #20]
 80067ae:	3307      	adds	r3, #7
 80067b0:	f023 0307 	bic.w	r3, r3, #7
 80067b4:	f103 0208 	add.w	r2, r3, #8
 80067b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80067bc:	f8d4 b000 	ldr.w	fp, [r4]
 80067c0:	f8c8 2000 	str.w	r2, [r8]
 80067c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80067cc:	9307      	str	r3, [sp, #28]
 80067ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80067d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80067d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067da:	4b9c      	ldr	r3, [pc, #624]	@ (8006a4c <_printf_float+0x2c8>)
 80067dc:	f04f 32ff 	mov.w	r2, #4294967295
 80067e0:	f7fa f9a4 	bl	8000b2c <__aeabi_dcmpun>
 80067e4:	bb70      	cbnz	r0, 8006844 <_printf_float+0xc0>
 80067e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067ea:	4b98      	ldr	r3, [pc, #608]	@ (8006a4c <_printf_float+0x2c8>)
 80067ec:	f04f 32ff 	mov.w	r2, #4294967295
 80067f0:	f7fa f97e 	bl	8000af0 <__aeabi_dcmple>
 80067f4:	bb30      	cbnz	r0, 8006844 <_printf_float+0xc0>
 80067f6:	2200      	movs	r2, #0
 80067f8:	2300      	movs	r3, #0
 80067fa:	4640      	mov	r0, r8
 80067fc:	4649      	mov	r1, r9
 80067fe:	f7fa f96d 	bl	8000adc <__aeabi_dcmplt>
 8006802:	b110      	cbz	r0, 800680a <_printf_float+0x86>
 8006804:	232d      	movs	r3, #45	@ 0x2d
 8006806:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800680a:	4a91      	ldr	r2, [pc, #580]	@ (8006a50 <_printf_float+0x2cc>)
 800680c:	4b91      	ldr	r3, [pc, #580]	@ (8006a54 <_printf_float+0x2d0>)
 800680e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006812:	bf94      	ite	ls
 8006814:	4690      	movls	r8, r2
 8006816:	4698      	movhi	r8, r3
 8006818:	2303      	movs	r3, #3
 800681a:	6123      	str	r3, [r4, #16]
 800681c:	f02b 0304 	bic.w	r3, fp, #4
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	f04f 0900 	mov.w	r9, #0
 8006826:	9700      	str	r7, [sp, #0]
 8006828:	4633      	mov	r3, r6
 800682a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800682c:	4621      	mov	r1, r4
 800682e:	4628      	mov	r0, r5
 8006830:	f000 f9d2 	bl	8006bd8 <_printf_common>
 8006834:	3001      	adds	r0, #1
 8006836:	f040 808d 	bne.w	8006954 <_printf_float+0x1d0>
 800683a:	f04f 30ff 	mov.w	r0, #4294967295
 800683e:	b00d      	add	sp, #52	@ 0x34
 8006840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006844:	4642      	mov	r2, r8
 8006846:	464b      	mov	r3, r9
 8006848:	4640      	mov	r0, r8
 800684a:	4649      	mov	r1, r9
 800684c:	f7fa f96e 	bl	8000b2c <__aeabi_dcmpun>
 8006850:	b140      	cbz	r0, 8006864 <_printf_float+0xe0>
 8006852:	464b      	mov	r3, r9
 8006854:	2b00      	cmp	r3, #0
 8006856:	bfbc      	itt	lt
 8006858:	232d      	movlt	r3, #45	@ 0x2d
 800685a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800685e:	4a7e      	ldr	r2, [pc, #504]	@ (8006a58 <_printf_float+0x2d4>)
 8006860:	4b7e      	ldr	r3, [pc, #504]	@ (8006a5c <_printf_float+0x2d8>)
 8006862:	e7d4      	b.n	800680e <_printf_float+0x8a>
 8006864:	6863      	ldr	r3, [r4, #4]
 8006866:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800686a:	9206      	str	r2, [sp, #24]
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	d13b      	bne.n	80068e8 <_printf_float+0x164>
 8006870:	2306      	movs	r3, #6
 8006872:	6063      	str	r3, [r4, #4]
 8006874:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006878:	2300      	movs	r3, #0
 800687a:	6022      	str	r2, [r4, #0]
 800687c:	9303      	str	r3, [sp, #12]
 800687e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006880:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006884:	ab09      	add	r3, sp, #36	@ 0x24
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	6861      	ldr	r1, [r4, #4]
 800688a:	ec49 8b10 	vmov	d0, r8, r9
 800688e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006892:	4628      	mov	r0, r5
 8006894:	f7ff fed6 	bl	8006644 <__cvt>
 8006898:	9b06      	ldr	r3, [sp, #24]
 800689a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800689c:	2b47      	cmp	r3, #71	@ 0x47
 800689e:	4680      	mov	r8, r0
 80068a0:	d129      	bne.n	80068f6 <_printf_float+0x172>
 80068a2:	1cc8      	adds	r0, r1, #3
 80068a4:	db02      	blt.n	80068ac <_printf_float+0x128>
 80068a6:	6863      	ldr	r3, [r4, #4]
 80068a8:	4299      	cmp	r1, r3
 80068aa:	dd41      	ble.n	8006930 <_printf_float+0x1ac>
 80068ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80068b0:	fa5f fa8a 	uxtb.w	sl, sl
 80068b4:	3901      	subs	r1, #1
 80068b6:	4652      	mov	r2, sl
 80068b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80068bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80068be:	f7ff ff26 	bl	800670e <__exponent>
 80068c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068c4:	1813      	adds	r3, r2, r0
 80068c6:	2a01      	cmp	r2, #1
 80068c8:	4681      	mov	r9, r0
 80068ca:	6123      	str	r3, [r4, #16]
 80068cc:	dc02      	bgt.n	80068d4 <_printf_float+0x150>
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	07d2      	lsls	r2, r2, #31
 80068d2:	d501      	bpl.n	80068d8 <_printf_float+0x154>
 80068d4:	3301      	adds	r3, #1
 80068d6:	6123      	str	r3, [r4, #16]
 80068d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0a2      	beq.n	8006826 <_printf_float+0xa2>
 80068e0:	232d      	movs	r3, #45	@ 0x2d
 80068e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068e6:	e79e      	b.n	8006826 <_printf_float+0xa2>
 80068e8:	9a06      	ldr	r2, [sp, #24]
 80068ea:	2a47      	cmp	r2, #71	@ 0x47
 80068ec:	d1c2      	bne.n	8006874 <_printf_float+0xf0>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1c0      	bne.n	8006874 <_printf_float+0xf0>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e7bd      	b.n	8006872 <_printf_float+0xee>
 80068f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068fa:	d9db      	bls.n	80068b4 <_printf_float+0x130>
 80068fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006900:	d118      	bne.n	8006934 <_printf_float+0x1b0>
 8006902:	2900      	cmp	r1, #0
 8006904:	6863      	ldr	r3, [r4, #4]
 8006906:	dd0b      	ble.n	8006920 <_printf_float+0x19c>
 8006908:	6121      	str	r1, [r4, #16]
 800690a:	b913      	cbnz	r3, 8006912 <_printf_float+0x18e>
 800690c:	6822      	ldr	r2, [r4, #0]
 800690e:	07d0      	lsls	r0, r2, #31
 8006910:	d502      	bpl.n	8006918 <_printf_float+0x194>
 8006912:	3301      	adds	r3, #1
 8006914:	440b      	add	r3, r1
 8006916:	6123      	str	r3, [r4, #16]
 8006918:	65a1      	str	r1, [r4, #88]	@ 0x58
 800691a:	f04f 0900 	mov.w	r9, #0
 800691e:	e7db      	b.n	80068d8 <_printf_float+0x154>
 8006920:	b913      	cbnz	r3, 8006928 <_printf_float+0x1a4>
 8006922:	6822      	ldr	r2, [r4, #0]
 8006924:	07d2      	lsls	r2, r2, #31
 8006926:	d501      	bpl.n	800692c <_printf_float+0x1a8>
 8006928:	3302      	adds	r3, #2
 800692a:	e7f4      	b.n	8006916 <_printf_float+0x192>
 800692c:	2301      	movs	r3, #1
 800692e:	e7f2      	b.n	8006916 <_printf_float+0x192>
 8006930:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006936:	4299      	cmp	r1, r3
 8006938:	db05      	blt.n	8006946 <_printf_float+0x1c2>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	6121      	str	r1, [r4, #16]
 800693e:	07d8      	lsls	r0, r3, #31
 8006940:	d5ea      	bpl.n	8006918 <_printf_float+0x194>
 8006942:	1c4b      	adds	r3, r1, #1
 8006944:	e7e7      	b.n	8006916 <_printf_float+0x192>
 8006946:	2900      	cmp	r1, #0
 8006948:	bfd4      	ite	le
 800694a:	f1c1 0202 	rsble	r2, r1, #2
 800694e:	2201      	movgt	r2, #1
 8006950:	4413      	add	r3, r2
 8006952:	e7e0      	b.n	8006916 <_printf_float+0x192>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	055a      	lsls	r2, r3, #21
 8006958:	d407      	bmi.n	800696a <_printf_float+0x1e6>
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	4642      	mov	r2, r8
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	d12b      	bne.n	80069c0 <_printf_float+0x23c>
 8006968:	e767      	b.n	800683a <_printf_float+0xb6>
 800696a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800696e:	f240 80dd 	bls.w	8006b2c <_printf_float+0x3a8>
 8006972:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006976:	2200      	movs	r2, #0
 8006978:	2300      	movs	r3, #0
 800697a:	f7fa f8a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800697e:	2800      	cmp	r0, #0
 8006980:	d033      	beq.n	80069ea <_printf_float+0x266>
 8006982:	4a37      	ldr	r2, [pc, #220]	@ (8006a60 <_printf_float+0x2dc>)
 8006984:	2301      	movs	r3, #1
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	f43f af54 	beq.w	800683a <_printf_float+0xb6>
 8006992:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006996:	4543      	cmp	r3, r8
 8006998:	db02      	blt.n	80069a0 <_printf_float+0x21c>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	07d8      	lsls	r0, r3, #31
 800699e:	d50f      	bpl.n	80069c0 <_printf_float+0x23c>
 80069a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069a4:	4631      	mov	r1, r6
 80069a6:	4628      	mov	r0, r5
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	f43f af45 	beq.w	800683a <_printf_float+0xb6>
 80069b0:	f04f 0900 	mov.w	r9, #0
 80069b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80069b8:	f104 0a1a 	add.w	sl, r4, #26
 80069bc:	45c8      	cmp	r8, r9
 80069be:	dc09      	bgt.n	80069d4 <_printf_float+0x250>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	079b      	lsls	r3, r3, #30
 80069c4:	f100 8103 	bmi.w	8006bce <_printf_float+0x44a>
 80069c8:	68e0      	ldr	r0, [r4, #12]
 80069ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069cc:	4298      	cmp	r0, r3
 80069ce:	bfb8      	it	lt
 80069d0:	4618      	movlt	r0, r3
 80069d2:	e734      	b.n	800683e <_printf_float+0xba>
 80069d4:	2301      	movs	r3, #1
 80069d6:	4652      	mov	r2, sl
 80069d8:	4631      	mov	r1, r6
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	f43f af2b 	beq.w	800683a <_printf_float+0xb6>
 80069e4:	f109 0901 	add.w	r9, r9, #1
 80069e8:	e7e8      	b.n	80069bc <_printf_float+0x238>
 80069ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	dc39      	bgt.n	8006a64 <_printf_float+0x2e0>
 80069f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a60 <_printf_float+0x2dc>)
 80069f2:	2301      	movs	r3, #1
 80069f4:	4631      	mov	r1, r6
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b8      	blx	r7
 80069fa:	3001      	adds	r0, #1
 80069fc:	f43f af1d 	beq.w	800683a <_printf_float+0xb6>
 8006a00:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a04:	ea59 0303 	orrs.w	r3, r9, r3
 8006a08:	d102      	bne.n	8006a10 <_printf_float+0x28c>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	07d9      	lsls	r1, r3, #31
 8006a0e:	d5d7      	bpl.n	80069c0 <_printf_float+0x23c>
 8006a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a14:	4631      	mov	r1, r6
 8006a16:	4628      	mov	r0, r5
 8006a18:	47b8      	blx	r7
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	f43f af0d 	beq.w	800683a <_printf_float+0xb6>
 8006a20:	f04f 0a00 	mov.w	sl, #0
 8006a24:	f104 0b1a 	add.w	fp, r4, #26
 8006a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a2a:	425b      	negs	r3, r3
 8006a2c:	4553      	cmp	r3, sl
 8006a2e:	dc01      	bgt.n	8006a34 <_printf_float+0x2b0>
 8006a30:	464b      	mov	r3, r9
 8006a32:	e793      	b.n	800695c <_printf_float+0x1d8>
 8006a34:	2301      	movs	r3, #1
 8006a36:	465a      	mov	r2, fp
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	47b8      	blx	r7
 8006a3e:	3001      	adds	r0, #1
 8006a40:	f43f aefb 	beq.w	800683a <_printf_float+0xb6>
 8006a44:	f10a 0a01 	add.w	sl, sl, #1
 8006a48:	e7ee      	b.n	8006a28 <_printf_float+0x2a4>
 8006a4a:	bf00      	nop
 8006a4c:	7fefffff 	.word	0x7fefffff
 8006a50:	0800a6b3 	.word	0x0800a6b3
 8006a54:	0800a6b7 	.word	0x0800a6b7
 8006a58:	0800a6bb 	.word	0x0800a6bb
 8006a5c:	0800a6bf 	.word	0x0800a6bf
 8006a60:	0800a6c3 	.word	0x0800a6c3
 8006a64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a6a:	4553      	cmp	r3, sl
 8006a6c:	bfa8      	it	ge
 8006a6e:	4653      	movge	r3, sl
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	4699      	mov	r9, r3
 8006a74:	dc36      	bgt.n	8006ae4 <_printf_float+0x360>
 8006a76:	f04f 0b00 	mov.w	fp, #0
 8006a7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a7e:	f104 021a 	add.w	r2, r4, #26
 8006a82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a84:	9306      	str	r3, [sp, #24]
 8006a86:	eba3 0309 	sub.w	r3, r3, r9
 8006a8a:	455b      	cmp	r3, fp
 8006a8c:	dc31      	bgt.n	8006af2 <_printf_float+0x36e>
 8006a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a90:	459a      	cmp	sl, r3
 8006a92:	dc3a      	bgt.n	8006b0a <_printf_float+0x386>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	07da      	lsls	r2, r3, #31
 8006a98:	d437      	bmi.n	8006b0a <_printf_float+0x386>
 8006a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a9c:	ebaa 0903 	sub.w	r9, sl, r3
 8006aa0:	9b06      	ldr	r3, [sp, #24]
 8006aa2:	ebaa 0303 	sub.w	r3, sl, r3
 8006aa6:	4599      	cmp	r9, r3
 8006aa8:	bfa8      	it	ge
 8006aaa:	4699      	movge	r9, r3
 8006aac:	f1b9 0f00 	cmp.w	r9, #0
 8006ab0:	dc33      	bgt.n	8006b1a <_printf_float+0x396>
 8006ab2:	f04f 0800 	mov.w	r8, #0
 8006ab6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006aba:	f104 0b1a 	add.w	fp, r4, #26
 8006abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ac0:	ebaa 0303 	sub.w	r3, sl, r3
 8006ac4:	eba3 0309 	sub.w	r3, r3, r9
 8006ac8:	4543      	cmp	r3, r8
 8006aca:	f77f af79 	ble.w	80069c0 <_printf_float+0x23c>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	465a      	mov	r2, fp
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	47b8      	blx	r7
 8006ad8:	3001      	adds	r0, #1
 8006ada:	f43f aeae 	beq.w	800683a <_printf_float+0xb6>
 8006ade:	f108 0801 	add.w	r8, r8, #1
 8006ae2:	e7ec      	b.n	8006abe <_printf_float+0x33a>
 8006ae4:	4642      	mov	r2, r8
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	4628      	mov	r0, r5
 8006aea:	47b8      	blx	r7
 8006aec:	3001      	adds	r0, #1
 8006aee:	d1c2      	bne.n	8006a76 <_printf_float+0x2f2>
 8006af0:	e6a3      	b.n	800683a <_printf_float+0xb6>
 8006af2:	2301      	movs	r3, #1
 8006af4:	4631      	mov	r1, r6
 8006af6:	4628      	mov	r0, r5
 8006af8:	9206      	str	r2, [sp, #24]
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	f43f ae9c 	beq.w	800683a <_printf_float+0xb6>
 8006b02:	9a06      	ldr	r2, [sp, #24]
 8006b04:	f10b 0b01 	add.w	fp, fp, #1
 8006b08:	e7bb      	b.n	8006a82 <_printf_float+0x2fe>
 8006b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4628      	mov	r0, r5
 8006b12:	47b8      	blx	r7
 8006b14:	3001      	adds	r0, #1
 8006b16:	d1c0      	bne.n	8006a9a <_printf_float+0x316>
 8006b18:	e68f      	b.n	800683a <_printf_float+0xb6>
 8006b1a:	9a06      	ldr	r2, [sp, #24]
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	4442      	add	r2, r8
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	d1c3      	bne.n	8006ab2 <_printf_float+0x32e>
 8006b2a:	e686      	b.n	800683a <_printf_float+0xb6>
 8006b2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b30:	f1ba 0f01 	cmp.w	sl, #1
 8006b34:	dc01      	bgt.n	8006b3a <_printf_float+0x3b6>
 8006b36:	07db      	lsls	r3, r3, #31
 8006b38:	d536      	bpl.n	8006ba8 <_printf_float+0x424>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	4642      	mov	r2, r8
 8006b3e:	4631      	mov	r1, r6
 8006b40:	4628      	mov	r0, r5
 8006b42:	47b8      	blx	r7
 8006b44:	3001      	adds	r0, #1
 8006b46:	f43f ae78 	beq.w	800683a <_printf_float+0xb6>
 8006b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b4e:	4631      	mov	r1, r6
 8006b50:	4628      	mov	r0, r5
 8006b52:	47b8      	blx	r7
 8006b54:	3001      	adds	r0, #1
 8006b56:	f43f ae70 	beq.w	800683a <_printf_float+0xb6>
 8006b5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2300      	movs	r3, #0
 8006b62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b66:	f7f9 ffaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b6a:	b9c0      	cbnz	r0, 8006b9e <_printf_float+0x41a>
 8006b6c:	4653      	mov	r3, sl
 8006b6e:	f108 0201 	add.w	r2, r8, #1
 8006b72:	4631      	mov	r1, r6
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b8      	blx	r7
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d10c      	bne.n	8006b96 <_printf_float+0x412>
 8006b7c:	e65d      	b.n	800683a <_printf_float+0xb6>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	465a      	mov	r2, fp
 8006b82:	4631      	mov	r1, r6
 8006b84:	4628      	mov	r0, r5
 8006b86:	47b8      	blx	r7
 8006b88:	3001      	adds	r0, #1
 8006b8a:	f43f ae56 	beq.w	800683a <_printf_float+0xb6>
 8006b8e:	f108 0801 	add.w	r8, r8, #1
 8006b92:	45d0      	cmp	r8, sl
 8006b94:	dbf3      	blt.n	8006b7e <_printf_float+0x3fa>
 8006b96:	464b      	mov	r3, r9
 8006b98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b9c:	e6df      	b.n	800695e <_printf_float+0x1da>
 8006b9e:	f04f 0800 	mov.w	r8, #0
 8006ba2:	f104 0b1a 	add.w	fp, r4, #26
 8006ba6:	e7f4      	b.n	8006b92 <_printf_float+0x40e>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	4642      	mov	r2, r8
 8006bac:	e7e1      	b.n	8006b72 <_printf_float+0x3ee>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	464a      	mov	r2, r9
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	47b8      	blx	r7
 8006bb8:	3001      	adds	r0, #1
 8006bba:	f43f ae3e 	beq.w	800683a <_printf_float+0xb6>
 8006bbe:	f108 0801 	add.w	r8, r8, #1
 8006bc2:	68e3      	ldr	r3, [r4, #12]
 8006bc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006bc6:	1a5b      	subs	r3, r3, r1
 8006bc8:	4543      	cmp	r3, r8
 8006bca:	dcf0      	bgt.n	8006bae <_printf_float+0x42a>
 8006bcc:	e6fc      	b.n	80069c8 <_printf_float+0x244>
 8006bce:	f04f 0800 	mov.w	r8, #0
 8006bd2:	f104 0919 	add.w	r9, r4, #25
 8006bd6:	e7f4      	b.n	8006bc2 <_printf_float+0x43e>

08006bd8 <_printf_common>:
 8006bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bdc:	4616      	mov	r6, r2
 8006bde:	4698      	mov	r8, r3
 8006be0:	688a      	ldr	r2, [r1, #8]
 8006be2:	690b      	ldr	r3, [r1, #16]
 8006be4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006be8:	4293      	cmp	r3, r2
 8006bea:	bfb8      	it	lt
 8006bec:	4613      	movlt	r3, r2
 8006bee:	6033      	str	r3, [r6, #0]
 8006bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	b10a      	cbz	r2, 8006bfe <_printf_common+0x26>
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	6033      	str	r3, [r6, #0]
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	0699      	lsls	r1, r3, #26
 8006c02:	bf42      	ittt	mi
 8006c04:	6833      	ldrmi	r3, [r6, #0]
 8006c06:	3302      	addmi	r3, #2
 8006c08:	6033      	strmi	r3, [r6, #0]
 8006c0a:	6825      	ldr	r5, [r4, #0]
 8006c0c:	f015 0506 	ands.w	r5, r5, #6
 8006c10:	d106      	bne.n	8006c20 <_printf_common+0x48>
 8006c12:	f104 0a19 	add.w	sl, r4, #25
 8006c16:	68e3      	ldr	r3, [r4, #12]
 8006c18:	6832      	ldr	r2, [r6, #0]
 8006c1a:	1a9b      	subs	r3, r3, r2
 8006c1c:	42ab      	cmp	r3, r5
 8006c1e:	dc26      	bgt.n	8006c6e <_printf_common+0x96>
 8006c20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c24:	6822      	ldr	r2, [r4, #0]
 8006c26:	3b00      	subs	r3, #0
 8006c28:	bf18      	it	ne
 8006c2a:	2301      	movne	r3, #1
 8006c2c:	0692      	lsls	r2, r2, #26
 8006c2e:	d42b      	bmi.n	8006c88 <_printf_common+0xb0>
 8006c30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c34:	4641      	mov	r1, r8
 8006c36:	4638      	mov	r0, r7
 8006c38:	47c8      	blx	r9
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d01e      	beq.n	8006c7c <_printf_common+0xa4>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	6922      	ldr	r2, [r4, #16]
 8006c42:	f003 0306 	and.w	r3, r3, #6
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	bf02      	ittt	eq
 8006c4a:	68e5      	ldreq	r5, [r4, #12]
 8006c4c:	6833      	ldreq	r3, [r6, #0]
 8006c4e:	1aed      	subeq	r5, r5, r3
 8006c50:	68a3      	ldr	r3, [r4, #8]
 8006c52:	bf0c      	ite	eq
 8006c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c58:	2500      	movne	r5, #0
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	bfc4      	itt	gt
 8006c5e:	1a9b      	subgt	r3, r3, r2
 8006c60:	18ed      	addgt	r5, r5, r3
 8006c62:	2600      	movs	r6, #0
 8006c64:	341a      	adds	r4, #26
 8006c66:	42b5      	cmp	r5, r6
 8006c68:	d11a      	bne.n	8006ca0 <_printf_common+0xc8>
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	e008      	b.n	8006c80 <_printf_common+0xa8>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	4652      	mov	r2, sl
 8006c72:	4641      	mov	r1, r8
 8006c74:	4638      	mov	r0, r7
 8006c76:	47c8      	blx	r9
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d103      	bne.n	8006c84 <_printf_common+0xac>
 8006c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c84:	3501      	adds	r5, #1
 8006c86:	e7c6      	b.n	8006c16 <_printf_common+0x3e>
 8006c88:	18e1      	adds	r1, r4, r3
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	2030      	movs	r0, #48	@ 0x30
 8006c8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c92:	4422      	add	r2, r4
 8006c94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c9c:	3302      	adds	r3, #2
 8006c9e:	e7c7      	b.n	8006c30 <_printf_common+0x58>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	4622      	mov	r2, r4
 8006ca4:	4641      	mov	r1, r8
 8006ca6:	4638      	mov	r0, r7
 8006ca8:	47c8      	blx	r9
 8006caa:	3001      	adds	r0, #1
 8006cac:	d0e6      	beq.n	8006c7c <_printf_common+0xa4>
 8006cae:	3601      	adds	r6, #1
 8006cb0:	e7d9      	b.n	8006c66 <_printf_common+0x8e>
	...

08006cb4 <_printf_i>:
 8006cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb8:	7e0f      	ldrb	r7, [r1, #24]
 8006cba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006cbc:	2f78      	cmp	r7, #120	@ 0x78
 8006cbe:	4691      	mov	r9, r2
 8006cc0:	4680      	mov	r8, r0
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	469a      	mov	sl, r3
 8006cc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006cca:	d807      	bhi.n	8006cdc <_printf_i+0x28>
 8006ccc:	2f62      	cmp	r7, #98	@ 0x62
 8006cce:	d80a      	bhi.n	8006ce6 <_printf_i+0x32>
 8006cd0:	2f00      	cmp	r7, #0
 8006cd2:	f000 80d2 	beq.w	8006e7a <_printf_i+0x1c6>
 8006cd6:	2f58      	cmp	r7, #88	@ 0x58
 8006cd8:	f000 80b9 	beq.w	8006e4e <_printf_i+0x19a>
 8006cdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ce0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ce4:	e03a      	b.n	8006d5c <_printf_i+0xa8>
 8006ce6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cea:	2b15      	cmp	r3, #21
 8006cec:	d8f6      	bhi.n	8006cdc <_printf_i+0x28>
 8006cee:	a101      	add	r1, pc, #4	@ (adr r1, 8006cf4 <_printf_i+0x40>)
 8006cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cf4:	08006d4d 	.word	0x08006d4d
 8006cf8:	08006d61 	.word	0x08006d61
 8006cfc:	08006cdd 	.word	0x08006cdd
 8006d00:	08006cdd 	.word	0x08006cdd
 8006d04:	08006cdd 	.word	0x08006cdd
 8006d08:	08006cdd 	.word	0x08006cdd
 8006d0c:	08006d61 	.word	0x08006d61
 8006d10:	08006cdd 	.word	0x08006cdd
 8006d14:	08006cdd 	.word	0x08006cdd
 8006d18:	08006cdd 	.word	0x08006cdd
 8006d1c:	08006cdd 	.word	0x08006cdd
 8006d20:	08006e61 	.word	0x08006e61
 8006d24:	08006d8b 	.word	0x08006d8b
 8006d28:	08006e1b 	.word	0x08006e1b
 8006d2c:	08006cdd 	.word	0x08006cdd
 8006d30:	08006cdd 	.word	0x08006cdd
 8006d34:	08006e83 	.word	0x08006e83
 8006d38:	08006cdd 	.word	0x08006cdd
 8006d3c:	08006d8b 	.word	0x08006d8b
 8006d40:	08006cdd 	.word	0x08006cdd
 8006d44:	08006cdd 	.word	0x08006cdd
 8006d48:	08006e23 	.word	0x08006e23
 8006d4c:	6833      	ldr	r3, [r6, #0]
 8006d4e:	1d1a      	adds	r2, r3, #4
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6032      	str	r2, [r6, #0]
 8006d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e09d      	b.n	8006e9c <_printf_i+0x1e8>
 8006d60:	6833      	ldr	r3, [r6, #0]
 8006d62:	6820      	ldr	r0, [r4, #0]
 8006d64:	1d19      	adds	r1, r3, #4
 8006d66:	6031      	str	r1, [r6, #0]
 8006d68:	0606      	lsls	r6, r0, #24
 8006d6a:	d501      	bpl.n	8006d70 <_printf_i+0xbc>
 8006d6c:	681d      	ldr	r5, [r3, #0]
 8006d6e:	e003      	b.n	8006d78 <_printf_i+0xc4>
 8006d70:	0645      	lsls	r5, r0, #25
 8006d72:	d5fb      	bpl.n	8006d6c <_printf_i+0xb8>
 8006d74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d78:	2d00      	cmp	r5, #0
 8006d7a:	da03      	bge.n	8006d84 <_printf_i+0xd0>
 8006d7c:	232d      	movs	r3, #45	@ 0x2d
 8006d7e:	426d      	negs	r5, r5
 8006d80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d84:	4859      	ldr	r0, [pc, #356]	@ (8006eec <_printf_i+0x238>)
 8006d86:	230a      	movs	r3, #10
 8006d88:	e011      	b.n	8006dae <_printf_i+0xfa>
 8006d8a:	6821      	ldr	r1, [r4, #0]
 8006d8c:	6833      	ldr	r3, [r6, #0]
 8006d8e:	0608      	lsls	r0, r1, #24
 8006d90:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d94:	d402      	bmi.n	8006d9c <_printf_i+0xe8>
 8006d96:	0649      	lsls	r1, r1, #25
 8006d98:	bf48      	it	mi
 8006d9a:	b2ad      	uxthmi	r5, r5
 8006d9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d9e:	4853      	ldr	r0, [pc, #332]	@ (8006eec <_printf_i+0x238>)
 8006da0:	6033      	str	r3, [r6, #0]
 8006da2:	bf14      	ite	ne
 8006da4:	230a      	movne	r3, #10
 8006da6:	2308      	moveq	r3, #8
 8006da8:	2100      	movs	r1, #0
 8006daa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006dae:	6866      	ldr	r6, [r4, #4]
 8006db0:	60a6      	str	r6, [r4, #8]
 8006db2:	2e00      	cmp	r6, #0
 8006db4:	bfa2      	ittt	ge
 8006db6:	6821      	ldrge	r1, [r4, #0]
 8006db8:	f021 0104 	bicge.w	r1, r1, #4
 8006dbc:	6021      	strge	r1, [r4, #0]
 8006dbe:	b90d      	cbnz	r5, 8006dc4 <_printf_i+0x110>
 8006dc0:	2e00      	cmp	r6, #0
 8006dc2:	d04b      	beq.n	8006e5c <_printf_i+0x1a8>
 8006dc4:	4616      	mov	r6, r2
 8006dc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006dca:	fb03 5711 	mls	r7, r3, r1, r5
 8006dce:	5dc7      	ldrb	r7, [r0, r7]
 8006dd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006dd4:	462f      	mov	r7, r5
 8006dd6:	42bb      	cmp	r3, r7
 8006dd8:	460d      	mov	r5, r1
 8006dda:	d9f4      	bls.n	8006dc6 <_printf_i+0x112>
 8006ddc:	2b08      	cmp	r3, #8
 8006dde:	d10b      	bne.n	8006df8 <_printf_i+0x144>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	07df      	lsls	r7, r3, #31
 8006de4:	d508      	bpl.n	8006df8 <_printf_i+0x144>
 8006de6:	6923      	ldr	r3, [r4, #16]
 8006de8:	6861      	ldr	r1, [r4, #4]
 8006dea:	4299      	cmp	r1, r3
 8006dec:	bfde      	ittt	le
 8006dee:	2330      	movle	r3, #48	@ 0x30
 8006df0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006df4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006df8:	1b92      	subs	r2, r2, r6
 8006dfa:	6122      	str	r2, [r4, #16]
 8006dfc:	f8cd a000 	str.w	sl, [sp]
 8006e00:	464b      	mov	r3, r9
 8006e02:	aa03      	add	r2, sp, #12
 8006e04:	4621      	mov	r1, r4
 8006e06:	4640      	mov	r0, r8
 8006e08:	f7ff fee6 	bl	8006bd8 <_printf_common>
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d14a      	bne.n	8006ea6 <_printf_i+0x1f2>
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295
 8006e14:	b004      	add	sp, #16
 8006e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	f043 0320 	orr.w	r3, r3, #32
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	4833      	ldr	r0, [pc, #204]	@ (8006ef0 <_printf_i+0x23c>)
 8006e24:	2778      	movs	r7, #120	@ 0x78
 8006e26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	6831      	ldr	r1, [r6, #0]
 8006e2e:	061f      	lsls	r7, r3, #24
 8006e30:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e34:	d402      	bmi.n	8006e3c <_printf_i+0x188>
 8006e36:	065f      	lsls	r7, r3, #25
 8006e38:	bf48      	it	mi
 8006e3a:	b2ad      	uxthmi	r5, r5
 8006e3c:	6031      	str	r1, [r6, #0]
 8006e3e:	07d9      	lsls	r1, r3, #31
 8006e40:	bf44      	itt	mi
 8006e42:	f043 0320 	orrmi.w	r3, r3, #32
 8006e46:	6023      	strmi	r3, [r4, #0]
 8006e48:	b11d      	cbz	r5, 8006e52 <_printf_i+0x19e>
 8006e4a:	2310      	movs	r3, #16
 8006e4c:	e7ac      	b.n	8006da8 <_printf_i+0xf4>
 8006e4e:	4827      	ldr	r0, [pc, #156]	@ (8006eec <_printf_i+0x238>)
 8006e50:	e7e9      	b.n	8006e26 <_printf_i+0x172>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	f023 0320 	bic.w	r3, r3, #32
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	e7f6      	b.n	8006e4a <_printf_i+0x196>
 8006e5c:	4616      	mov	r6, r2
 8006e5e:	e7bd      	b.n	8006ddc <_printf_i+0x128>
 8006e60:	6833      	ldr	r3, [r6, #0]
 8006e62:	6825      	ldr	r5, [r4, #0]
 8006e64:	6961      	ldr	r1, [r4, #20]
 8006e66:	1d18      	adds	r0, r3, #4
 8006e68:	6030      	str	r0, [r6, #0]
 8006e6a:	062e      	lsls	r6, r5, #24
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	d501      	bpl.n	8006e74 <_printf_i+0x1c0>
 8006e70:	6019      	str	r1, [r3, #0]
 8006e72:	e002      	b.n	8006e7a <_printf_i+0x1c6>
 8006e74:	0668      	lsls	r0, r5, #25
 8006e76:	d5fb      	bpl.n	8006e70 <_printf_i+0x1bc>
 8006e78:	8019      	strh	r1, [r3, #0]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	4616      	mov	r6, r2
 8006e80:	e7bc      	b.n	8006dfc <_printf_i+0x148>
 8006e82:	6833      	ldr	r3, [r6, #0]
 8006e84:	1d1a      	adds	r2, r3, #4
 8006e86:	6032      	str	r2, [r6, #0]
 8006e88:	681e      	ldr	r6, [r3, #0]
 8006e8a:	6862      	ldr	r2, [r4, #4]
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f7f9 f99e 	bl	80001d0 <memchr>
 8006e94:	b108      	cbz	r0, 8006e9a <_printf_i+0x1e6>
 8006e96:	1b80      	subs	r0, r0, r6
 8006e98:	6060      	str	r0, [r4, #4]
 8006e9a:	6863      	ldr	r3, [r4, #4]
 8006e9c:	6123      	str	r3, [r4, #16]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ea4:	e7aa      	b.n	8006dfc <_printf_i+0x148>
 8006ea6:	6923      	ldr	r3, [r4, #16]
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	4649      	mov	r1, r9
 8006eac:	4640      	mov	r0, r8
 8006eae:	47d0      	blx	sl
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d0ad      	beq.n	8006e10 <_printf_i+0x15c>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	079b      	lsls	r3, r3, #30
 8006eb8:	d413      	bmi.n	8006ee2 <_printf_i+0x22e>
 8006eba:	68e0      	ldr	r0, [r4, #12]
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	4298      	cmp	r0, r3
 8006ec0:	bfb8      	it	lt
 8006ec2:	4618      	movlt	r0, r3
 8006ec4:	e7a6      	b.n	8006e14 <_printf_i+0x160>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4632      	mov	r2, r6
 8006eca:	4649      	mov	r1, r9
 8006ecc:	4640      	mov	r0, r8
 8006ece:	47d0      	blx	sl
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d09d      	beq.n	8006e10 <_printf_i+0x15c>
 8006ed4:	3501      	adds	r5, #1
 8006ed6:	68e3      	ldr	r3, [r4, #12]
 8006ed8:	9903      	ldr	r1, [sp, #12]
 8006eda:	1a5b      	subs	r3, r3, r1
 8006edc:	42ab      	cmp	r3, r5
 8006ede:	dcf2      	bgt.n	8006ec6 <_printf_i+0x212>
 8006ee0:	e7eb      	b.n	8006eba <_printf_i+0x206>
 8006ee2:	2500      	movs	r5, #0
 8006ee4:	f104 0619 	add.w	r6, r4, #25
 8006ee8:	e7f5      	b.n	8006ed6 <_printf_i+0x222>
 8006eea:	bf00      	nop
 8006eec:	0800a6c5 	.word	0x0800a6c5
 8006ef0:	0800a6d6 	.word	0x0800a6d6

08006ef4 <std>:
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	b510      	push	{r4, lr}
 8006ef8:	4604      	mov	r4, r0
 8006efa:	e9c0 3300 	strd	r3, r3, [r0]
 8006efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f02:	6083      	str	r3, [r0, #8]
 8006f04:	8181      	strh	r1, [r0, #12]
 8006f06:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f08:	81c2      	strh	r2, [r0, #14]
 8006f0a:	6183      	str	r3, [r0, #24]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	2208      	movs	r2, #8
 8006f10:	305c      	adds	r0, #92	@ 0x5c
 8006f12:	f000 f914 	bl	800713e <memset>
 8006f16:	4b0d      	ldr	r3, [pc, #52]	@ (8006f4c <std+0x58>)
 8006f18:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f50 <std+0x5c>)
 8006f1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f54 <std+0x60>)
 8006f20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f22:	4b0d      	ldr	r3, [pc, #52]	@ (8006f58 <std+0x64>)
 8006f24:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f26:	4b0d      	ldr	r3, [pc, #52]	@ (8006f5c <std+0x68>)
 8006f28:	6224      	str	r4, [r4, #32]
 8006f2a:	429c      	cmp	r4, r3
 8006f2c:	d006      	beq.n	8006f3c <std+0x48>
 8006f2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f32:	4294      	cmp	r4, r2
 8006f34:	d002      	beq.n	8006f3c <std+0x48>
 8006f36:	33d0      	adds	r3, #208	@ 0xd0
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	d105      	bne.n	8006f48 <std+0x54>
 8006f3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f44:	f000 b978 	b.w	8007238 <__retarget_lock_init_recursive>
 8006f48:	bd10      	pop	{r4, pc}
 8006f4a:	bf00      	nop
 8006f4c:	080070b9 	.word	0x080070b9
 8006f50:	080070db 	.word	0x080070db
 8006f54:	08007113 	.word	0x08007113
 8006f58:	08007137 	.word	0x08007137
 8006f5c:	20000758 	.word	0x20000758

08006f60 <stdio_exit_handler>:
 8006f60:	4a02      	ldr	r2, [pc, #8]	@ (8006f6c <stdio_exit_handler+0xc>)
 8006f62:	4903      	ldr	r1, [pc, #12]	@ (8006f70 <stdio_exit_handler+0x10>)
 8006f64:	4803      	ldr	r0, [pc, #12]	@ (8006f74 <stdio_exit_handler+0x14>)
 8006f66:	f000 b869 	b.w	800703c <_fwalk_sglue>
 8006f6a:	bf00      	nop
 8006f6c:	20000014 	.word	0x20000014
 8006f70:	08008bd5 	.word	0x08008bd5
 8006f74:	20000024 	.word	0x20000024

08006f78 <cleanup_stdio>:
 8006f78:	6841      	ldr	r1, [r0, #4]
 8006f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006fac <cleanup_stdio+0x34>)
 8006f7c:	4299      	cmp	r1, r3
 8006f7e:	b510      	push	{r4, lr}
 8006f80:	4604      	mov	r4, r0
 8006f82:	d001      	beq.n	8006f88 <cleanup_stdio+0x10>
 8006f84:	f001 fe26 	bl	8008bd4 <_fflush_r>
 8006f88:	68a1      	ldr	r1, [r4, #8]
 8006f8a:	4b09      	ldr	r3, [pc, #36]	@ (8006fb0 <cleanup_stdio+0x38>)
 8006f8c:	4299      	cmp	r1, r3
 8006f8e:	d002      	beq.n	8006f96 <cleanup_stdio+0x1e>
 8006f90:	4620      	mov	r0, r4
 8006f92:	f001 fe1f 	bl	8008bd4 <_fflush_r>
 8006f96:	68e1      	ldr	r1, [r4, #12]
 8006f98:	4b06      	ldr	r3, [pc, #24]	@ (8006fb4 <cleanup_stdio+0x3c>)
 8006f9a:	4299      	cmp	r1, r3
 8006f9c:	d004      	beq.n	8006fa8 <cleanup_stdio+0x30>
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa4:	f001 be16 	b.w	8008bd4 <_fflush_r>
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	bf00      	nop
 8006fac:	20000758 	.word	0x20000758
 8006fb0:	200007c0 	.word	0x200007c0
 8006fb4:	20000828 	.word	0x20000828

08006fb8 <global_stdio_init.part.0>:
 8006fb8:	b510      	push	{r4, lr}
 8006fba:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe8 <global_stdio_init.part.0+0x30>)
 8006fbc:	4c0b      	ldr	r4, [pc, #44]	@ (8006fec <global_stdio_init.part.0+0x34>)
 8006fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8006ff0 <global_stdio_init.part.0+0x38>)
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2104      	movs	r1, #4
 8006fc8:	f7ff ff94 	bl	8006ef4 <std>
 8006fcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	2109      	movs	r1, #9
 8006fd4:	f7ff ff8e 	bl	8006ef4 <std>
 8006fd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006fdc:	2202      	movs	r2, #2
 8006fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fe2:	2112      	movs	r1, #18
 8006fe4:	f7ff bf86 	b.w	8006ef4 <std>
 8006fe8:	20000890 	.word	0x20000890
 8006fec:	20000758 	.word	0x20000758
 8006ff0:	08006f61 	.word	0x08006f61

08006ff4 <__sfp_lock_acquire>:
 8006ff4:	4801      	ldr	r0, [pc, #4]	@ (8006ffc <__sfp_lock_acquire+0x8>)
 8006ff6:	f000 b920 	b.w	800723a <__retarget_lock_acquire_recursive>
 8006ffa:	bf00      	nop
 8006ffc:	20000899 	.word	0x20000899

08007000 <__sfp_lock_release>:
 8007000:	4801      	ldr	r0, [pc, #4]	@ (8007008 <__sfp_lock_release+0x8>)
 8007002:	f000 b91b 	b.w	800723c <__retarget_lock_release_recursive>
 8007006:	bf00      	nop
 8007008:	20000899 	.word	0x20000899

0800700c <__sinit>:
 800700c:	b510      	push	{r4, lr}
 800700e:	4604      	mov	r4, r0
 8007010:	f7ff fff0 	bl	8006ff4 <__sfp_lock_acquire>
 8007014:	6a23      	ldr	r3, [r4, #32]
 8007016:	b11b      	cbz	r3, 8007020 <__sinit+0x14>
 8007018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800701c:	f7ff bff0 	b.w	8007000 <__sfp_lock_release>
 8007020:	4b04      	ldr	r3, [pc, #16]	@ (8007034 <__sinit+0x28>)
 8007022:	6223      	str	r3, [r4, #32]
 8007024:	4b04      	ldr	r3, [pc, #16]	@ (8007038 <__sinit+0x2c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1f5      	bne.n	8007018 <__sinit+0xc>
 800702c:	f7ff ffc4 	bl	8006fb8 <global_stdio_init.part.0>
 8007030:	e7f2      	b.n	8007018 <__sinit+0xc>
 8007032:	bf00      	nop
 8007034:	08006f79 	.word	0x08006f79
 8007038:	20000890 	.word	0x20000890

0800703c <_fwalk_sglue>:
 800703c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007040:	4607      	mov	r7, r0
 8007042:	4688      	mov	r8, r1
 8007044:	4614      	mov	r4, r2
 8007046:	2600      	movs	r6, #0
 8007048:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800704c:	f1b9 0901 	subs.w	r9, r9, #1
 8007050:	d505      	bpl.n	800705e <_fwalk_sglue+0x22>
 8007052:	6824      	ldr	r4, [r4, #0]
 8007054:	2c00      	cmp	r4, #0
 8007056:	d1f7      	bne.n	8007048 <_fwalk_sglue+0xc>
 8007058:	4630      	mov	r0, r6
 800705a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800705e:	89ab      	ldrh	r3, [r5, #12]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d907      	bls.n	8007074 <_fwalk_sglue+0x38>
 8007064:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007068:	3301      	adds	r3, #1
 800706a:	d003      	beq.n	8007074 <_fwalk_sglue+0x38>
 800706c:	4629      	mov	r1, r5
 800706e:	4638      	mov	r0, r7
 8007070:	47c0      	blx	r8
 8007072:	4306      	orrs	r6, r0
 8007074:	3568      	adds	r5, #104	@ 0x68
 8007076:	e7e9      	b.n	800704c <_fwalk_sglue+0x10>

08007078 <siprintf>:
 8007078:	b40e      	push	{r1, r2, r3}
 800707a:	b500      	push	{lr}
 800707c:	b09c      	sub	sp, #112	@ 0x70
 800707e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007080:	9002      	str	r0, [sp, #8]
 8007082:	9006      	str	r0, [sp, #24]
 8007084:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007088:	4809      	ldr	r0, [pc, #36]	@ (80070b0 <siprintf+0x38>)
 800708a:	9107      	str	r1, [sp, #28]
 800708c:	9104      	str	r1, [sp, #16]
 800708e:	4909      	ldr	r1, [pc, #36]	@ (80070b4 <siprintf+0x3c>)
 8007090:	f853 2b04 	ldr.w	r2, [r3], #4
 8007094:	9105      	str	r1, [sp, #20]
 8007096:	6800      	ldr	r0, [r0, #0]
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	a902      	add	r1, sp, #8
 800709c:	f001 fc1a 	bl	80088d4 <_svfiprintf_r>
 80070a0:	9b02      	ldr	r3, [sp, #8]
 80070a2:	2200      	movs	r2, #0
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	b01c      	add	sp, #112	@ 0x70
 80070a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070ac:	b003      	add	sp, #12
 80070ae:	4770      	bx	lr
 80070b0:	20000020 	.word	0x20000020
 80070b4:	ffff0208 	.word	0xffff0208

080070b8 <__sread>:
 80070b8:	b510      	push	{r4, lr}
 80070ba:	460c      	mov	r4, r1
 80070bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070c0:	f000 f86c 	bl	800719c <_read_r>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	bfab      	itete	ge
 80070c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80070ca:	89a3      	ldrhlt	r3, [r4, #12]
 80070cc:	181b      	addge	r3, r3, r0
 80070ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80070d2:	bfac      	ite	ge
 80070d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80070d6:	81a3      	strhlt	r3, [r4, #12]
 80070d8:	bd10      	pop	{r4, pc}

080070da <__swrite>:
 80070da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070de:	461f      	mov	r7, r3
 80070e0:	898b      	ldrh	r3, [r1, #12]
 80070e2:	05db      	lsls	r3, r3, #23
 80070e4:	4605      	mov	r5, r0
 80070e6:	460c      	mov	r4, r1
 80070e8:	4616      	mov	r6, r2
 80070ea:	d505      	bpl.n	80070f8 <__swrite+0x1e>
 80070ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f0:	2302      	movs	r3, #2
 80070f2:	2200      	movs	r2, #0
 80070f4:	f000 f840 	bl	8007178 <_lseek_r>
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007102:	81a3      	strh	r3, [r4, #12]
 8007104:	4632      	mov	r2, r6
 8007106:	463b      	mov	r3, r7
 8007108:	4628      	mov	r0, r5
 800710a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800710e:	f000 b857 	b.w	80071c0 <_write_r>

08007112 <__sseek>:
 8007112:	b510      	push	{r4, lr}
 8007114:	460c      	mov	r4, r1
 8007116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800711a:	f000 f82d 	bl	8007178 <_lseek_r>
 800711e:	1c43      	adds	r3, r0, #1
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	bf15      	itete	ne
 8007124:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007126:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800712a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800712e:	81a3      	strheq	r3, [r4, #12]
 8007130:	bf18      	it	ne
 8007132:	81a3      	strhne	r3, [r4, #12]
 8007134:	bd10      	pop	{r4, pc}

08007136 <__sclose>:
 8007136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800713a:	f000 b80d 	b.w	8007158 <_close_r>

0800713e <memset>:
 800713e:	4402      	add	r2, r0
 8007140:	4603      	mov	r3, r0
 8007142:	4293      	cmp	r3, r2
 8007144:	d100      	bne.n	8007148 <memset+0xa>
 8007146:	4770      	bx	lr
 8007148:	f803 1b01 	strb.w	r1, [r3], #1
 800714c:	e7f9      	b.n	8007142 <memset+0x4>
	...

08007150 <_localeconv_r>:
 8007150:	4800      	ldr	r0, [pc, #0]	@ (8007154 <_localeconv_r+0x4>)
 8007152:	4770      	bx	lr
 8007154:	20000160 	.word	0x20000160

08007158 <_close_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d06      	ldr	r5, [pc, #24]	@ (8007174 <_close_r+0x1c>)
 800715c:	2300      	movs	r3, #0
 800715e:	4604      	mov	r4, r0
 8007160:	4608      	mov	r0, r1
 8007162:	602b      	str	r3, [r5, #0]
 8007164:	f7fa ff78 	bl	8002058 <_close>
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	d102      	bne.n	8007172 <_close_r+0x1a>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	b103      	cbz	r3, 8007172 <_close_r+0x1a>
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	bd38      	pop	{r3, r4, r5, pc}
 8007174:	20000894 	.word	0x20000894

08007178 <_lseek_r>:
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	4d07      	ldr	r5, [pc, #28]	@ (8007198 <_lseek_r+0x20>)
 800717c:	4604      	mov	r4, r0
 800717e:	4608      	mov	r0, r1
 8007180:	4611      	mov	r1, r2
 8007182:	2200      	movs	r2, #0
 8007184:	602a      	str	r2, [r5, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	f7fa ff8d 	bl	80020a6 <_lseek>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	d102      	bne.n	8007196 <_lseek_r+0x1e>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	b103      	cbz	r3, 8007196 <_lseek_r+0x1e>
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	20000894 	.word	0x20000894

0800719c <_read_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4d07      	ldr	r5, [pc, #28]	@ (80071bc <_read_r+0x20>)
 80071a0:	4604      	mov	r4, r0
 80071a2:	4608      	mov	r0, r1
 80071a4:	4611      	mov	r1, r2
 80071a6:	2200      	movs	r2, #0
 80071a8:	602a      	str	r2, [r5, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	f7fa ff1b 	bl	8001fe6 <_read>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d102      	bne.n	80071ba <_read_r+0x1e>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	b103      	cbz	r3, 80071ba <_read_r+0x1e>
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	20000894 	.word	0x20000894

080071c0 <_write_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4d07      	ldr	r5, [pc, #28]	@ (80071e0 <_write_r+0x20>)
 80071c4:	4604      	mov	r4, r0
 80071c6:	4608      	mov	r0, r1
 80071c8:	4611      	mov	r1, r2
 80071ca:	2200      	movs	r2, #0
 80071cc:	602a      	str	r2, [r5, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f7fa ff26 	bl	8002020 <_write>
 80071d4:	1c43      	adds	r3, r0, #1
 80071d6:	d102      	bne.n	80071de <_write_r+0x1e>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	b103      	cbz	r3, 80071de <_write_r+0x1e>
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	20000894 	.word	0x20000894

080071e4 <__errno>:
 80071e4:	4b01      	ldr	r3, [pc, #4]	@ (80071ec <__errno+0x8>)
 80071e6:	6818      	ldr	r0, [r3, #0]
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	20000020 	.word	0x20000020

080071f0 <__libc_init_array>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	4d0d      	ldr	r5, [pc, #52]	@ (8007228 <__libc_init_array+0x38>)
 80071f4:	4c0d      	ldr	r4, [pc, #52]	@ (800722c <__libc_init_array+0x3c>)
 80071f6:	1b64      	subs	r4, r4, r5
 80071f8:	10a4      	asrs	r4, r4, #2
 80071fa:	2600      	movs	r6, #0
 80071fc:	42a6      	cmp	r6, r4
 80071fe:	d109      	bne.n	8007214 <__libc_init_array+0x24>
 8007200:	4d0b      	ldr	r5, [pc, #44]	@ (8007230 <__libc_init_array+0x40>)
 8007202:	4c0c      	ldr	r4, [pc, #48]	@ (8007234 <__libc_init_array+0x44>)
 8007204:	f003 f8f8 	bl	800a3f8 <_init>
 8007208:	1b64      	subs	r4, r4, r5
 800720a:	10a4      	asrs	r4, r4, #2
 800720c:	2600      	movs	r6, #0
 800720e:	42a6      	cmp	r6, r4
 8007210:	d105      	bne.n	800721e <__libc_init_array+0x2e>
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	f855 3b04 	ldr.w	r3, [r5], #4
 8007218:	4798      	blx	r3
 800721a:	3601      	adds	r6, #1
 800721c:	e7ee      	b.n	80071fc <__libc_init_array+0xc>
 800721e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007222:	4798      	blx	r3
 8007224:	3601      	adds	r6, #1
 8007226:	e7f2      	b.n	800720e <__libc_init_array+0x1e>
 8007228:	0800abf0 	.word	0x0800abf0
 800722c:	0800abf0 	.word	0x0800abf0
 8007230:	0800abf0 	.word	0x0800abf0
 8007234:	0800abf4 	.word	0x0800abf4

08007238 <__retarget_lock_init_recursive>:
 8007238:	4770      	bx	lr

0800723a <__retarget_lock_acquire_recursive>:
 800723a:	4770      	bx	lr

0800723c <__retarget_lock_release_recursive>:
 800723c:	4770      	bx	lr
	...

08007240 <__assert_func>:
 8007240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007242:	4614      	mov	r4, r2
 8007244:	461a      	mov	r2, r3
 8007246:	4b09      	ldr	r3, [pc, #36]	@ (800726c <__assert_func+0x2c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4605      	mov	r5, r0
 800724c:	68d8      	ldr	r0, [r3, #12]
 800724e:	b954      	cbnz	r4, 8007266 <__assert_func+0x26>
 8007250:	4b07      	ldr	r3, [pc, #28]	@ (8007270 <__assert_func+0x30>)
 8007252:	461c      	mov	r4, r3
 8007254:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007258:	9100      	str	r1, [sp, #0]
 800725a:	462b      	mov	r3, r5
 800725c:	4905      	ldr	r1, [pc, #20]	@ (8007274 <__assert_func+0x34>)
 800725e:	f001 fce1 	bl	8008c24 <fiprintf>
 8007262:	f001 fd29 	bl	8008cb8 <abort>
 8007266:	4b04      	ldr	r3, [pc, #16]	@ (8007278 <__assert_func+0x38>)
 8007268:	e7f4      	b.n	8007254 <__assert_func+0x14>
 800726a:	bf00      	nop
 800726c:	20000020 	.word	0x20000020
 8007270:	0800a722 	.word	0x0800a722
 8007274:	0800a6f4 	.word	0x0800a6f4
 8007278:	0800a6e7 	.word	0x0800a6e7

0800727c <quorem>:
 800727c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	6903      	ldr	r3, [r0, #16]
 8007282:	690c      	ldr	r4, [r1, #16]
 8007284:	42a3      	cmp	r3, r4
 8007286:	4607      	mov	r7, r0
 8007288:	db7e      	blt.n	8007388 <quorem+0x10c>
 800728a:	3c01      	subs	r4, #1
 800728c:	f101 0814 	add.w	r8, r1, #20
 8007290:	00a3      	lsls	r3, r4, #2
 8007292:	f100 0514 	add.w	r5, r0, #20
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072a6:	3301      	adds	r3, #1
 80072a8:	429a      	cmp	r2, r3
 80072aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80072b2:	d32e      	bcc.n	8007312 <quorem+0x96>
 80072b4:	f04f 0a00 	mov.w	sl, #0
 80072b8:	46c4      	mov	ip, r8
 80072ba:	46ae      	mov	lr, r5
 80072bc:	46d3      	mov	fp, sl
 80072be:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072c2:	b298      	uxth	r0, r3
 80072c4:	fb06 a000 	mla	r0, r6, r0, sl
 80072c8:	0c02      	lsrs	r2, r0, #16
 80072ca:	0c1b      	lsrs	r3, r3, #16
 80072cc:	fb06 2303 	mla	r3, r6, r3, r2
 80072d0:	f8de 2000 	ldr.w	r2, [lr]
 80072d4:	b280      	uxth	r0, r0
 80072d6:	b292      	uxth	r2, r2
 80072d8:	1a12      	subs	r2, r2, r0
 80072da:	445a      	add	r2, fp
 80072dc:	f8de 0000 	ldr.w	r0, [lr]
 80072e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80072ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80072ee:	b292      	uxth	r2, r2
 80072f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80072f4:	45e1      	cmp	r9, ip
 80072f6:	f84e 2b04 	str.w	r2, [lr], #4
 80072fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80072fe:	d2de      	bcs.n	80072be <quorem+0x42>
 8007300:	9b00      	ldr	r3, [sp, #0]
 8007302:	58eb      	ldr	r3, [r5, r3]
 8007304:	b92b      	cbnz	r3, 8007312 <quorem+0x96>
 8007306:	9b01      	ldr	r3, [sp, #4]
 8007308:	3b04      	subs	r3, #4
 800730a:	429d      	cmp	r5, r3
 800730c:	461a      	mov	r2, r3
 800730e:	d32f      	bcc.n	8007370 <quorem+0xf4>
 8007310:	613c      	str	r4, [r7, #16]
 8007312:	4638      	mov	r0, r7
 8007314:	f001 f97a 	bl	800860c <__mcmp>
 8007318:	2800      	cmp	r0, #0
 800731a:	db25      	blt.n	8007368 <quorem+0xec>
 800731c:	4629      	mov	r1, r5
 800731e:	2000      	movs	r0, #0
 8007320:	f858 2b04 	ldr.w	r2, [r8], #4
 8007324:	f8d1 c000 	ldr.w	ip, [r1]
 8007328:	fa1f fe82 	uxth.w	lr, r2
 800732c:	fa1f f38c 	uxth.w	r3, ip
 8007330:	eba3 030e 	sub.w	r3, r3, lr
 8007334:	4403      	add	r3, r0
 8007336:	0c12      	lsrs	r2, r2, #16
 8007338:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800733c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007340:	b29b      	uxth	r3, r3
 8007342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007346:	45c1      	cmp	r9, r8
 8007348:	f841 3b04 	str.w	r3, [r1], #4
 800734c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007350:	d2e6      	bcs.n	8007320 <quorem+0xa4>
 8007352:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007356:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800735a:	b922      	cbnz	r2, 8007366 <quorem+0xea>
 800735c:	3b04      	subs	r3, #4
 800735e:	429d      	cmp	r5, r3
 8007360:	461a      	mov	r2, r3
 8007362:	d30b      	bcc.n	800737c <quorem+0x100>
 8007364:	613c      	str	r4, [r7, #16]
 8007366:	3601      	adds	r6, #1
 8007368:	4630      	mov	r0, r6
 800736a:	b003      	add	sp, #12
 800736c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007370:	6812      	ldr	r2, [r2, #0]
 8007372:	3b04      	subs	r3, #4
 8007374:	2a00      	cmp	r2, #0
 8007376:	d1cb      	bne.n	8007310 <quorem+0x94>
 8007378:	3c01      	subs	r4, #1
 800737a:	e7c6      	b.n	800730a <quorem+0x8e>
 800737c:	6812      	ldr	r2, [r2, #0]
 800737e:	3b04      	subs	r3, #4
 8007380:	2a00      	cmp	r2, #0
 8007382:	d1ef      	bne.n	8007364 <quorem+0xe8>
 8007384:	3c01      	subs	r4, #1
 8007386:	e7ea      	b.n	800735e <quorem+0xe2>
 8007388:	2000      	movs	r0, #0
 800738a:	e7ee      	b.n	800736a <quorem+0xee>
 800738c:	0000      	movs	r0, r0
	...

08007390 <_dtoa_r>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	69c7      	ldr	r7, [r0, #28]
 8007396:	b099      	sub	sp, #100	@ 0x64
 8007398:	ed8d 0b02 	vstr	d0, [sp, #8]
 800739c:	ec55 4b10 	vmov	r4, r5, d0
 80073a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80073a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80073a4:	4683      	mov	fp, r0
 80073a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80073a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073aa:	b97f      	cbnz	r7, 80073cc <_dtoa_r+0x3c>
 80073ac:	2010      	movs	r0, #16
 80073ae:	f000 fdfd 	bl	8007fac <malloc>
 80073b2:	4602      	mov	r2, r0
 80073b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80073b8:	b920      	cbnz	r0, 80073c4 <_dtoa_r+0x34>
 80073ba:	4ba7      	ldr	r3, [pc, #668]	@ (8007658 <_dtoa_r+0x2c8>)
 80073bc:	21ef      	movs	r1, #239	@ 0xef
 80073be:	48a7      	ldr	r0, [pc, #668]	@ (800765c <_dtoa_r+0x2cc>)
 80073c0:	f7ff ff3e 	bl	8007240 <__assert_func>
 80073c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80073c8:	6007      	str	r7, [r0, #0]
 80073ca:	60c7      	str	r7, [r0, #12]
 80073cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073d0:	6819      	ldr	r1, [r3, #0]
 80073d2:	b159      	cbz	r1, 80073ec <_dtoa_r+0x5c>
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	604a      	str	r2, [r1, #4]
 80073d8:	2301      	movs	r3, #1
 80073da:	4093      	lsls	r3, r2
 80073dc:	608b      	str	r3, [r1, #8]
 80073de:	4658      	mov	r0, fp
 80073e0:	f000 feda 	bl	8008198 <_Bfree>
 80073e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	1e2b      	subs	r3, r5, #0
 80073ee:	bfb9      	ittee	lt
 80073f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80073f4:	9303      	strlt	r3, [sp, #12]
 80073f6:	2300      	movge	r3, #0
 80073f8:	6033      	strge	r3, [r6, #0]
 80073fa:	9f03      	ldr	r7, [sp, #12]
 80073fc:	4b98      	ldr	r3, [pc, #608]	@ (8007660 <_dtoa_r+0x2d0>)
 80073fe:	bfbc      	itt	lt
 8007400:	2201      	movlt	r2, #1
 8007402:	6032      	strlt	r2, [r6, #0]
 8007404:	43bb      	bics	r3, r7
 8007406:	d112      	bne.n	800742e <_dtoa_r+0x9e>
 8007408:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800740a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007414:	4323      	orrs	r3, r4
 8007416:	f000 854d 	beq.w	8007eb4 <_dtoa_r+0xb24>
 800741a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800741c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007674 <_dtoa_r+0x2e4>
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 854f 	beq.w	8007ec4 <_dtoa_r+0xb34>
 8007426:	f10a 0303 	add.w	r3, sl, #3
 800742a:	f000 bd49 	b.w	8007ec0 <_dtoa_r+0xb30>
 800742e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	ec51 0b17 	vmov	r0, r1, d7
 8007438:	2300      	movs	r3, #0
 800743a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800743e:	f7f9 fb43 	bl	8000ac8 <__aeabi_dcmpeq>
 8007442:	4680      	mov	r8, r0
 8007444:	b158      	cbz	r0, 800745e <_dtoa_r+0xce>
 8007446:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007448:	2301      	movs	r3, #1
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800744e:	b113      	cbz	r3, 8007456 <_dtoa_r+0xc6>
 8007450:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007452:	4b84      	ldr	r3, [pc, #528]	@ (8007664 <_dtoa_r+0x2d4>)
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007678 <_dtoa_r+0x2e8>
 800745a:	f000 bd33 	b.w	8007ec4 <_dtoa_r+0xb34>
 800745e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007462:	aa16      	add	r2, sp, #88	@ 0x58
 8007464:	a917      	add	r1, sp, #92	@ 0x5c
 8007466:	4658      	mov	r0, fp
 8007468:	f001 f980 	bl	800876c <__d2b>
 800746c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007470:	4681      	mov	r9, r0
 8007472:	2e00      	cmp	r6, #0
 8007474:	d077      	beq.n	8007566 <_dtoa_r+0x1d6>
 8007476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007478:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800747c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007484:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007488:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800748c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007490:	4619      	mov	r1, r3
 8007492:	2200      	movs	r2, #0
 8007494:	4b74      	ldr	r3, [pc, #464]	@ (8007668 <_dtoa_r+0x2d8>)
 8007496:	f7f8 fef7 	bl	8000288 <__aeabi_dsub>
 800749a:	a369      	add	r3, pc, #420	@ (adr r3, 8007640 <_dtoa_r+0x2b0>)
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	f7f9 f8aa 	bl	80005f8 <__aeabi_dmul>
 80074a4:	a368      	add	r3, pc, #416	@ (adr r3, 8007648 <_dtoa_r+0x2b8>)
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	f7f8 feef 	bl	800028c <__adddf3>
 80074ae:	4604      	mov	r4, r0
 80074b0:	4630      	mov	r0, r6
 80074b2:	460d      	mov	r5, r1
 80074b4:	f7f9 f836 	bl	8000524 <__aeabi_i2d>
 80074b8:	a365      	add	r3, pc, #404	@ (adr r3, 8007650 <_dtoa_r+0x2c0>)
 80074ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074be:	f7f9 f89b 	bl	80005f8 <__aeabi_dmul>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4620      	mov	r0, r4
 80074c8:	4629      	mov	r1, r5
 80074ca:	f7f8 fedf 	bl	800028c <__adddf3>
 80074ce:	4604      	mov	r4, r0
 80074d0:	460d      	mov	r5, r1
 80074d2:	f7f9 fb41 	bl	8000b58 <__aeabi_d2iz>
 80074d6:	2200      	movs	r2, #0
 80074d8:	4607      	mov	r7, r0
 80074da:	2300      	movs	r3, #0
 80074dc:	4620      	mov	r0, r4
 80074de:	4629      	mov	r1, r5
 80074e0:	f7f9 fafc 	bl	8000adc <__aeabi_dcmplt>
 80074e4:	b140      	cbz	r0, 80074f8 <_dtoa_r+0x168>
 80074e6:	4638      	mov	r0, r7
 80074e8:	f7f9 f81c 	bl	8000524 <__aeabi_i2d>
 80074ec:	4622      	mov	r2, r4
 80074ee:	462b      	mov	r3, r5
 80074f0:	f7f9 faea 	bl	8000ac8 <__aeabi_dcmpeq>
 80074f4:	b900      	cbnz	r0, 80074f8 <_dtoa_r+0x168>
 80074f6:	3f01      	subs	r7, #1
 80074f8:	2f16      	cmp	r7, #22
 80074fa:	d851      	bhi.n	80075a0 <_dtoa_r+0x210>
 80074fc:	4b5b      	ldr	r3, [pc, #364]	@ (800766c <_dtoa_r+0x2dc>)
 80074fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800750a:	f7f9 fae7 	bl	8000adc <__aeabi_dcmplt>
 800750e:	2800      	cmp	r0, #0
 8007510:	d048      	beq.n	80075a4 <_dtoa_r+0x214>
 8007512:	3f01      	subs	r7, #1
 8007514:	2300      	movs	r3, #0
 8007516:	9312      	str	r3, [sp, #72]	@ 0x48
 8007518:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800751a:	1b9b      	subs	r3, r3, r6
 800751c:	1e5a      	subs	r2, r3, #1
 800751e:	bf44      	itt	mi
 8007520:	f1c3 0801 	rsbmi	r8, r3, #1
 8007524:	2300      	movmi	r3, #0
 8007526:	9208      	str	r2, [sp, #32]
 8007528:	bf54      	ite	pl
 800752a:	f04f 0800 	movpl.w	r8, #0
 800752e:	9308      	strmi	r3, [sp, #32]
 8007530:	2f00      	cmp	r7, #0
 8007532:	db39      	blt.n	80075a8 <_dtoa_r+0x218>
 8007534:	9b08      	ldr	r3, [sp, #32]
 8007536:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007538:	443b      	add	r3, r7
 800753a:	9308      	str	r3, [sp, #32]
 800753c:	2300      	movs	r3, #0
 800753e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007542:	2b09      	cmp	r3, #9
 8007544:	d864      	bhi.n	8007610 <_dtoa_r+0x280>
 8007546:	2b05      	cmp	r3, #5
 8007548:	bfc4      	itt	gt
 800754a:	3b04      	subgt	r3, #4
 800754c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800754e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007550:	f1a3 0302 	sub.w	r3, r3, #2
 8007554:	bfcc      	ite	gt
 8007556:	2400      	movgt	r4, #0
 8007558:	2401      	movle	r4, #1
 800755a:	2b03      	cmp	r3, #3
 800755c:	d863      	bhi.n	8007626 <_dtoa_r+0x296>
 800755e:	e8df f003 	tbb	[pc, r3]
 8007562:	372a      	.short	0x372a
 8007564:	5535      	.short	0x5535
 8007566:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800756a:	441e      	add	r6, r3
 800756c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007570:	2b20      	cmp	r3, #32
 8007572:	bfc1      	itttt	gt
 8007574:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007578:	409f      	lslgt	r7, r3
 800757a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800757e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007582:	bfd6      	itet	le
 8007584:	f1c3 0320 	rsble	r3, r3, #32
 8007588:	ea47 0003 	orrgt.w	r0, r7, r3
 800758c:	fa04 f003 	lslle.w	r0, r4, r3
 8007590:	f7f8 ffb8 	bl	8000504 <__aeabi_ui2d>
 8007594:	2201      	movs	r2, #1
 8007596:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800759a:	3e01      	subs	r6, #1
 800759c:	9214      	str	r2, [sp, #80]	@ 0x50
 800759e:	e777      	b.n	8007490 <_dtoa_r+0x100>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e7b8      	b.n	8007516 <_dtoa_r+0x186>
 80075a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80075a6:	e7b7      	b.n	8007518 <_dtoa_r+0x188>
 80075a8:	427b      	negs	r3, r7
 80075aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80075ac:	2300      	movs	r3, #0
 80075ae:	eba8 0807 	sub.w	r8, r8, r7
 80075b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80075b4:	e7c4      	b.n	8007540 <_dtoa_r+0x1b0>
 80075b6:	2300      	movs	r3, #0
 80075b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075bc:	2b00      	cmp	r3, #0
 80075be:	dc35      	bgt.n	800762c <_dtoa_r+0x29c>
 80075c0:	2301      	movs	r3, #1
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	9307      	str	r3, [sp, #28]
 80075c6:	461a      	mov	r2, r3
 80075c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80075ca:	e00b      	b.n	80075e4 <_dtoa_r+0x254>
 80075cc:	2301      	movs	r3, #1
 80075ce:	e7f3      	b.n	80075b8 <_dtoa_r+0x228>
 80075d0:	2300      	movs	r3, #0
 80075d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075d6:	18fb      	adds	r3, r7, r3
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	3301      	adds	r3, #1
 80075dc:	2b01      	cmp	r3, #1
 80075de:	9307      	str	r3, [sp, #28]
 80075e0:	bfb8      	it	lt
 80075e2:	2301      	movlt	r3, #1
 80075e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80075e8:	2100      	movs	r1, #0
 80075ea:	2204      	movs	r2, #4
 80075ec:	f102 0514 	add.w	r5, r2, #20
 80075f0:	429d      	cmp	r5, r3
 80075f2:	d91f      	bls.n	8007634 <_dtoa_r+0x2a4>
 80075f4:	6041      	str	r1, [r0, #4]
 80075f6:	4658      	mov	r0, fp
 80075f8:	f000 fd8e 	bl	8008118 <_Balloc>
 80075fc:	4682      	mov	sl, r0
 80075fe:	2800      	cmp	r0, #0
 8007600:	d13c      	bne.n	800767c <_dtoa_r+0x2ec>
 8007602:	4b1b      	ldr	r3, [pc, #108]	@ (8007670 <_dtoa_r+0x2e0>)
 8007604:	4602      	mov	r2, r0
 8007606:	f240 11af 	movw	r1, #431	@ 0x1af
 800760a:	e6d8      	b.n	80073be <_dtoa_r+0x2e>
 800760c:	2301      	movs	r3, #1
 800760e:	e7e0      	b.n	80075d2 <_dtoa_r+0x242>
 8007610:	2401      	movs	r4, #1
 8007612:	2300      	movs	r3, #0
 8007614:	9309      	str	r3, [sp, #36]	@ 0x24
 8007616:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007618:	f04f 33ff 	mov.w	r3, #4294967295
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	9307      	str	r3, [sp, #28]
 8007620:	2200      	movs	r2, #0
 8007622:	2312      	movs	r3, #18
 8007624:	e7d0      	b.n	80075c8 <_dtoa_r+0x238>
 8007626:	2301      	movs	r3, #1
 8007628:	930b      	str	r3, [sp, #44]	@ 0x2c
 800762a:	e7f5      	b.n	8007618 <_dtoa_r+0x288>
 800762c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	9307      	str	r3, [sp, #28]
 8007632:	e7d7      	b.n	80075e4 <_dtoa_r+0x254>
 8007634:	3101      	adds	r1, #1
 8007636:	0052      	lsls	r2, r2, #1
 8007638:	e7d8      	b.n	80075ec <_dtoa_r+0x25c>
 800763a:	bf00      	nop
 800763c:	f3af 8000 	nop.w
 8007640:	636f4361 	.word	0x636f4361
 8007644:	3fd287a7 	.word	0x3fd287a7
 8007648:	8b60c8b3 	.word	0x8b60c8b3
 800764c:	3fc68a28 	.word	0x3fc68a28
 8007650:	509f79fb 	.word	0x509f79fb
 8007654:	3fd34413 	.word	0x3fd34413
 8007658:	0800a644 	.word	0x0800a644
 800765c:	0800a730 	.word	0x0800a730
 8007660:	7ff00000 	.word	0x7ff00000
 8007664:	0800a6c4 	.word	0x0800a6c4
 8007668:	3ff80000 	.word	0x3ff80000
 800766c:	0800a828 	.word	0x0800a828
 8007670:	0800a788 	.word	0x0800a788
 8007674:	0800a72c 	.word	0x0800a72c
 8007678:	0800a6c3 	.word	0x0800a6c3
 800767c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007680:	6018      	str	r0, [r3, #0]
 8007682:	9b07      	ldr	r3, [sp, #28]
 8007684:	2b0e      	cmp	r3, #14
 8007686:	f200 80a4 	bhi.w	80077d2 <_dtoa_r+0x442>
 800768a:	2c00      	cmp	r4, #0
 800768c:	f000 80a1 	beq.w	80077d2 <_dtoa_r+0x442>
 8007690:	2f00      	cmp	r7, #0
 8007692:	dd33      	ble.n	80076fc <_dtoa_r+0x36c>
 8007694:	4bad      	ldr	r3, [pc, #692]	@ (800794c <_dtoa_r+0x5bc>)
 8007696:	f007 020f 	and.w	r2, r7, #15
 800769a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800769e:	ed93 7b00 	vldr	d7, [r3]
 80076a2:	05f8      	lsls	r0, r7, #23
 80076a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80076a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80076ac:	d516      	bpl.n	80076dc <_dtoa_r+0x34c>
 80076ae:	4ba8      	ldr	r3, [pc, #672]	@ (8007950 <_dtoa_r+0x5c0>)
 80076b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076b8:	f7f9 f8c8 	bl	800084c <__aeabi_ddiv>
 80076bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076c0:	f004 040f 	and.w	r4, r4, #15
 80076c4:	2603      	movs	r6, #3
 80076c6:	4da2      	ldr	r5, [pc, #648]	@ (8007950 <_dtoa_r+0x5c0>)
 80076c8:	b954      	cbnz	r4, 80076e0 <_dtoa_r+0x350>
 80076ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076d2:	f7f9 f8bb 	bl	800084c <__aeabi_ddiv>
 80076d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076da:	e028      	b.n	800772e <_dtoa_r+0x39e>
 80076dc:	2602      	movs	r6, #2
 80076de:	e7f2      	b.n	80076c6 <_dtoa_r+0x336>
 80076e0:	07e1      	lsls	r1, r4, #31
 80076e2:	d508      	bpl.n	80076f6 <_dtoa_r+0x366>
 80076e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076ec:	f7f8 ff84 	bl	80005f8 <__aeabi_dmul>
 80076f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076f4:	3601      	adds	r6, #1
 80076f6:	1064      	asrs	r4, r4, #1
 80076f8:	3508      	adds	r5, #8
 80076fa:	e7e5      	b.n	80076c8 <_dtoa_r+0x338>
 80076fc:	f000 80d2 	beq.w	80078a4 <_dtoa_r+0x514>
 8007700:	427c      	negs	r4, r7
 8007702:	4b92      	ldr	r3, [pc, #584]	@ (800794c <_dtoa_r+0x5bc>)
 8007704:	4d92      	ldr	r5, [pc, #584]	@ (8007950 <_dtoa_r+0x5c0>)
 8007706:	f004 020f 	and.w	r2, r4, #15
 800770a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800770e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007712:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007716:	f7f8 ff6f 	bl	80005f8 <__aeabi_dmul>
 800771a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800771e:	1124      	asrs	r4, r4, #4
 8007720:	2300      	movs	r3, #0
 8007722:	2602      	movs	r6, #2
 8007724:	2c00      	cmp	r4, #0
 8007726:	f040 80b2 	bne.w	800788e <_dtoa_r+0x4fe>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1d3      	bne.n	80076d6 <_dtoa_r+0x346>
 800772e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007730:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 80b7 	beq.w	80078a8 <_dtoa_r+0x518>
 800773a:	4b86      	ldr	r3, [pc, #536]	@ (8007954 <_dtoa_r+0x5c4>)
 800773c:	2200      	movs	r2, #0
 800773e:	4620      	mov	r0, r4
 8007740:	4629      	mov	r1, r5
 8007742:	f7f9 f9cb 	bl	8000adc <__aeabi_dcmplt>
 8007746:	2800      	cmp	r0, #0
 8007748:	f000 80ae 	beq.w	80078a8 <_dtoa_r+0x518>
 800774c:	9b07      	ldr	r3, [sp, #28]
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 80aa 	beq.w	80078a8 <_dtoa_r+0x518>
 8007754:	9b00      	ldr	r3, [sp, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	dd37      	ble.n	80077ca <_dtoa_r+0x43a>
 800775a:	1e7b      	subs	r3, r7, #1
 800775c:	9304      	str	r3, [sp, #16]
 800775e:	4620      	mov	r0, r4
 8007760:	4b7d      	ldr	r3, [pc, #500]	@ (8007958 <_dtoa_r+0x5c8>)
 8007762:	2200      	movs	r2, #0
 8007764:	4629      	mov	r1, r5
 8007766:	f7f8 ff47 	bl	80005f8 <__aeabi_dmul>
 800776a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800776e:	9c00      	ldr	r4, [sp, #0]
 8007770:	3601      	adds	r6, #1
 8007772:	4630      	mov	r0, r6
 8007774:	f7f8 fed6 	bl	8000524 <__aeabi_i2d>
 8007778:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800777c:	f7f8 ff3c 	bl	80005f8 <__aeabi_dmul>
 8007780:	4b76      	ldr	r3, [pc, #472]	@ (800795c <_dtoa_r+0x5cc>)
 8007782:	2200      	movs	r2, #0
 8007784:	f7f8 fd82 	bl	800028c <__adddf3>
 8007788:	4605      	mov	r5, r0
 800778a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800778e:	2c00      	cmp	r4, #0
 8007790:	f040 808d 	bne.w	80078ae <_dtoa_r+0x51e>
 8007794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007798:	4b71      	ldr	r3, [pc, #452]	@ (8007960 <_dtoa_r+0x5d0>)
 800779a:	2200      	movs	r2, #0
 800779c:	f7f8 fd74 	bl	8000288 <__aeabi_dsub>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077a8:	462a      	mov	r2, r5
 80077aa:	4633      	mov	r3, r6
 80077ac:	f7f9 f9b4 	bl	8000b18 <__aeabi_dcmpgt>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	f040 828b 	bne.w	8007ccc <_dtoa_r+0x93c>
 80077b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ba:	462a      	mov	r2, r5
 80077bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80077c0:	f7f9 f98c 	bl	8000adc <__aeabi_dcmplt>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	f040 8128 	bne.w	8007a1a <_dtoa_r+0x68a>
 80077ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80077ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80077d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f2c0 815a 	blt.w	8007a8e <_dtoa_r+0x6fe>
 80077da:	2f0e      	cmp	r7, #14
 80077dc:	f300 8157 	bgt.w	8007a8e <_dtoa_r+0x6fe>
 80077e0:	4b5a      	ldr	r3, [pc, #360]	@ (800794c <_dtoa_r+0x5bc>)
 80077e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077e6:	ed93 7b00 	vldr	d7, [r3]
 80077ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	ed8d 7b00 	vstr	d7, [sp]
 80077f2:	da03      	bge.n	80077fc <_dtoa_r+0x46c>
 80077f4:	9b07      	ldr	r3, [sp, #28]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f340 8101 	ble.w	80079fe <_dtoa_r+0x66e>
 80077fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007800:	4656      	mov	r6, sl
 8007802:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007806:	4620      	mov	r0, r4
 8007808:	4629      	mov	r1, r5
 800780a:	f7f9 f81f 	bl	800084c <__aeabi_ddiv>
 800780e:	f7f9 f9a3 	bl	8000b58 <__aeabi_d2iz>
 8007812:	4680      	mov	r8, r0
 8007814:	f7f8 fe86 	bl	8000524 <__aeabi_i2d>
 8007818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800781c:	f7f8 feec 	bl	80005f8 <__aeabi_dmul>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	4620      	mov	r0, r4
 8007826:	4629      	mov	r1, r5
 8007828:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800782c:	f7f8 fd2c 	bl	8000288 <__aeabi_dsub>
 8007830:	f806 4b01 	strb.w	r4, [r6], #1
 8007834:	9d07      	ldr	r5, [sp, #28]
 8007836:	eba6 040a 	sub.w	r4, r6, sl
 800783a:	42a5      	cmp	r5, r4
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	f040 8117 	bne.w	8007a72 <_dtoa_r+0x6e2>
 8007844:	f7f8 fd22 	bl	800028c <__adddf3>
 8007848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800784c:	4604      	mov	r4, r0
 800784e:	460d      	mov	r5, r1
 8007850:	f7f9 f962 	bl	8000b18 <__aeabi_dcmpgt>
 8007854:	2800      	cmp	r0, #0
 8007856:	f040 80f9 	bne.w	8007a4c <_dtoa_r+0x6bc>
 800785a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800785e:	4620      	mov	r0, r4
 8007860:	4629      	mov	r1, r5
 8007862:	f7f9 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 8007866:	b118      	cbz	r0, 8007870 <_dtoa_r+0x4e0>
 8007868:	f018 0f01 	tst.w	r8, #1
 800786c:	f040 80ee 	bne.w	8007a4c <_dtoa_r+0x6bc>
 8007870:	4649      	mov	r1, r9
 8007872:	4658      	mov	r0, fp
 8007874:	f000 fc90 	bl	8008198 <_Bfree>
 8007878:	2300      	movs	r3, #0
 800787a:	7033      	strb	r3, [r6, #0]
 800787c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800787e:	3701      	adds	r7, #1
 8007880:	601f      	str	r7, [r3, #0]
 8007882:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 831d 	beq.w	8007ec4 <_dtoa_r+0xb34>
 800788a:	601e      	str	r6, [r3, #0]
 800788c:	e31a      	b.n	8007ec4 <_dtoa_r+0xb34>
 800788e:	07e2      	lsls	r2, r4, #31
 8007890:	d505      	bpl.n	800789e <_dtoa_r+0x50e>
 8007892:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007896:	f7f8 feaf 	bl	80005f8 <__aeabi_dmul>
 800789a:	3601      	adds	r6, #1
 800789c:	2301      	movs	r3, #1
 800789e:	1064      	asrs	r4, r4, #1
 80078a0:	3508      	adds	r5, #8
 80078a2:	e73f      	b.n	8007724 <_dtoa_r+0x394>
 80078a4:	2602      	movs	r6, #2
 80078a6:	e742      	b.n	800772e <_dtoa_r+0x39e>
 80078a8:	9c07      	ldr	r4, [sp, #28]
 80078aa:	9704      	str	r7, [sp, #16]
 80078ac:	e761      	b.n	8007772 <_dtoa_r+0x3e2>
 80078ae:	4b27      	ldr	r3, [pc, #156]	@ (800794c <_dtoa_r+0x5bc>)
 80078b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078ba:	4454      	add	r4, sl
 80078bc:	2900      	cmp	r1, #0
 80078be:	d053      	beq.n	8007968 <_dtoa_r+0x5d8>
 80078c0:	4928      	ldr	r1, [pc, #160]	@ (8007964 <_dtoa_r+0x5d4>)
 80078c2:	2000      	movs	r0, #0
 80078c4:	f7f8 ffc2 	bl	800084c <__aeabi_ddiv>
 80078c8:	4633      	mov	r3, r6
 80078ca:	462a      	mov	r2, r5
 80078cc:	f7f8 fcdc 	bl	8000288 <__aeabi_dsub>
 80078d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078d4:	4656      	mov	r6, sl
 80078d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078da:	f7f9 f93d 	bl	8000b58 <__aeabi_d2iz>
 80078de:	4605      	mov	r5, r0
 80078e0:	f7f8 fe20 	bl	8000524 <__aeabi_i2d>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ec:	f7f8 fccc 	bl	8000288 <__aeabi_dsub>
 80078f0:	3530      	adds	r5, #48	@ 0x30
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078fa:	f806 5b01 	strb.w	r5, [r6], #1
 80078fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007902:	f7f9 f8eb 	bl	8000adc <__aeabi_dcmplt>
 8007906:	2800      	cmp	r0, #0
 8007908:	d171      	bne.n	80079ee <_dtoa_r+0x65e>
 800790a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800790e:	4911      	ldr	r1, [pc, #68]	@ (8007954 <_dtoa_r+0x5c4>)
 8007910:	2000      	movs	r0, #0
 8007912:	f7f8 fcb9 	bl	8000288 <__aeabi_dsub>
 8007916:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800791a:	f7f9 f8df 	bl	8000adc <__aeabi_dcmplt>
 800791e:	2800      	cmp	r0, #0
 8007920:	f040 8095 	bne.w	8007a4e <_dtoa_r+0x6be>
 8007924:	42a6      	cmp	r6, r4
 8007926:	f43f af50 	beq.w	80077ca <_dtoa_r+0x43a>
 800792a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800792e:	4b0a      	ldr	r3, [pc, #40]	@ (8007958 <_dtoa_r+0x5c8>)
 8007930:	2200      	movs	r2, #0
 8007932:	f7f8 fe61 	bl	80005f8 <__aeabi_dmul>
 8007936:	4b08      	ldr	r3, [pc, #32]	@ (8007958 <_dtoa_r+0x5c8>)
 8007938:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800793c:	2200      	movs	r2, #0
 800793e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007942:	f7f8 fe59 	bl	80005f8 <__aeabi_dmul>
 8007946:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800794a:	e7c4      	b.n	80078d6 <_dtoa_r+0x546>
 800794c:	0800a828 	.word	0x0800a828
 8007950:	0800a800 	.word	0x0800a800
 8007954:	3ff00000 	.word	0x3ff00000
 8007958:	40240000 	.word	0x40240000
 800795c:	401c0000 	.word	0x401c0000
 8007960:	40140000 	.word	0x40140000
 8007964:	3fe00000 	.word	0x3fe00000
 8007968:	4631      	mov	r1, r6
 800796a:	4628      	mov	r0, r5
 800796c:	f7f8 fe44 	bl	80005f8 <__aeabi_dmul>
 8007970:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007974:	9415      	str	r4, [sp, #84]	@ 0x54
 8007976:	4656      	mov	r6, sl
 8007978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800797c:	f7f9 f8ec 	bl	8000b58 <__aeabi_d2iz>
 8007980:	4605      	mov	r5, r0
 8007982:	f7f8 fdcf 	bl	8000524 <__aeabi_i2d>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800798e:	f7f8 fc7b 	bl	8000288 <__aeabi_dsub>
 8007992:	3530      	adds	r5, #48	@ 0x30
 8007994:	f806 5b01 	strb.w	r5, [r6], #1
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	42a6      	cmp	r6, r4
 800799e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079a2:	f04f 0200 	mov.w	r2, #0
 80079a6:	d124      	bne.n	80079f2 <_dtoa_r+0x662>
 80079a8:	4bac      	ldr	r3, [pc, #688]	@ (8007c5c <_dtoa_r+0x8cc>)
 80079aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80079ae:	f7f8 fc6d 	bl	800028c <__adddf3>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ba:	f7f9 f8ad 	bl	8000b18 <__aeabi_dcmpgt>
 80079be:	2800      	cmp	r0, #0
 80079c0:	d145      	bne.n	8007a4e <_dtoa_r+0x6be>
 80079c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079c6:	49a5      	ldr	r1, [pc, #660]	@ (8007c5c <_dtoa_r+0x8cc>)
 80079c8:	2000      	movs	r0, #0
 80079ca:	f7f8 fc5d 	bl	8000288 <__aeabi_dsub>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079d6:	f7f9 f881 	bl	8000adc <__aeabi_dcmplt>
 80079da:	2800      	cmp	r0, #0
 80079dc:	f43f aef5 	beq.w	80077ca <_dtoa_r+0x43a>
 80079e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80079e2:	1e73      	subs	r3, r6, #1
 80079e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80079e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079ea:	2b30      	cmp	r3, #48	@ 0x30
 80079ec:	d0f8      	beq.n	80079e0 <_dtoa_r+0x650>
 80079ee:	9f04      	ldr	r7, [sp, #16]
 80079f0:	e73e      	b.n	8007870 <_dtoa_r+0x4e0>
 80079f2:	4b9b      	ldr	r3, [pc, #620]	@ (8007c60 <_dtoa_r+0x8d0>)
 80079f4:	f7f8 fe00 	bl	80005f8 <__aeabi_dmul>
 80079f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079fc:	e7bc      	b.n	8007978 <_dtoa_r+0x5e8>
 80079fe:	d10c      	bne.n	8007a1a <_dtoa_r+0x68a>
 8007a00:	4b98      	ldr	r3, [pc, #608]	@ (8007c64 <_dtoa_r+0x8d4>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a08:	f7f8 fdf6 	bl	80005f8 <__aeabi_dmul>
 8007a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a10:	f7f9 f878 	bl	8000b04 <__aeabi_dcmpge>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	f000 8157 	beq.w	8007cc8 <_dtoa_r+0x938>
 8007a1a:	2400      	movs	r4, #0
 8007a1c:	4625      	mov	r5, r4
 8007a1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a20:	43db      	mvns	r3, r3
 8007a22:	9304      	str	r3, [sp, #16]
 8007a24:	4656      	mov	r6, sl
 8007a26:	2700      	movs	r7, #0
 8007a28:	4621      	mov	r1, r4
 8007a2a:	4658      	mov	r0, fp
 8007a2c:	f000 fbb4 	bl	8008198 <_Bfree>
 8007a30:	2d00      	cmp	r5, #0
 8007a32:	d0dc      	beq.n	80079ee <_dtoa_r+0x65e>
 8007a34:	b12f      	cbz	r7, 8007a42 <_dtoa_r+0x6b2>
 8007a36:	42af      	cmp	r7, r5
 8007a38:	d003      	beq.n	8007a42 <_dtoa_r+0x6b2>
 8007a3a:	4639      	mov	r1, r7
 8007a3c:	4658      	mov	r0, fp
 8007a3e:	f000 fbab 	bl	8008198 <_Bfree>
 8007a42:	4629      	mov	r1, r5
 8007a44:	4658      	mov	r0, fp
 8007a46:	f000 fba7 	bl	8008198 <_Bfree>
 8007a4a:	e7d0      	b.n	80079ee <_dtoa_r+0x65e>
 8007a4c:	9704      	str	r7, [sp, #16]
 8007a4e:	4633      	mov	r3, r6
 8007a50:	461e      	mov	r6, r3
 8007a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a56:	2a39      	cmp	r2, #57	@ 0x39
 8007a58:	d107      	bne.n	8007a6a <_dtoa_r+0x6da>
 8007a5a:	459a      	cmp	sl, r3
 8007a5c:	d1f8      	bne.n	8007a50 <_dtoa_r+0x6c0>
 8007a5e:	9a04      	ldr	r2, [sp, #16]
 8007a60:	3201      	adds	r2, #1
 8007a62:	9204      	str	r2, [sp, #16]
 8007a64:	2230      	movs	r2, #48	@ 0x30
 8007a66:	f88a 2000 	strb.w	r2, [sl]
 8007a6a:	781a      	ldrb	r2, [r3, #0]
 8007a6c:	3201      	adds	r2, #1
 8007a6e:	701a      	strb	r2, [r3, #0]
 8007a70:	e7bd      	b.n	80079ee <_dtoa_r+0x65e>
 8007a72:	4b7b      	ldr	r3, [pc, #492]	@ (8007c60 <_dtoa_r+0x8d0>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	f7f8 fdbf 	bl	80005f8 <__aeabi_dmul>
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4604      	mov	r4, r0
 8007a80:	460d      	mov	r5, r1
 8007a82:	f7f9 f821 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	f43f aebb 	beq.w	8007802 <_dtoa_r+0x472>
 8007a8c:	e6f0      	b.n	8007870 <_dtoa_r+0x4e0>
 8007a8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007a90:	2a00      	cmp	r2, #0
 8007a92:	f000 80db 	beq.w	8007c4c <_dtoa_r+0x8bc>
 8007a96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a98:	2a01      	cmp	r2, #1
 8007a9a:	f300 80bf 	bgt.w	8007c1c <_dtoa_r+0x88c>
 8007a9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007aa0:	2a00      	cmp	r2, #0
 8007aa2:	f000 80b7 	beq.w	8007c14 <_dtoa_r+0x884>
 8007aa6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007aaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007aac:	4646      	mov	r6, r8
 8007aae:	9a08      	ldr	r2, [sp, #32]
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	441a      	add	r2, r3
 8007ab4:	4658      	mov	r0, fp
 8007ab6:	4498      	add	r8, r3
 8007ab8:	9208      	str	r2, [sp, #32]
 8007aba:	f000 fc21 	bl	8008300 <__i2b>
 8007abe:	4605      	mov	r5, r0
 8007ac0:	b15e      	cbz	r6, 8007ada <_dtoa_r+0x74a>
 8007ac2:	9b08      	ldr	r3, [sp, #32]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	dd08      	ble.n	8007ada <_dtoa_r+0x74a>
 8007ac8:	42b3      	cmp	r3, r6
 8007aca:	9a08      	ldr	r2, [sp, #32]
 8007acc:	bfa8      	it	ge
 8007ace:	4633      	movge	r3, r6
 8007ad0:	eba8 0803 	sub.w	r8, r8, r3
 8007ad4:	1af6      	subs	r6, r6, r3
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	9308      	str	r3, [sp, #32]
 8007ada:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007adc:	b1f3      	cbz	r3, 8007b1c <_dtoa_r+0x78c>
 8007ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 80b7 	beq.w	8007c54 <_dtoa_r+0x8c4>
 8007ae6:	b18c      	cbz	r4, 8007b0c <_dtoa_r+0x77c>
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4622      	mov	r2, r4
 8007aec:	4658      	mov	r0, fp
 8007aee:	f000 fcc7 	bl	8008480 <__pow5mult>
 8007af2:	464a      	mov	r2, r9
 8007af4:	4601      	mov	r1, r0
 8007af6:	4605      	mov	r5, r0
 8007af8:	4658      	mov	r0, fp
 8007afa:	f000 fc17 	bl	800832c <__multiply>
 8007afe:	4649      	mov	r1, r9
 8007b00:	9004      	str	r0, [sp, #16]
 8007b02:	4658      	mov	r0, fp
 8007b04:	f000 fb48 	bl	8008198 <_Bfree>
 8007b08:	9b04      	ldr	r3, [sp, #16]
 8007b0a:	4699      	mov	r9, r3
 8007b0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b0e:	1b1a      	subs	r2, r3, r4
 8007b10:	d004      	beq.n	8007b1c <_dtoa_r+0x78c>
 8007b12:	4649      	mov	r1, r9
 8007b14:	4658      	mov	r0, fp
 8007b16:	f000 fcb3 	bl	8008480 <__pow5mult>
 8007b1a:	4681      	mov	r9, r0
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	4658      	mov	r0, fp
 8007b20:	f000 fbee 	bl	8008300 <__i2b>
 8007b24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b26:	4604      	mov	r4, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 81cf 	beq.w	8007ecc <_dtoa_r+0xb3c>
 8007b2e:	461a      	mov	r2, r3
 8007b30:	4601      	mov	r1, r0
 8007b32:	4658      	mov	r0, fp
 8007b34:	f000 fca4 	bl	8008480 <__pow5mult>
 8007b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	f300 8095 	bgt.w	8007c6c <_dtoa_r+0x8dc>
 8007b42:	9b02      	ldr	r3, [sp, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f040 8087 	bne.w	8007c58 <_dtoa_r+0x8c8>
 8007b4a:	9b03      	ldr	r3, [sp, #12]
 8007b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f040 8089 	bne.w	8007c68 <_dtoa_r+0x8d8>
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b5c:	0d1b      	lsrs	r3, r3, #20
 8007b5e:	051b      	lsls	r3, r3, #20
 8007b60:	b12b      	cbz	r3, 8007b6e <_dtoa_r+0x7de>
 8007b62:	9b08      	ldr	r3, [sp, #32]
 8007b64:	3301      	adds	r3, #1
 8007b66:	9308      	str	r3, [sp, #32]
 8007b68:	f108 0801 	add.w	r8, r8, #1
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 81b0 	beq.w	8007ed8 <_dtoa_r+0xb48>
 8007b78:	6923      	ldr	r3, [r4, #16]
 8007b7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b7e:	6918      	ldr	r0, [r3, #16]
 8007b80:	f000 fb72 	bl	8008268 <__hi0bits>
 8007b84:	f1c0 0020 	rsb	r0, r0, #32
 8007b88:	9b08      	ldr	r3, [sp, #32]
 8007b8a:	4418      	add	r0, r3
 8007b8c:	f010 001f 	ands.w	r0, r0, #31
 8007b90:	d077      	beq.n	8007c82 <_dtoa_r+0x8f2>
 8007b92:	f1c0 0320 	rsb	r3, r0, #32
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	dd6b      	ble.n	8007c72 <_dtoa_r+0x8e2>
 8007b9a:	9b08      	ldr	r3, [sp, #32]
 8007b9c:	f1c0 001c 	rsb	r0, r0, #28
 8007ba0:	4403      	add	r3, r0
 8007ba2:	4480      	add	r8, r0
 8007ba4:	4406      	add	r6, r0
 8007ba6:	9308      	str	r3, [sp, #32]
 8007ba8:	f1b8 0f00 	cmp.w	r8, #0
 8007bac:	dd05      	ble.n	8007bba <_dtoa_r+0x82a>
 8007bae:	4649      	mov	r1, r9
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	4658      	mov	r0, fp
 8007bb4:	f000 fcbe 	bl	8008534 <__lshift>
 8007bb8:	4681      	mov	r9, r0
 8007bba:	9b08      	ldr	r3, [sp, #32]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	dd05      	ble.n	8007bcc <_dtoa_r+0x83c>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	4658      	mov	r0, fp
 8007bc6:	f000 fcb5 	bl	8008534 <__lshift>
 8007bca:	4604      	mov	r4, r0
 8007bcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d059      	beq.n	8007c86 <_dtoa_r+0x8f6>
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4648      	mov	r0, r9
 8007bd6:	f000 fd19 	bl	800860c <__mcmp>
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	da53      	bge.n	8007c86 <_dtoa_r+0x8f6>
 8007bde:	1e7b      	subs	r3, r7, #1
 8007be0:	9304      	str	r3, [sp, #16]
 8007be2:	4649      	mov	r1, r9
 8007be4:	2300      	movs	r3, #0
 8007be6:	220a      	movs	r2, #10
 8007be8:	4658      	mov	r0, fp
 8007bea:	f000 faf7 	bl	80081dc <__multadd>
 8007bee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bf0:	4681      	mov	r9, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 8172 	beq.w	8007edc <_dtoa_r+0xb4c>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	220a      	movs	r2, #10
 8007bfe:	4658      	mov	r0, fp
 8007c00:	f000 faec 	bl	80081dc <__multadd>
 8007c04:	9b00      	ldr	r3, [sp, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	4605      	mov	r5, r0
 8007c0a:	dc67      	bgt.n	8007cdc <_dtoa_r+0x94c>
 8007c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	dc41      	bgt.n	8007c96 <_dtoa_r+0x906>
 8007c12:	e063      	b.n	8007cdc <_dtoa_r+0x94c>
 8007c14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007c1a:	e746      	b.n	8007aaa <_dtoa_r+0x71a>
 8007c1c:	9b07      	ldr	r3, [sp, #28]
 8007c1e:	1e5c      	subs	r4, r3, #1
 8007c20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c22:	42a3      	cmp	r3, r4
 8007c24:	bfbf      	itttt	lt
 8007c26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007c28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007c2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007c2c:	1ae3      	sublt	r3, r4, r3
 8007c2e:	bfb4      	ite	lt
 8007c30:	18d2      	addlt	r2, r2, r3
 8007c32:	1b1c      	subge	r4, r3, r4
 8007c34:	9b07      	ldr	r3, [sp, #28]
 8007c36:	bfbc      	itt	lt
 8007c38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007c3a:	2400      	movlt	r4, #0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	bfb5      	itete	lt
 8007c40:	eba8 0603 	sublt.w	r6, r8, r3
 8007c44:	9b07      	ldrge	r3, [sp, #28]
 8007c46:	2300      	movlt	r3, #0
 8007c48:	4646      	movge	r6, r8
 8007c4a:	e730      	b.n	8007aae <_dtoa_r+0x71e>
 8007c4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007c50:	4646      	mov	r6, r8
 8007c52:	e735      	b.n	8007ac0 <_dtoa_r+0x730>
 8007c54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c56:	e75c      	b.n	8007b12 <_dtoa_r+0x782>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	e788      	b.n	8007b6e <_dtoa_r+0x7de>
 8007c5c:	3fe00000 	.word	0x3fe00000
 8007c60:	40240000 	.word	0x40240000
 8007c64:	40140000 	.word	0x40140000
 8007c68:	9b02      	ldr	r3, [sp, #8]
 8007c6a:	e780      	b.n	8007b6e <_dtoa_r+0x7de>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c70:	e782      	b.n	8007b78 <_dtoa_r+0x7e8>
 8007c72:	d099      	beq.n	8007ba8 <_dtoa_r+0x818>
 8007c74:	9a08      	ldr	r2, [sp, #32]
 8007c76:	331c      	adds	r3, #28
 8007c78:	441a      	add	r2, r3
 8007c7a:	4498      	add	r8, r3
 8007c7c:	441e      	add	r6, r3
 8007c7e:	9208      	str	r2, [sp, #32]
 8007c80:	e792      	b.n	8007ba8 <_dtoa_r+0x818>
 8007c82:	4603      	mov	r3, r0
 8007c84:	e7f6      	b.n	8007c74 <_dtoa_r+0x8e4>
 8007c86:	9b07      	ldr	r3, [sp, #28]
 8007c88:	9704      	str	r7, [sp, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	dc20      	bgt.n	8007cd0 <_dtoa_r+0x940>
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	dd1e      	ble.n	8007cd4 <_dtoa_r+0x944>
 8007c96:	9b00      	ldr	r3, [sp, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f47f aec0 	bne.w	8007a1e <_dtoa_r+0x68e>
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	2205      	movs	r2, #5
 8007ca2:	4658      	mov	r0, fp
 8007ca4:	f000 fa9a 	bl	80081dc <__multadd>
 8007ca8:	4601      	mov	r1, r0
 8007caa:	4604      	mov	r4, r0
 8007cac:	4648      	mov	r0, r9
 8007cae:	f000 fcad 	bl	800860c <__mcmp>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	f77f aeb3 	ble.w	8007a1e <_dtoa_r+0x68e>
 8007cb8:	4656      	mov	r6, sl
 8007cba:	2331      	movs	r3, #49	@ 0x31
 8007cbc:	f806 3b01 	strb.w	r3, [r6], #1
 8007cc0:	9b04      	ldr	r3, [sp, #16]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	9304      	str	r3, [sp, #16]
 8007cc6:	e6ae      	b.n	8007a26 <_dtoa_r+0x696>
 8007cc8:	9c07      	ldr	r4, [sp, #28]
 8007cca:	9704      	str	r7, [sp, #16]
 8007ccc:	4625      	mov	r5, r4
 8007cce:	e7f3      	b.n	8007cb8 <_dtoa_r+0x928>
 8007cd0:	9b07      	ldr	r3, [sp, #28]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 8104 	beq.w	8007ee4 <_dtoa_r+0xb54>
 8007cdc:	2e00      	cmp	r6, #0
 8007cde:	dd05      	ble.n	8007cec <_dtoa_r+0x95c>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4632      	mov	r2, r6
 8007ce4:	4658      	mov	r0, fp
 8007ce6:	f000 fc25 	bl	8008534 <__lshift>
 8007cea:	4605      	mov	r5, r0
 8007cec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d05a      	beq.n	8007da8 <_dtoa_r+0xa18>
 8007cf2:	6869      	ldr	r1, [r5, #4]
 8007cf4:	4658      	mov	r0, fp
 8007cf6:	f000 fa0f 	bl	8008118 <_Balloc>
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	b928      	cbnz	r0, 8007d0a <_dtoa_r+0x97a>
 8007cfe:	4b84      	ldr	r3, [pc, #528]	@ (8007f10 <_dtoa_r+0xb80>)
 8007d00:	4602      	mov	r2, r0
 8007d02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d06:	f7ff bb5a 	b.w	80073be <_dtoa_r+0x2e>
 8007d0a:	692a      	ldr	r2, [r5, #16]
 8007d0c:	3202      	adds	r2, #2
 8007d0e:	0092      	lsls	r2, r2, #2
 8007d10:	f105 010c 	add.w	r1, r5, #12
 8007d14:	300c      	adds	r0, #12
 8007d16:	f000 ffc1 	bl	8008c9c <memcpy>
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	4631      	mov	r1, r6
 8007d1e:	4658      	mov	r0, fp
 8007d20:	f000 fc08 	bl	8008534 <__lshift>
 8007d24:	f10a 0301 	add.w	r3, sl, #1
 8007d28:	9307      	str	r3, [sp, #28]
 8007d2a:	9b00      	ldr	r3, [sp, #0]
 8007d2c:	4453      	add	r3, sl
 8007d2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d30:	9b02      	ldr	r3, [sp, #8]
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	462f      	mov	r7, r5
 8007d38:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d3a:	4605      	mov	r5, r0
 8007d3c:	9b07      	ldr	r3, [sp, #28]
 8007d3e:	4621      	mov	r1, r4
 8007d40:	3b01      	subs	r3, #1
 8007d42:	4648      	mov	r0, r9
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	f7ff fa99 	bl	800727c <quorem>
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	9002      	str	r0, [sp, #8]
 8007d4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d52:	4648      	mov	r0, r9
 8007d54:	f000 fc5a 	bl	800860c <__mcmp>
 8007d58:	462a      	mov	r2, r5
 8007d5a:	9008      	str	r0, [sp, #32]
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	4658      	mov	r0, fp
 8007d60:	f000 fc70 	bl	8008644 <__mdiff>
 8007d64:	68c2      	ldr	r2, [r0, #12]
 8007d66:	4606      	mov	r6, r0
 8007d68:	bb02      	cbnz	r2, 8007dac <_dtoa_r+0xa1c>
 8007d6a:	4601      	mov	r1, r0
 8007d6c:	4648      	mov	r0, r9
 8007d6e:	f000 fc4d 	bl	800860c <__mcmp>
 8007d72:	4602      	mov	r2, r0
 8007d74:	4631      	mov	r1, r6
 8007d76:	4658      	mov	r0, fp
 8007d78:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d7a:	f000 fa0d 	bl	8008198 <_Bfree>
 8007d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d82:	9e07      	ldr	r6, [sp, #28]
 8007d84:	ea43 0102 	orr.w	r1, r3, r2
 8007d88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d8a:	4319      	orrs	r1, r3
 8007d8c:	d110      	bne.n	8007db0 <_dtoa_r+0xa20>
 8007d8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d92:	d029      	beq.n	8007de8 <_dtoa_r+0xa58>
 8007d94:	9b08      	ldr	r3, [sp, #32]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	dd02      	ble.n	8007da0 <_dtoa_r+0xa10>
 8007d9a:	9b02      	ldr	r3, [sp, #8]
 8007d9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007da0:	9b00      	ldr	r3, [sp, #0]
 8007da2:	f883 8000 	strb.w	r8, [r3]
 8007da6:	e63f      	b.n	8007a28 <_dtoa_r+0x698>
 8007da8:	4628      	mov	r0, r5
 8007daa:	e7bb      	b.n	8007d24 <_dtoa_r+0x994>
 8007dac:	2201      	movs	r2, #1
 8007dae:	e7e1      	b.n	8007d74 <_dtoa_r+0x9e4>
 8007db0:	9b08      	ldr	r3, [sp, #32]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	db04      	blt.n	8007dc0 <_dtoa_r+0xa30>
 8007db6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007db8:	430b      	orrs	r3, r1
 8007dba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	d120      	bne.n	8007e02 <_dtoa_r+0xa72>
 8007dc0:	2a00      	cmp	r2, #0
 8007dc2:	dded      	ble.n	8007da0 <_dtoa_r+0xa10>
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	4658      	mov	r0, fp
 8007dca:	f000 fbb3 	bl	8008534 <__lshift>
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4681      	mov	r9, r0
 8007dd2:	f000 fc1b 	bl	800860c <__mcmp>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	dc03      	bgt.n	8007de2 <_dtoa_r+0xa52>
 8007dda:	d1e1      	bne.n	8007da0 <_dtoa_r+0xa10>
 8007ddc:	f018 0f01 	tst.w	r8, #1
 8007de0:	d0de      	beq.n	8007da0 <_dtoa_r+0xa10>
 8007de2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007de6:	d1d8      	bne.n	8007d9a <_dtoa_r+0xa0a>
 8007de8:	9a00      	ldr	r2, [sp, #0]
 8007dea:	2339      	movs	r3, #57	@ 0x39
 8007dec:	7013      	strb	r3, [r2, #0]
 8007dee:	4633      	mov	r3, r6
 8007df0:	461e      	mov	r6, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007df8:	2a39      	cmp	r2, #57	@ 0x39
 8007dfa:	d052      	beq.n	8007ea2 <_dtoa_r+0xb12>
 8007dfc:	3201      	adds	r2, #1
 8007dfe:	701a      	strb	r2, [r3, #0]
 8007e00:	e612      	b.n	8007a28 <_dtoa_r+0x698>
 8007e02:	2a00      	cmp	r2, #0
 8007e04:	dd07      	ble.n	8007e16 <_dtoa_r+0xa86>
 8007e06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e0a:	d0ed      	beq.n	8007de8 <_dtoa_r+0xa58>
 8007e0c:	9a00      	ldr	r2, [sp, #0]
 8007e0e:	f108 0301 	add.w	r3, r8, #1
 8007e12:	7013      	strb	r3, [r2, #0]
 8007e14:	e608      	b.n	8007a28 <_dtoa_r+0x698>
 8007e16:	9b07      	ldr	r3, [sp, #28]
 8007e18:	9a07      	ldr	r2, [sp, #28]
 8007e1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007e1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d028      	beq.n	8007e76 <_dtoa_r+0xae6>
 8007e24:	4649      	mov	r1, r9
 8007e26:	2300      	movs	r3, #0
 8007e28:	220a      	movs	r2, #10
 8007e2a:	4658      	mov	r0, fp
 8007e2c:	f000 f9d6 	bl	80081dc <__multadd>
 8007e30:	42af      	cmp	r7, r5
 8007e32:	4681      	mov	r9, r0
 8007e34:	f04f 0300 	mov.w	r3, #0
 8007e38:	f04f 020a 	mov.w	r2, #10
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	4658      	mov	r0, fp
 8007e40:	d107      	bne.n	8007e52 <_dtoa_r+0xac2>
 8007e42:	f000 f9cb 	bl	80081dc <__multadd>
 8007e46:	4607      	mov	r7, r0
 8007e48:	4605      	mov	r5, r0
 8007e4a:	9b07      	ldr	r3, [sp, #28]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	9307      	str	r3, [sp, #28]
 8007e50:	e774      	b.n	8007d3c <_dtoa_r+0x9ac>
 8007e52:	f000 f9c3 	bl	80081dc <__multadd>
 8007e56:	4629      	mov	r1, r5
 8007e58:	4607      	mov	r7, r0
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	220a      	movs	r2, #10
 8007e5e:	4658      	mov	r0, fp
 8007e60:	f000 f9bc 	bl	80081dc <__multadd>
 8007e64:	4605      	mov	r5, r0
 8007e66:	e7f0      	b.n	8007e4a <_dtoa_r+0xaba>
 8007e68:	9b00      	ldr	r3, [sp, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	bfcc      	ite	gt
 8007e6e:	461e      	movgt	r6, r3
 8007e70:	2601      	movle	r6, #1
 8007e72:	4456      	add	r6, sl
 8007e74:	2700      	movs	r7, #0
 8007e76:	4649      	mov	r1, r9
 8007e78:	2201      	movs	r2, #1
 8007e7a:	4658      	mov	r0, fp
 8007e7c:	f000 fb5a 	bl	8008534 <__lshift>
 8007e80:	4621      	mov	r1, r4
 8007e82:	4681      	mov	r9, r0
 8007e84:	f000 fbc2 	bl	800860c <__mcmp>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	dcb0      	bgt.n	8007dee <_dtoa_r+0xa5e>
 8007e8c:	d102      	bne.n	8007e94 <_dtoa_r+0xb04>
 8007e8e:	f018 0f01 	tst.w	r8, #1
 8007e92:	d1ac      	bne.n	8007dee <_dtoa_r+0xa5e>
 8007e94:	4633      	mov	r3, r6
 8007e96:	461e      	mov	r6, r3
 8007e98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e9c:	2a30      	cmp	r2, #48	@ 0x30
 8007e9e:	d0fa      	beq.n	8007e96 <_dtoa_r+0xb06>
 8007ea0:	e5c2      	b.n	8007a28 <_dtoa_r+0x698>
 8007ea2:	459a      	cmp	sl, r3
 8007ea4:	d1a4      	bne.n	8007df0 <_dtoa_r+0xa60>
 8007ea6:	9b04      	ldr	r3, [sp, #16]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	9304      	str	r3, [sp, #16]
 8007eac:	2331      	movs	r3, #49	@ 0x31
 8007eae:	f88a 3000 	strb.w	r3, [sl]
 8007eb2:	e5b9      	b.n	8007a28 <_dtoa_r+0x698>
 8007eb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007eb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007f14 <_dtoa_r+0xb84>
 8007eba:	b11b      	cbz	r3, 8007ec4 <_dtoa_r+0xb34>
 8007ebc:	f10a 0308 	add.w	r3, sl, #8
 8007ec0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	b019      	add	sp, #100	@ 0x64
 8007ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	f77f ae37 	ble.w	8007b42 <_dtoa_r+0x7b2>
 8007ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ed8:	2001      	movs	r0, #1
 8007eda:	e655      	b.n	8007b88 <_dtoa_r+0x7f8>
 8007edc:	9b00      	ldr	r3, [sp, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f77f aed6 	ble.w	8007c90 <_dtoa_r+0x900>
 8007ee4:	4656      	mov	r6, sl
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	4648      	mov	r0, r9
 8007eea:	f7ff f9c7 	bl	800727c <quorem>
 8007eee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ef2:	f806 8b01 	strb.w	r8, [r6], #1
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	eba6 020a 	sub.w	r2, r6, sl
 8007efc:	4293      	cmp	r3, r2
 8007efe:	ddb3      	ble.n	8007e68 <_dtoa_r+0xad8>
 8007f00:	4649      	mov	r1, r9
 8007f02:	2300      	movs	r3, #0
 8007f04:	220a      	movs	r2, #10
 8007f06:	4658      	mov	r0, fp
 8007f08:	f000 f968 	bl	80081dc <__multadd>
 8007f0c:	4681      	mov	r9, r0
 8007f0e:	e7ea      	b.n	8007ee6 <_dtoa_r+0xb56>
 8007f10:	0800a788 	.word	0x0800a788
 8007f14:	0800a723 	.word	0x0800a723

08007f18 <_free_r>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	2900      	cmp	r1, #0
 8007f1e:	d041      	beq.n	8007fa4 <_free_r+0x8c>
 8007f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f24:	1f0c      	subs	r4, r1, #4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bfb8      	it	lt
 8007f2a:	18e4      	addlt	r4, r4, r3
 8007f2c:	f000 f8e8 	bl	8008100 <__malloc_lock>
 8007f30:	4a1d      	ldr	r2, [pc, #116]	@ (8007fa8 <_free_r+0x90>)
 8007f32:	6813      	ldr	r3, [r2, #0]
 8007f34:	b933      	cbnz	r3, 8007f44 <_free_r+0x2c>
 8007f36:	6063      	str	r3, [r4, #4]
 8007f38:	6014      	str	r4, [r2, #0]
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f40:	f000 b8e4 	b.w	800810c <__malloc_unlock>
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	d908      	bls.n	8007f5a <_free_r+0x42>
 8007f48:	6820      	ldr	r0, [r4, #0]
 8007f4a:	1821      	adds	r1, r4, r0
 8007f4c:	428b      	cmp	r3, r1
 8007f4e:	bf01      	itttt	eq
 8007f50:	6819      	ldreq	r1, [r3, #0]
 8007f52:	685b      	ldreq	r3, [r3, #4]
 8007f54:	1809      	addeq	r1, r1, r0
 8007f56:	6021      	streq	r1, [r4, #0]
 8007f58:	e7ed      	b.n	8007f36 <_free_r+0x1e>
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	b10b      	cbz	r3, 8007f64 <_free_r+0x4c>
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	d9fa      	bls.n	8007f5a <_free_r+0x42>
 8007f64:	6811      	ldr	r1, [r2, #0]
 8007f66:	1850      	adds	r0, r2, r1
 8007f68:	42a0      	cmp	r0, r4
 8007f6a:	d10b      	bne.n	8007f84 <_free_r+0x6c>
 8007f6c:	6820      	ldr	r0, [r4, #0]
 8007f6e:	4401      	add	r1, r0
 8007f70:	1850      	adds	r0, r2, r1
 8007f72:	4283      	cmp	r3, r0
 8007f74:	6011      	str	r1, [r2, #0]
 8007f76:	d1e0      	bne.n	8007f3a <_free_r+0x22>
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	6053      	str	r3, [r2, #4]
 8007f7e:	4408      	add	r0, r1
 8007f80:	6010      	str	r0, [r2, #0]
 8007f82:	e7da      	b.n	8007f3a <_free_r+0x22>
 8007f84:	d902      	bls.n	8007f8c <_free_r+0x74>
 8007f86:	230c      	movs	r3, #12
 8007f88:	602b      	str	r3, [r5, #0]
 8007f8a:	e7d6      	b.n	8007f3a <_free_r+0x22>
 8007f8c:	6820      	ldr	r0, [r4, #0]
 8007f8e:	1821      	adds	r1, r4, r0
 8007f90:	428b      	cmp	r3, r1
 8007f92:	bf04      	itt	eq
 8007f94:	6819      	ldreq	r1, [r3, #0]
 8007f96:	685b      	ldreq	r3, [r3, #4]
 8007f98:	6063      	str	r3, [r4, #4]
 8007f9a:	bf04      	itt	eq
 8007f9c:	1809      	addeq	r1, r1, r0
 8007f9e:	6021      	streq	r1, [r4, #0]
 8007fa0:	6054      	str	r4, [r2, #4]
 8007fa2:	e7ca      	b.n	8007f3a <_free_r+0x22>
 8007fa4:	bd38      	pop	{r3, r4, r5, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200008a0 	.word	0x200008a0

08007fac <malloc>:
 8007fac:	4b02      	ldr	r3, [pc, #8]	@ (8007fb8 <malloc+0xc>)
 8007fae:	4601      	mov	r1, r0
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	f000 b825 	b.w	8008000 <_malloc_r>
 8007fb6:	bf00      	nop
 8007fb8:	20000020 	.word	0x20000020

08007fbc <sbrk_aligned>:
 8007fbc:	b570      	push	{r4, r5, r6, lr}
 8007fbe:	4e0f      	ldr	r6, [pc, #60]	@ (8007ffc <sbrk_aligned+0x40>)
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	6831      	ldr	r1, [r6, #0]
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	b911      	cbnz	r1, 8007fce <sbrk_aligned+0x12>
 8007fc8:	f000 fe58 	bl	8008c7c <_sbrk_r>
 8007fcc:	6030      	str	r0, [r6, #0]
 8007fce:	4621      	mov	r1, r4
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f000 fe53 	bl	8008c7c <_sbrk_r>
 8007fd6:	1c43      	adds	r3, r0, #1
 8007fd8:	d103      	bne.n	8007fe2 <sbrk_aligned+0x26>
 8007fda:	f04f 34ff 	mov.w	r4, #4294967295
 8007fde:	4620      	mov	r0, r4
 8007fe0:	bd70      	pop	{r4, r5, r6, pc}
 8007fe2:	1cc4      	adds	r4, r0, #3
 8007fe4:	f024 0403 	bic.w	r4, r4, #3
 8007fe8:	42a0      	cmp	r0, r4
 8007fea:	d0f8      	beq.n	8007fde <sbrk_aligned+0x22>
 8007fec:	1a21      	subs	r1, r4, r0
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f000 fe44 	bl	8008c7c <_sbrk_r>
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d1f2      	bne.n	8007fde <sbrk_aligned+0x22>
 8007ff8:	e7ef      	b.n	8007fda <sbrk_aligned+0x1e>
 8007ffa:	bf00      	nop
 8007ffc:	2000089c 	.word	0x2000089c

08008000 <_malloc_r>:
 8008000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008004:	1ccd      	adds	r5, r1, #3
 8008006:	f025 0503 	bic.w	r5, r5, #3
 800800a:	3508      	adds	r5, #8
 800800c:	2d0c      	cmp	r5, #12
 800800e:	bf38      	it	cc
 8008010:	250c      	movcc	r5, #12
 8008012:	2d00      	cmp	r5, #0
 8008014:	4606      	mov	r6, r0
 8008016:	db01      	blt.n	800801c <_malloc_r+0x1c>
 8008018:	42a9      	cmp	r1, r5
 800801a:	d904      	bls.n	8008026 <_malloc_r+0x26>
 800801c:	230c      	movs	r3, #12
 800801e:	6033      	str	r3, [r6, #0]
 8008020:	2000      	movs	r0, #0
 8008022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008026:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080fc <_malloc_r+0xfc>
 800802a:	f000 f869 	bl	8008100 <__malloc_lock>
 800802e:	f8d8 3000 	ldr.w	r3, [r8]
 8008032:	461c      	mov	r4, r3
 8008034:	bb44      	cbnz	r4, 8008088 <_malloc_r+0x88>
 8008036:	4629      	mov	r1, r5
 8008038:	4630      	mov	r0, r6
 800803a:	f7ff ffbf 	bl	8007fbc <sbrk_aligned>
 800803e:	1c43      	adds	r3, r0, #1
 8008040:	4604      	mov	r4, r0
 8008042:	d158      	bne.n	80080f6 <_malloc_r+0xf6>
 8008044:	f8d8 4000 	ldr.w	r4, [r8]
 8008048:	4627      	mov	r7, r4
 800804a:	2f00      	cmp	r7, #0
 800804c:	d143      	bne.n	80080d6 <_malloc_r+0xd6>
 800804e:	2c00      	cmp	r4, #0
 8008050:	d04b      	beq.n	80080ea <_malloc_r+0xea>
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	4639      	mov	r1, r7
 8008056:	4630      	mov	r0, r6
 8008058:	eb04 0903 	add.w	r9, r4, r3
 800805c:	f000 fe0e 	bl	8008c7c <_sbrk_r>
 8008060:	4581      	cmp	r9, r0
 8008062:	d142      	bne.n	80080ea <_malloc_r+0xea>
 8008064:	6821      	ldr	r1, [r4, #0]
 8008066:	1a6d      	subs	r5, r5, r1
 8008068:	4629      	mov	r1, r5
 800806a:	4630      	mov	r0, r6
 800806c:	f7ff ffa6 	bl	8007fbc <sbrk_aligned>
 8008070:	3001      	adds	r0, #1
 8008072:	d03a      	beq.n	80080ea <_malloc_r+0xea>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	442b      	add	r3, r5
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	f8d8 3000 	ldr.w	r3, [r8]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	bb62      	cbnz	r2, 80080dc <_malloc_r+0xdc>
 8008082:	f8c8 7000 	str.w	r7, [r8]
 8008086:	e00f      	b.n	80080a8 <_malloc_r+0xa8>
 8008088:	6822      	ldr	r2, [r4, #0]
 800808a:	1b52      	subs	r2, r2, r5
 800808c:	d420      	bmi.n	80080d0 <_malloc_r+0xd0>
 800808e:	2a0b      	cmp	r2, #11
 8008090:	d917      	bls.n	80080c2 <_malloc_r+0xc2>
 8008092:	1961      	adds	r1, r4, r5
 8008094:	42a3      	cmp	r3, r4
 8008096:	6025      	str	r5, [r4, #0]
 8008098:	bf18      	it	ne
 800809a:	6059      	strne	r1, [r3, #4]
 800809c:	6863      	ldr	r3, [r4, #4]
 800809e:	bf08      	it	eq
 80080a0:	f8c8 1000 	streq.w	r1, [r8]
 80080a4:	5162      	str	r2, [r4, r5]
 80080a6:	604b      	str	r3, [r1, #4]
 80080a8:	4630      	mov	r0, r6
 80080aa:	f000 f82f 	bl	800810c <__malloc_unlock>
 80080ae:	f104 000b 	add.w	r0, r4, #11
 80080b2:	1d23      	adds	r3, r4, #4
 80080b4:	f020 0007 	bic.w	r0, r0, #7
 80080b8:	1ac2      	subs	r2, r0, r3
 80080ba:	bf1c      	itt	ne
 80080bc:	1a1b      	subne	r3, r3, r0
 80080be:	50a3      	strne	r3, [r4, r2]
 80080c0:	e7af      	b.n	8008022 <_malloc_r+0x22>
 80080c2:	6862      	ldr	r2, [r4, #4]
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	bf0c      	ite	eq
 80080c8:	f8c8 2000 	streq.w	r2, [r8]
 80080cc:	605a      	strne	r2, [r3, #4]
 80080ce:	e7eb      	b.n	80080a8 <_malloc_r+0xa8>
 80080d0:	4623      	mov	r3, r4
 80080d2:	6864      	ldr	r4, [r4, #4]
 80080d4:	e7ae      	b.n	8008034 <_malloc_r+0x34>
 80080d6:	463c      	mov	r4, r7
 80080d8:	687f      	ldr	r7, [r7, #4]
 80080da:	e7b6      	b.n	800804a <_malloc_r+0x4a>
 80080dc:	461a      	mov	r2, r3
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	42a3      	cmp	r3, r4
 80080e2:	d1fb      	bne.n	80080dc <_malloc_r+0xdc>
 80080e4:	2300      	movs	r3, #0
 80080e6:	6053      	str	r3, [r2, #4]
 80080e8:	e7de      	b.n	80080a8 <_malloc_r+0xa8>
 80080ea:	230c      	movs	r3, #12
 80080ec:	6033      	str	r3, [r6, #0]
 80080ee:	4630      	mov	r0, r6
 80080f0:	f000 f80c 	bl	800810c <__malloc_unlock>
 80080f4:	e794      	b.n	8008020 <_malloc_r+0x20>
 80080f6:	6005      	str	r5, [r0, #0]
 80080f8:	e7d6      	b.n	80080a8 <_malloc_r+0xa8>
 80080fa:	bf00      	nop
 80080fc:	200008a0 	.word	0x200008a0

08008100 <__malloc_lock>:
 8008100:	4801      	ldr	r0, [pc, #4]	@ (8008108 <__malloc_lock+0x8>)
 8008102:	f7ff b89a 	b.w	800723a <__retarget_lock_acquire_recursive>
 8008106:	bf00      	nop
 8008108:	20000898 	.word	0x20000898

0800810c <__malloc_unlock>:
 800810c:	4801      	ldr	r0, [pc, #4]	@ (8008114 <__malloc_unlock+0x8>)
 800810e:	f7ff b895 	b.w	800723c <__retarget_lock_release_recursive>
 8008112:	bf00      	nop
 8008114:	20000898 	.word	0x20000898

08008118 <_Balloc>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	69c6      	ldr	r6, [r0, #28]
 800811c:	4604      	mov	r4, r0
 800811e:	460d      	mov	r5, r1
 8008120:	b976      	cbnz	r6, 8008140 <_Balloc+0x28>
 8008122:	2010      	movs	r0, #16
 8008124:	f7ff ff42 	bl	8007fac <malloc>
 8008128:	4602      	mov	r2, r0
 800812a:	61e0      	str	r0, [r4, #28]
 800812c:	b920      	cbnz	r0, 8008138 <_Balloc+0x20>
 800812e:	4b18      	ldr	r3, [pc, #96]	@ (8008190 <_Balloc+0x78>)
 8008130:	4818      	ldr	r0, [pc, #96]	@ (8008194 <_Balloc+0x7c>)
 8008132:	216b      	movs	r1, #107	@ 0x6b
 8008134:	f7ff f884 	bl	8007240 <__assert_func>
 8008138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800813c:	6006      	str	r6, [r0, #0]
 800813e:	60c6      	str	r6, [r0, #12]
 8008140:	69e6      	ldr	r6, [r4, #28]
 8008142:	68f3      	ldr	r3, [r6, #12]
 8008144:	b183      	cbz	r3, 8008168 <_Balloc+0x50>
 8008146:	69e3      	ldr	r3, [r4, #28]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800814e:	b9b8      	cbnz	r0, 8008180 <_Balloc+0x68>
 8008150:	2101      	movs	r1, #1
 8008152:	fa01 f605 	lsl.w	r6, r1, r5
 8008156:	1d72      	adds	r2, r6, #5
 8008158:	0092      	lsls	r2, r2, #2
 800815a:	4620      	mov	r0, r4
 800815c:	f000 fdb3 	bl	8008cc6 <_calloc_r>
 8008160:	b160      	cbz	r0, 800817c <_Balloc+0x64>
 8008162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008166:	e00e      	b.n	8008186 <_Balloc+0x6e>
 8008168:	2221      	movs	r2, #33	@ 0x21
 800816a:	2104      	movs	r1, #4
 800816c:	4620      	mov	r0, r4
 800816e:	f000 fdaa 	bl	8008cc6 <_calloc_r>
 8008172:	69e3      	ldr	r3, [r4, #28]
 8008174:	60f0      	str	r0, [r6, #12]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e4      	bne.n	8008146 <_Balloc+0x2e>
 800817c:	2000      	movs	r0, #0
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	6802      	ldr	r2, [r0, #0]
 8008182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008186:	2300      	movs	r3, #0
 8008188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800818c:	e7f7      	b.n	800817e <_Balloc+0x66>
 800818e:	bf00      	nop
 8008190:	0800a644 	.word	0x0800a644
 8008194:	0800a799 	.word	0x0800a799

08008198 <_Bfree>:
 8008198:	b570      	push	{r4, r5, r6, lr}
 800819a:	69c6      	ldr	r6, [r0, #28]
 800819c:	4605      	mov	r5, r0
 800819e:	460c      	mov	r4, r1
 80081a0:	b976      	cbnz	r6, 80081c0 <_Bfree+0x28>
 80081a2:	2010      	movs	r0, #16
 80081a4:	f7ff ff02 	bl	8007fac <malloc>
 80081a8:	4602      	mov	r2, r0
 80081aa:	61e8      	str	r0, [r5, #28]
 80081ac:	b920      	cbnz	r0, 80081b8 <_Bfree+0x20>
 80081ae:	4b09      	ldr	r3, [pc, #36]	@ (80081d4 <_Bfree+0x3c>)
 80081b0:	4809      	ldr	r0, [pc, #36]	@ (80081d8 <_Bfree+0x40>)
 80081b2:	218f      	movs	r1, #143	@ 0x8f
 80081b4:	f7ff f844 	bl	8007240 <__assert_func>
 80081b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081bc:	6006      	str	r6, [r0, #0]
 80081be:	60c6      	str	r6, [r0, #12]
 80081c0:	b13c      	cbz	r4, 80081d2 <_Bfree+0x3a>
 80081c2:	69eb      	ldr	r3, [r5, #28]
 80081c4:	6862      	ldr	r2, [r4, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081cc:	6021      	str	r1, [r4, #0]
 80081ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081d2:	bd70      	pop	{r4, r5, r6, pc}
 80081d4:	0800a644 	.word	0x0800a644
 80081d8:	0800a799 	.word	0x0800a799

080081dc <__multadd>:
 80081dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e0:	690d      	ldr	r5, [r1, #16]
 80081e2:	4607      	mov	r7, r0
 80081e4:	460c      	mov	r4, r1
 80081e6:	461e      	mov	r6, r3
 80081e8:	f101 0c14 	add.w	ip, r1, #20
 80081ec:	2000      	movs	r0, #0
 80081ee:	f8dc 3000 	ldr.w	r3, [ip]
 80081f2:	b299      	uxth	r1, r3
 80081f4:	fb02 6101 	mla	r1, r2, r1, r6
 80081f8:	0c1e      	lsrs	r6, r3, #16
 80081fa:	0c0b      	lsrs	r3, r1, #16
 80081fc:	fb02 3306 	mla	r3, r2, r6, r3
 8008200:	b289      	uxth	r1, r1
 8008202:	3001      	adds	r0, #1
 8008204:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008208:	4285      	cmp	r5, r0
 800820a:	f84c 1b04 	str.w	r1, [ip], #4
 800820e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008212:	dcec      	bgt.n	80081ee <__multadd+0x12>
 8008214:	b30e      	cbz	r6, 800825a <__multadd+0x7e>
 8008216:	68a3      	ldr	r3, [r4, #8]
 8008218:	42ab      	cmp	r3, r5
 800821a:	dc19      	bgt.n	8008250 <__multadd+0x74>
 800821c:	6861      	ldr	r1, [r4, #4]
 800821e:	4638      	mov	r0, r7
 8008220:	3101      	adds	r1, #1
 8008222:	f7ff ff79 	bl	8008118 <_Balloc>
 8008226:	4680      	mov	r8, r0
 8008228:	b928      	cbnz	r0, 8008236 <__multadd+0x5a>
 800822a:	4602      	mov	r2, r0
 800822c:	4b0c      	ldr	r3, [pc, #48]	@ (8008260 <__multadd+0x84>)
 800822e:	480d      	ldr	r0, [pc, #52]	@ (8008264 <__multadd+0x88>)
 8008230:	21ba      	movs	r1, #186	@ 0xba
 8008232:	f7ff f805 	bl	8007240 <__assert_func>
 8008236:	6922      	ldr	r2, [r4, #16]
 8008238:	3202      	adds	r2, #2
 800823a:	f104 010c 	add.w	r1, r4, #12
 800823e:	0092      	lsls	r2, r2, #2
 8008240:	300c      	adds	r0, #12
 8008242:	f000 fd2b 	bl	8008c9c <memcpy>
 8008246:	4621      	mov	r1, r4
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff ffa5 	bl	8008198 <_Bfree>
 800824e:	4644      	mov	r4, r8
 8008250:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008254:	3501      	adds	r5, #1
 8008256:	615e      	str	r6, [r3, #20]
 8008258:	6125      	str	r5, [r4, #16]
 800825a:	4620      	mov	r0, r4
 800825c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008260:	0800a788 	.word	0x0800a788
 8008264:	0800a799 	.word	0x0800a799

08008268 <__hi0bits>:
 8008268:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800826c:	4603      	mov	r3, r0
 800826e:	bf36      	itet	cc
 8008270:	0403      	lslcc	r3, r0, #16
 8008272:	2000      	movcs	r0, #0
 8008274:	2010      	movcc	r0, #16
 8008276:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800827a:	bf3c      	itt	cc
 800827c:	021b      	lslcc	r3, r3, #8
 800827e:	3008      	addcc	r0, #8
 8008280:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008284:	bf3c      	itt	cc
 8008286:	011b      	lslcc	r3, r3, #4
 8008288:	3004      	addcc	r0, #4
 800828a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800828e:	bf3c      	itt	cc
 8008290:	009b      	lslcc	r3, r3, #2
 8008292:	3002      	addcc	r0, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	db05      	blt.n	80082a4 <__hi0bits+0x3c>
 8008298:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800829c:	f100 0001 	add.w	r0, r0, #1
 80082a0:	bf08      	it	eq
 80082a2:	2020      	moveq	r0, #32
 80082a4:	4770      	bx	lr

080082a6 <__lo0bits>:
 80082a6:	6803      	ldr	r3, [r0, #0]
 80082a8:	4602      	mov	r2, r0
 80082aa:	f013 0007 	ands.w	r0, r3, #7
 80082ae:	d00b      	beq.n	80082c8 <__lo0bits+0x22>
 80082b0:	07d9      	lsls	r1, r3, #31
 80082b2:	d421      	bmi.n	80082f8 <__lo0bits+0x52>
 80082b4:	0798      	lsls	r0, r3, #30
 80082b6:	bf49      	itett	mi
 80082b8:	085b      	lsrmi	r3, r3, #1
 80082ba:	089b      	lsrpl	r3, r3, #2
 80082bc:	2001      	movmi	r0, #1
 80082be:	6013      	strmi	r3, [r2, #0]
 80082c0:	bf5c      	itt	pl
 80082c2:	6013      	strpl	r3, [r2, #0]
 80082c4:	2002      	movpl	r0, #2
 80082c6:	4770      	bx	lr
 80082c8:	b299      	uxth	r1, r3
 80082ca:	b909      	cbnz	r1, 80082d0 <__lo0bits+0x2a>
 80082cc:	0c1b      	lsrs	r3, r3, #16
 80082ce:	2010      	movs	r0, #16
 80082d0:	b2d9      	uxtb	r1, r3
 80082d2:	b909      	cbnz	r1, 80082d8 <__lo0bits+0x32>
 80082d4:	3008      	adds	r0, #8
 80082d6:	0a1b      	lsrs	r3, r3, #8
 80082d8:	0719      	lsls	r1, r3, #28
 80082da:	bf04      	itt	eq
 80082dc:	091b      	lsreq	r3, r3, #4
 80082de:	3004      	addeq	r0, #4
 80082e0:	0799      	lsls	r1, r3, #30
 80082e2:	bf04      	itt	eq
 80082e4:	089b      	lsreq	r3, r3, #2
 80082e6:	3002      	addeq	r0, #2
 80082e8:	07d9      	lsls	r1, r3, #31
 80082ea:	d403      	bmi.n	80082f4 <__lo0bits+0x4e>
 80082ec:	085b      	lsrs	r3, r3, #1
 80082ee:	f100 0001 	add.w	r0, r0, #1
 80082f2:	d003      	beq.n	80082fc <__lo0bits+0x56>
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	4770      	bx	lr
 80082f8:	2000      	movs	r0, #0
 80082fa:	4770      	bx	lr
 80082fc:	2020      	movs	r0, #32
 80082fe:	4770      	bx	lr

08008300 <__i2b>:
 8008300:	b510      	push	{r4, lr}
 8008302:	460c      	mov	r4, r1
 8008304:	2101      	movs	r1, #1
 8008306:	f7ff ff07 	bl	8008118 <_Balloc>
 800830a:	4602      	mov	r2, r0
 800830c:	b928      	cbnz	r0, 800831a <__i2b+0x1a>
 800830e:	4b05      	ldr	r3, [pc, #20]	@ (8008324 <__i2b+0x24>)
 8008310:	4805      	ldr	r0, [pc, #20]	@ (8008328 <__i2b+0x28>)
 8008312:	f240 1145 	movw	r1, #325	@ 0x145
 8008316:	f7fe ff93 	bl	8007240 <__assert_func>
 800831a:	2301      	movs	r3, #1
 800831c:	6144      	str	r4, [r0, #20]
 800831e:	6103      	str	r3, [r0, #16]
 8008320:	bd10      	pop	{r4, pc}
 8008322:	bf00      	nop
 8008324:	0800a788 	.word	0x0800a788
 8008328:	0800a799 	.word	0x0800a799

0800832c <__multiply>:
 800832c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	4614      	mov	r4, r2
 8008332:	690a      	ldr	r2, [r1, #16]
 8008334:	6923      	ldr	r3, [r4, #16]
 8008336:	429a      	cmp	r2, r3
 8008338:	bfa8      	it	ge
 800833a:	4623      	movge	r3, r4
 800833c:	460f      	mov	r7, r1
 800833e:	bfa4      	itt	ge
 8008340:	460c      	movge	r4, r1
 8008342:	461f      	movge	r7, r3
 8008344:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008348:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800834c:	68a3      	ldr	r3, [r4, #8]
 800834e:	6861      	ldr	r1, [r4, #4]
 8008350:	eb0a 0609 	add.w	r6, sl, r9
 8008354:	42b3      	cmp	r3, r6
 8008356:	b085      	sub	sp, #20
 8008358:	bfb8      	it	lt
 800835a:	3101      	addlt	r1, #1
 800835c:	f7ff fedc 	bl	8008118 <_Balloc>
 8008360:	b930      	cbnz	r0, 8008370 <__multiply+0x44>
 8008362:	4602      	mov	r2, r0
 8008364:	4b44      	ldr	r3, [pc, #272]	@ (8008478 <__multiply+0x14c>)
 8008366:	4845      	ldr	r0, [pc, #276]	@ (800847c <__multiply+0x150>)
 8008368:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800836c:	f7fe ff68 	bl	8007240 <__assert_func>
 8008370:	f100 0514 	add.w	r5, r0, #20
 8008374:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008378:	462b      	mov	r3, r5
 800837a:	2200      	movs	r2, #0
 800837c:	4543      	cmp	r3, r8
 800837e:	d321      	bcc.n	80083c4 <__multiply+0x98>
 8008380:	f107 0114 	add.w	r1, r7, #20
 8008384:	f104 0214 	add.w	r2, r4, #20
 8008388:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800838c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008390:	9302      	str	r3, [sp, #8]
 8008392:	1b13      	subs	r3, r2, r4
 8008394:	3b15      	subs	r3, #21
 8008396:	f023 0303 	bic.w	r3, r3, #3
 800839a:	3304      	adds	r3, #4
 800839c:	f104 0715 	add.w	r7, r4, #21
 80083a0:	42ba      	cmp	r2, r7
 80083a2:	bf38      	it	cc
 80083a4:	2304      	movcc	r3, #4
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	9b02      	ldr	r3, [sp, #8]
 80083aa:	9103      	str	r1, [sp, #12]
 80083ac:	428b      	cmp	r3, r1
 80083ae:	d80c      	bhi.n	80083ca <__multiply+0x9e>
 80083b0:	2e00      	cmp	r6, #0
 80083b2:	dd03      	ble.n	80083bc <__multiply+0x90>
 80083b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d05b      	beq.n	8008474 <__multiply+0x148>
 80083bc:	6106      	str	r6, [r0, #16]
 80083be:	b005      	add	sp, #20
 80083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c4:	f843 2b04 	str.w	r2, [r3], #4
 80083c8:	e7d8      	b.n	800837c <__multiply+0x50>
 80083ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80083ce:	f1ba 0f00 	cmp.w	sl, #0
 80083d2:	d024      	beq.n	800841e <__multiply+0xf2>
 80083d4:	f104 0e14 	add.w	lr, r4, #20
 80083d8:	46a9      	mov	r9, r5
 80083da:	f04f 0c00 	mov.w	ip, #0
 80083de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083e2:	f8d9 3000 	ldr.w	r3, [r9]
 80083e6:	fa1f fb87 	uxth.w	fp, r7
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80083f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80083f4:	f8d9 7000 	ldr.w	r7, [r9]
 80083f8:	4463      	add	r3, ip
 80083fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80083fe:	fb0a c70b 	mla	r7, sl, fp, ip
 8008402:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008406:	b29b      	uxth	r3, r3
 8008408:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800840c:	4572      	cmp	r2, lr
 800840e:	f849 3b04 	str.w	r3, [r9], #4
 8008412:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008416:	d8e2      	bhi.n	80083de <__multiply+0xb2>
 8008418:	9b01      	ldr	r3, [sp, #4]
 800841a:	f845 c003 	str.w	ip, [r5, r3]
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008424:	3104      	adds	r1, #4
 8008426:	f1b9 0f00 	cmp.w	r9, #0
 800842a:	d021      	beq.n	8008470 <__multiply+0x144>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	f104 0c14 	add.w	ip, r4, #20
 8008432:	46ae      	mov	lr, r5
 8008434:	f04f 0a00 	mov.w	sl, #0
 8008438:	f8bc b000 	ldrh.w	fp, [ip]
 800843c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008440:	fb09 770b 	mla	r7, r9, fp, r7
 8008444:	4457      	add	r7, sl
 8008446:	b29b      	uxth	r3, r3
 8008448:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800844c:	f84e 3b04 	str.w	r3, [lr], #4
 8008450:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008454:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008458:	f8be 3000 	ldrh.w	r3, [lr]
 800845c:	fb09 330a 	mla	r3, r9, sl, r3
 8008460:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008464:	4562      	cmp	r2, ip
 8008466:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800846a:	d8e5      	bhi.n	8008438 <__multiply+0x10c>
 800846c:	9f01      	ldr	r7, [sp, #4]
 800846e:	51eb      	str	r3, [r5, r7]
 8008470:	3504      	adds	r5, #4
 8008472:	e799      	b.n	80083a8 <__multiply+0x7c>
 8008474:	3e01      	subs	r6, #1
 8008476:	e79b      	b.n	80083b0 <__multiply+0x84>
 8008478:	0800a788 	.word	0x0800a788
 800847c:	0800a799 	.word	0x0800a799

08008480 <__pow5mult>:
 8008480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008484:	4615      	mov	r5, r2
 8008486:	f012 0203 	ands.w	r2, r2, #3
 800848a:	4607      	mov	r7, r0
 800848c:	460e      	mov	r6, r1
 800848e:	d007      	beq.n	80084a0 <__pow5mult+0x20>
 8008490:	4c25      	ldr	r4, [pc, #148]	@ (8008528 <__pow5mult+0xa8>)
 8008492:	3a01      	subs	r2, #1
 8008494:	2300      	movs	r3, #0
 8008496:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800849a:	f7ff fe9f 	bl	80081dc <__multadd>
 800849e:	4606      	mov	r6, r0
 80084a0:	10ad      	asrs	r5, r5, #2
 80084a2:	d03d      	beq.n	8008520 <__pow5mult+0xa0>
 80084a4:	69fc      	ldr	r4, [r7, #28]
 80084a6:	b97c      	cbnz	r4, 80084c8 <__pow5mult+0x48>
 80084a8:	2010      	movs	r0, #16
 80084aa:	f7ff fd7f 	bl	8007fac <malloc>
 80084ae:	4602      	mov	r2, r0
 80084b0:	61f8      	str	r0, [r7, #28]
 80084b2:	b928      	cbnz	r0, 80084c0 <__pow5mult+0x40>
 80084b4:	4b1d      	ldr	r3, [pc, #116]	@ (800852c <__pow5mult+0xac>)
 80084b6:	481e      	ldr	r0, [pc, #120]	@ (8008530 <__pow5mult+0xb0>)
 80084b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084bc:	f7fe fec0 	bl	8007240 <__assert_func>
 80084c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084c4:	6004      	str	r4, [r0, #0]
 80084c6:	60c4      	str	r4, [r0, #12]
 80084c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80084cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084d0:	b94c      	cbnz	r4, 80084e6 <__pow5mult+0x66>
 80084d2:	f240 2171 	movw	r1, #625	@ 0x271
 80084d6:	4638      	mov	r0, r7
 80084d8:	f7ff ff12 	bl	8008300 <__i2b>
 80084dc:	2300      	movs	r3, #0
 80084de:	f8c8 0008 	str.w	r0, [r8, #8]
 80084e2:	4604      	mov	r4, r0
 80084e4:	6003      	str	r3, [r0, #0]
 80084e6:	f04f 0900 	mov.w	r9, #0
 80084ea:	07eb      	lsls	r3, r5, #31
 80084ec:	d50a      	bpl.n	8008504 <__pow5mult+0x84>
 80084ee:	4631      	mov	r1, r6
 80084f0:	4622      	mov	r2, r4
 80084f2:	4638      	mov	r0, r7
 80084f4:	f7ff ff1a 	bl	800832c <__multiply>
 80084f8:	4631      	mov	r1, r6
 80084fa:	4680      	mov	r8, r0
 80084fc:	4638      	mov	r0, r7
 80084fe:	f7ff fe4b 	bl	8008198 <_Bfree>
 8008502:	4646      	mov	r6, r8
 8008504:	106d      	asrs	r5, r5, #1
 8008506:	d00b      	beq.n	8008520 <__pow5mult+0xa0>
 8008508:	6820      	ldr	r0, [r4, #0]
 800850a:	b938      	cbnz	r0, 800851c <__pow5mult+0x9c>
 800850c:	4622      	mov	r2, r4
 800850e:	4621      	mov	r1, r4
 8008510:	4638      	mov	r0, r7
 8008512:	f7ff ff0b 	bl	800832c <__multiply>
 8008516:	6020      	str	r0, [r4, #0]
 8008518:	f8c0 9000 	str.w	r9, [r0]
 800851c:	4604      	mov	r4, r0
 800851e:	e7e4      	b.n	80084ea <__pow5mult+0x6a>
 8008520:	4630      	mov	r0, r6
 8008522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008526:	bf00      	nop
 8008528:	0800a7f4 	.word	0x0800a7f4
 800852c:	0800a644 	.word	0x0800a644
 8008530:	0800a799 	.word	0x0800a799

08008534 <__lshift>:
 8008534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008538:	460c      	mov	r4, r1
 800853a:	6849      	ldr	r1, [r1, #4]
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008542:	68a3      	ldr	r3, [r4, #8]
 8008544:	4607      	mov	r7, r0
 8008546:	4691      	mov	r9, r2
 8008548:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800854c:	f108 0601 	add.w	r6, r8, #1
 8008550:	42b3      	cmp	r3, r6
 8008552:	db0b      	blt.n	800856c <__lshift+0x38>
 8008554:	4638      	mov	r0, r7
 8008556:	f7ff fddf 	bl	8008118 <_Balloc>
 800855a:	4605      	mov	r5, r0
 800855c:	b948      	cbnz	r0, 8008572 <__lshift+0x3e>
 800855e:	4602      	mov	r2, r0
 8008560:	4b28      	ldr	r3, [pc, #160]	@ (8008604 <__lshift+0xd0>)
 8008562:	4829      	ldr	r0, [pc, #164]	@ (8008608 <__lshift+0xd4>)
 8008564:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008568:	f7fe fe6a 	bl	8007240 <__assert_func>
 800856c:	3101      	adds	r1, #1
 800856e:	005b      	lsls	r3, r3, #1
 8008570:	e7ee      	b.n	8008550 <__lshift+0x1c>
 8008572:	2300      	movs	r3, #0
 8008574:	f100 0114 	add.w	r1, r0, #20
 8008578:	f100 0210 	add.w	r2, r0, #16
 800857c:	4618      	mov	r0, r3
 800857e:	4553      	cmp	r3, sl
 8008580:	db33      	blt.n	80085ea <__lshift+0xb6>
 8008582:	6920      	ldr	r0, [r4, #16]
 8008584:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008588:	f104 0314 	add.w	r3, r4, #20
 800858c:	f019 091f 	ands.w	r9, r9, #31
 8008590:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008594:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008598:	d02b      	beq.n	80085f2 <__lshift+0xbe>
 800859a:	f1c9 0e20 	rsb	lr, r9, #32
 800859e:	468a      	mov	sl, r1
 80085a0:	2200      	movs	r2, #0
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	fa00 f009 	lsl.w	r0, r0, r9
 80085a8:	4310      	orrs	r0, r2
 80085aa:	f84a 0b04 	str.w	r0, [sl], #4
 80085ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b2:	459c      	cmp	ip, r3
 80085b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80085b8:	d8f3      	bhi.n	80085a2 <__lshift+0x6e>
 80085ba:	ebac 0304 	sub.w	r3, ip, r4
 80085be:	3b15      	subs	r3, #21
 80085c0:	f023 0303 	bic.w	r3, r3, #3
 80085c4:	3304      	adds	r3, #4
 80085c6:	f104 0015 	add.w	r0, r4, #21
 80085ca:	4584      	cmp	ip, r0
 80085cc:	bf38      	it	cc
 80085ce:	2304      	movcc	r3, #4
 80085d0:	50ca      	str	r2, [r1, r3]
 80085d2:	b10a      	cbz	r2, 80085d8 <__lshift+0xa4>
 80085d4:	f108 0602 	add.w	r6, r8, #2
 80085d8:	3e01      	subs	r6, #1
 80085da:	4638      	mov	r0, r7
 80085dc:	612e      	str	r6, [r5, #16]
 80085de:	4621      	mov	r1, r4
 80085e0:	f7ff fdda 	bl	8008198 <_Bfree>
 80085e4:	4628      	mov	r0, r5
 80085e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80085ee:	3301      	adds	r3, #1
 80085f0:	e7c5      	b.n	800857e <__lshift+0x4a>
 80085f2:	3904      	subs	r1, #4
 80085f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80085fc:	459c      	cmp	ip, r3
 80085fe:	d8f9      	bhi.n	80085f4 <__lshift+0xc0>
 8008600:	e7ea      	b.n	80085d8 <__lshift+0xa4>
 8008602:	bf00      	nop
 8008604:	0800a788 	.word	0x0800a788
 8008608:	0800a799 	.word	0x0800a799

0800860c <__mcmp>:
 800860c:	690a      	ldr	r2, [r1, #16]
 800860e:	4603      	mov	r3, r0
 8008610:	6900      	ldr	r0, [r0, #16]
 8008612:	1a80      	subs	r0, r0, r2
 8008614:	b530      	push	{r4, r5, lr}
 8008616:	d10e      	bne.n	8008636 <__mcmp+0x2a>
 8008618:	3314      	adds	r3, #20
 800861a:	3114      	adds	r1, #20
 800861c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008620:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008624:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008628:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800862c:	4295      	cmp	r5, r2
 800862e:	d003      	beq.n	8008638 <__mcmp+0x2c>
 8008630:	d205      	bcs.n	800863e <__mcmp+0x32>
 8008632:	f04f 30ff 	mov.w	r0, #4294967295
 8008636:	bd30      	pop	{r4, r5, pc}
 8008638:	42a3      	cmp	r3, r4
 800863a:	d3f3      	bcc.n	8008624 <__mcmp+0x18>
 800863c:	e7fb      	b.n	8008636 <__mcmp+0x2a>
 800863e:	2001      	movs	r0, #1
 8008640:	e7f9      	b.n	8008636 <__mcmp+0x2a>
	...

08008644 <__mdiff>:
 8008644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008648:	4689      	mov	r9, r1
 800864a:	4606      	mov	r6, r0
 800864c:	4611      	mov	r1, r2
 800864e:	4648      	mov	r0, r9
 8008650:	4614      	mov	r4, r2
 8008652:	f7ff ffdb 	bl	800860c <__mcmp>
 8008656:	1e05      	subs	r5, r0, #0
 8008658:	d112      	bne.n	8008680 <__mdiff+0x3c>
 800865a:	4629      	mov	r1, r5
 800865c:	4630      	mov	r0, r6
 800865e:	f7ff fd5b 	bl	8008118 <_Balloc>
 8008662:	4602      	mov	r2, r0
 8008664:	b928      	cbnz	r0, 8008672 <__mdiff+0x2e>
 8008666:	4b3f      	ldr	r3, [pc, #252]	@ (8008764 <__mdiff+0x120>)
 8008668:	f240 2137 	movw	r1, #567	@ 0x237
 800866c:	483e      	ldr	r0, [pc, #248]	@ (8008768 <__mdiff+0x124>)
 800866e:	f7fe fde7 	bl	8007240 <__assert_func>
 8008672:	2301      	movs	r3, #1
 8008674:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008678:	4610      	mov	r0, r2
 800867a:	b003      	add	sp, #12
 800867c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008680:	bfbc      	itt	lt
 8008682:	464b      	movlt	r3, r9
 8008684:	46a1      	movlt	r9, r4
 8008686:	4630      	mov	r0, r6
 8008688:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800868c:	bfba      	itte	lt
 800868e:	461c      	movlt	r4, r3
 8008690:	2501      	movlt	r5, #1
 8008692:	2500      	movge	r5, #0
 8008694:	f7ff fd40 	bl	8008118 <_Balloc>
 8008698:	4602      	mov	r2, r0
 800869a:	b918      	cbnz	r0, 80086a4 <__mdiff+0x60>
 800869c:	4b31      	ldr	r3, [pc, #196]	@ (8008764 <__mdiff+0x120>)
 800869e:	f240 2145 	movw	r1, #581	@ 0x245
 80086a2:	e7e3      	b.n	800866c <__mdiff+0x28>
 80086a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80086a8:	6926      	ldr	r6, [r4, #16]
 80086aa:	60c5      	str	r5, [r0, #12]
 80086ac:	f109 0310 	add.w	r3, r9, #16
 80086b0:	f109 0514 	add.w	r5, r9, #20
 80086b4:	f104 0e14 	add.w	lr, r4, #20
 80086b8:	f100 0b14 	add.w	fp, r0, #20
 80086bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	46d9      	mov	r9, fp
 80086c8:	f04f 0c00 	mov.w	ip, #0
 80086cc:	9b01      	ldr	r3, [sp, #4]
 80086ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80086d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	fa1f f38a 	uxth.w	r3, sl
 80086dc:	4619      	mov	r1, r3
 80086de:	b283      	uxth	r3, r0
 80086e0:	1acb      	subs	r3, r1, r3
 80086e2:	0c00      	lsrs	r0, r0, #16
 80086e4:	4463      	add	r3, ip
 80086e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80086ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80086f4:	4576      	cmp	r6, lr
 80086f6:	f849 3b04 	str.w	r3, [r9], #4
 80086fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086fe:	d8e5      	bhi.n	80086cc <__mdiff+0x88>
 8008700:	1b33      	subs	r3, r6, r4
 8008702:	3b15      	subs	r3, #21
 8008704:	f023 0303 	bic.w	r3, r3, #3
 8008708:	3415      	adds	r4, #21
 800870a:	3304      	adds	r3, #4
 800870c:	42a6      	cmp	r6, r4
 800870e:	bf38      	it	cc
 8008710:	2304      	movcc	r3, #4
 8008712:	441d      	add	r5, r3
 8008714:	445b      	add	r3, fp
 8008716:	461e      	mov	r6, r3
 8008718:	462c      	mov	r4, r5
 800871a:	4544      	cmp	r4, r8
 800871c:	d30e      	bcc.n	800873c <__mdiff+0xf8>
 800871e:	f108 0103 	add.w	r1, r8, #3
 8008722:	1b49      	subs	r1, r1, r5
 8008724:	f021 0103 	bic.w	r1, r1, #3
 8008728:	3d03      	subs	r5, #3
 800872a:	45a8      	cmp	r8, r5
 800872c:	bf38      	it	cc
 800872e:	2100      	movcc	r1, #0
 8008730:	440b      	add	r3, r1
 8008732:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008736:	b191      	cbz	r1, 800875e <__mdiff+0x11a>
 8008738:	6117      	str	r7, [r2, #16]
 800873a:	e79d      	b.n	8008678 <__mdiff+0x34>
 800873c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008740:	46e6      	mov	lr, ip
 8008742:	0c08      	lsrs	r0, r1, #16
 8008744:	fa1c fc81 	uxtah	ip, ip, r1
 8008748:	4471      	add	r1, lr
 800874a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800874e:	b289      	uxth	r1, r1
 8008750:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008754:	f846 1b04 	str.w	r1, [r6], #4
 8008758:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800875c:	e7dd      	b.n	800871a <__mdiff+0xd6>
 800875e:	3f01      	subs	r7, #1
 8008760:	e7e7      	b.n	8008732 <__mdiff+0xee>
 8008762:	bf00      	nop
 8008764:	0800a788 	.word	0x0800a788
 8008768:	0800a799 	.word	0x0800a799

0800876c <__d2b>:
 800876c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008770:	460f      	mov	r7, r1
 8008772:	2101      	movs	r1, #1
 8008774:	ec59 8b10 	vmov	r8, r9, d0
 8008778:	4616      	mov	r6, r2
 800877a:	f7ff fccd 	bl	8008118 <_Balloc>
 800877e:	4604      	mov	r4, r0
 8008780:	b930      	cbnz	r0, 8008790 <__d2b+0x24>
 8008782:	4602      	mov	r2, r0
 8008784:	4b23      	ldr	r3, [pc, #140]	@ (8008814 <__d2b+0xa8>)
 8008786:	4824      	ldr	r0, [pc, #144]	@ (8008818 <__d2b+0xac>)
 8008788:	f240 310f 	movw	r1, #783	@ 0x30f
 800878c:	f7fe fd58 	bl	8007240 <__assert_func>
 8008790:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008794:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008798:	b10d      	cbz	r5, 800879e <__d2b+0x32>
 800879a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800879e:	9301      	str	r3, [sp, #4]
 80087a0:	f1b8 0300 	subs.w	r3, r8, #0
 80087a4:	d023      	beq.n	80087ee <__d2b+0x82>
 80087a6:	4668      	mov	r0, sp
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	f7ff fd7c 	bl	80082a6 <__lo0bits>
 80087ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087b2:	b1d0      	cbz	r0, 80087ea <__d2b+0x7e>
 80087b4:	f1c0 0320 	rsb	r3, r0, #32
 80087b8:	fa02 f303 	lsl.w	r3, r2, r3
 80087bc:	430b      	orrs	r3, r1
 80087be:	40c2      	lsrs	r2, r0
 80087c0:	6163      	str	r3, [r4, #20]
 80087c2:	9201      	str	r2, [sp, #4]
 80087c4:	9b01      	ldr	r3, [sp, #4]
 80087c6:	61a3      	str	r3, [r4, #24]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	bf0c      	ite	eq
 80087cc:	2201      	moveq	r2, #1
 80087ce:	2202      	movne	r2, #2
 80087d0:	6122      	str	r2, [r4, #16]
 80087d2:	b1a5      	cbz	r5, 80087fe <__d2b+0x92>
 80087d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80087d8:	4405      	add	r5, r0
 80087da:	603d      	str	r5, [r7, #0]
 80087dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80087e0:	6030      	str	r0, [r6, #0]
 80087e2:	4620      	mov	r0, r4
 80087e4:	b003      	add	sp, #12
 80087e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087ea:	6161      	str	r1, [r4, #20]
 80087ec:	e7ea      	b.n	80087c4 <__d2b+0x58>
 80087ee:	a801      	add	r0, sp, #4
 80087f0:	f7ff fd59 	bl	80082a6 <__lo0bits>
 80087f4:	9b01      	ldr	r3, [sp, #4]
 80087f6:	6163      	str	r3, [r4, #20]
 80087f8:	3020      	adds	r0, #32
 80087fa:	2201      	movs	r2, #1
 80087fc:	e7e8      	b.n	80087d0 <__d2b+0x64>
 80087fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008802:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008806:	6038      	str	r0, [r7, #0]
 8008808:	6918      	ldr	r0, [r3, #16]
 800880a:	f7ff fd2d 	bl	8008268 <__hi0bits>
 800880e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008812:	e7e5      	b.n	80087e0 <__d2b+0x74>
 8008814:	0800a788 	.word	0x0800a788
 8008818:	0800a799 	.word	0x0800a799

0800881c <__ssputs_r>:
 800881c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008820:	688e      	ldr	r6, [r1, #8]
 8008822:	461f      	mov	r7, r3
 8008824:	42be      	cmp	r6, r7
 8008826:	680b      	ldr	r3, [r1, #0]
 8008828:	4682      	mov	sl, r0
 800882a:	460c      	mov	r4, r1
 800882c:	4690      	mov	r8, r2
 800882e:	d82d      	bhi.n	800888c <__ssputs_r+0x70>
 8008830:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008834:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008838:	d026      	beq.n	8008888 <__ssputs_r+0x6c>
 800883a:	6965      	ldr	r5, [r4, #20]
 800883c:	6909      	ldr	r1, [r1, #16]
 800883e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008842:	eba3 0901 	sub.w	r9, r3, r1
 8008846:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800884a:	1c7b      	adds	r3, r7, #1
 800884c:	444b      	add	r3, r9
 800884e:	106d      	asrs	r5, r5, #1
 8008850:	429d      	cmp	r5, r3
 8008852:	bf38      	it	cc
 8008854:	461d      	movcc	r5, r3
 8008856:	0553      	lsls	r3, r2, #21
 8008858:	d527      	bpl.n	80088aa <__ssputs_r+0x8e>
 800885a:	4629      	mov	r1, r5
 800885c:	f7ff fbd0 	bl	8008000 <_malloc_r>
 8008860:	4606      	mov	r6, r0
 8008862:	b360      	cbz	r0, 80088be <__ssputs_r+0xa2>
 8008864:	6921      	ldr	r1, [r4, #16]
 8008866:	464a      	mov	r2, r9
 8008868:	f000 fa18 	bl	8008c9c <memcpy>
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008876:	81a3      	strh	r3, [r4, #12]
 8008878:	6126      	str	r6, [r4, #16]
 800887a:	6165      	str	r5, [r4, #20]
 800887c:	444e      	add	r6, r9
 800887e:	eba5 0509 	sub.w	r5, r5, r9
 8008882:	6026      	str	r6, [r4, #0]
 8008884:	60a5      	str	r5, [r4, #8]
 8008886:	463e      	mov	r6, r7
 8008888:	42be      	cmp	r6, r7
 800888a:	d900      	bls.n	800888e <__ssputs_r+0x72>
 800888c:	463e      	mov	r6, r7
 800888e:	6820      	ldr	r0, [r4, #0]
 8008890:	4632      	mov	r2, r6
 8008892:	4641      	mov	r1, r8
 8008894:	f000 f9d8 	bl	8008c48 <memmove>
 8008898:	68a3      	ldr	r3, [r4, #8]
 800889a:	1b9b      	subs	r3, r3, r6
 800889c:	60a3      	str	r3, [r4, #8]
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	4433      	add	r3, r6
 80088a2:	6023      	str	r3, [r4, #0]
 80088a4:	2000      	movs	r0, #0
 80088a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088aa:	462a      	mov	r2, r5
 80088ac:	f000 fa31 	bl	8008d12 <_realloc_r>
 80088b0:	4606      	mov	r6, r0
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d1e0      	bne.n	8008878 <__ssputs_r+0x5c>
 80088b6:	6921      	ldr	r1, [r4, #16]
 80088b8:	4650      	mov	r0, sl
 80088ba:	f7ff fb2d 	bl	8007f18 <_free_r>
 80088be:	230c      	movs	r3, #12
 80088c0:	f8ca 3000 	str.w	r3, [sl]
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088ca:	81a3      	strh	r3, [r4, #12]
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
 80088d0:	e7e9      	b.n	80088a6 <__ssputs_r+0x8a>
	...

080088d4 <_svfiprintf_r>:
 80088d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	4698      	mov	r8, r3
 80088da:	898b      	ldrh	r3, [r1, #12]
 80088dc:	061b      	lsls	r3, r3, #24
 80088de:	b09d      	sub	sp, #116	@ 0x74
 80088e0:	4607      	mov	r7, r0
 80088e2:	460d      	mov	r5, r1
 80088e4:	4614      	mov	r4, r2
 80088e6:	d510      	bpl.n	800890a <_svfiprintf_r+0x36>
 80088e8:	690b      	ldr	r3, [r1, #16]
 80088ea:	b973      	cbnz	r3, 800890a <_svfiprintf_r+0x36>
 80088ec:	2140      	movs	r1, #64	@ 0x40
 80088ee:	f7ff fb87 	bl	8008000 <_malloc_r>
 80088f2:	6028      	str	r0, [r5, #0]
 80088f4:	6128      	str	r0, [r5, #16]
 80088f6:	b930      	cbnz	r0, 8008906 <_svfiprintf_r+0x32>
 80088f8:	230c      	movs	r3, #12
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008900:	b01d      	add	sp, #116	@ 0x74
 8008902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008906:	2340      	movs	r3, #64	@ 0x40
 8008908:	616b      	str	r3, [r5, #20]
 800890a:	2300      	movs	r3, #0
 800890c:	9309      	str	r3, [sp, #36]	@ 0x24
 800890e:	2320      	movs	r3, #32
 8008910:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008914:	f8cd 800c 	str.w	r8, [sp, #12]
 8008918:	2330      	movs	r3, #48	@ 0x30
 800891a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ab8 <_svfiprintf_r+0x1e4>
 800891e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008922:	f04f 0901 	mov.w	r9, #1
 8008926:	4623      	mov	r3, r4
 8008928:	469a      	mov	sl, r3
 800892a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800892e:	b10a      	cbz	r2, 8008934 <_svfiprintf_r+0x60>
 8008930:	2a25      	cmp	r2, #37	@ 0x25
 8008932:	d1f9      	bne.n	8008928 <_svfiprintf_r+0x54>
 8008934:	ebba 0b04 	subs.w	fp, sl, r4
 8008938:	d00b      	beq.n	8008952 <_svfiprintf_r+0x7e>
 800893a:	465b      	mov	r3, fp
 800893c:	4622      	mov	r2, r4
 800893e:	4629      	mov	r1, r5
 8008940:	4638      	mov	r0, r7
 8008942:	f7ff ff6b 	bl	800881c <__ssputs_r>
 8008946:	3001      	adds	r0, #1
 8008948:	f000 80a7 	beq.w	8008a9a <_svfiprintf_r+0x1c6>
 800894c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800894e:	445a      	add	r2, fp
 8008950:	9209      	str	r2, [sp, #36]	@ 0x24
 8008952:	f89a 3000 	ldrb.w	r3, [sl]
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 809f 	beq.w	8008a9a <_svfiprintf_r+0x1c6>
 800895c:	2300      	movs	r3, #0
 800895e:	f04f 32ff 	mov.w	r2, #4294967295
 8008962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008966:	f10a 0a01 	add.w	sl, sl, #1
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	9307      	str	r3, [sp, #28]
 800896e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008972:	931a      	str	r3, [sp, #104]	@ 0x68
 8008974:	4654      	mov	r4, sl
 8008976:	2205      	movs	r2, #5
 8008978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800897c:	484e      	ldr	r0, [pc, #312]	@ (8008ab8 <_svfiprintf_r+0x1e4>)
 800897e:	f7f7 fc27 	bl	80001d0 <memchr>
 8008982:	9a04      	ldr	r2, [sp, #16]
 8008984:	b9d8      	cbnz	r0, 80089be <_svfiprintf_r+0xea>
 8008986:	06d0      	lsls	r0, r2, #27
 8008988:	bf44      	itt	mi
 800898a:	2320      	movmi	r3, #32
 800898c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008990:	0711      	lsls	r1, r2, #28
 8008992:	bf44      	itt	mi
 8008994:	232b      	movmi	r3, #43	@ 0x2b
 8008996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800899a:	f89a 3000 	ldrb.w	r3, [sl]
 800899e:	2b2a      	cmp	r3, #42	@ 0x2a
 80089a0:	d015      	beq.n	80089ce <_svfiprintf_r+0xfa>
 80089a2:	9a07      	ldr	r2, [sp, #28]
 80089a4:	4654      	mov	r4, sl
 80089a6:	2000      	movs	r0, #0
 80089a8:	f04f 0c0a 	mov.w	ip, #10
 80089ac:	4621      	mov	r1, r4
 80089ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089b2:	3b30      	subs	r3, #48	@ 0x30
 80089b4:	2b09      	cmp	r3, #9
 80089b6:	d94b      	bls.n	8008a50 <_svfiprintf_r+0x17c>
 80089b8:	b1b0      	cbz	r0, 80089e8 <_svfiprintf_r+0x114>
 80089ba:	9207      	str	r2, [sp, #28]
 80089bc:	e014      	b.n	80089e8 <_svfiprintf_r+0x114>
 80089be:	eba0 0308 	sub.w	r3, r0, r8
 80089c2:	fa09 f303 	lsl.w	r3, r9, r3
 80089c6:	4313      	orrs	r3, r2
 80089c8:	9304      	str	r3, [sp, #16]
 80089ca:	46a2      	mov	sl, r4
 80089cc:	e7d2      	b.n	8008974 <_svfiprintf_r+0xa0>
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	1d19      	adds	r1, r3, #4
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	9103      	str	r1, [sp, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	bfbb      	ittet	lt
 80089da:	425b      	neglt	r3, r3
 80089dc:	f042 0202 	orrlt.w	r2, r2, #2
 80089e0:	9307      	strge	r3, [sp, #28]
 80089e2:	9307      	strlt	r3, [sp, #28]
 80089e4:	bfb8      	it	lt
 80089e6:	9204      	strlt	r2, [sp, #16]
 80089e8:	7823      	ldrb	r3, [r4, #0]
 80089ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80089ec:	d10a      	bne.n	8008a04 <_svfiprintf_r+0x130>
 80089ee:	7863      	ldrb	r3, [r4, #1]
 80089f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80089f2:	d132      	bne.n	8008a5a <_svfiprintf_r+0x186>
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	1d1a      	adds	r2, r3, #4
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	9203      	str	r2, [sp, #12]
 80089fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a00:	3402      	adds	r4, #2
 8008a02:	9305      	str	r3, [sp, #20]
 8008a04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ac8 <_svfiprintf_r+0x1f4>
 8008a08:	7821      	ldrb	r1, [r4, #0]
 8008a0a:	2203      	movs	r2, #3
 8008a0c:	4650      	mov	r0, sl
 8008a0e:	f7f7 fbdf 	bl	80001d0 <memchr>
 8008a12:	b138      	cbz	r0, 8008a24 <_svfiprintf_r+0x150>
 8008a14:	9b04      	ldr	r3, [sp, #16]
 8008a16:	eba0 000a 	sub.w	r0, r0, sl
 8008a1a:	2240      	movs	r2, #64	@ 0x40
 8008a1c:	4082      	lsls	r2, r0
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	3401      	adds	r4, #1
 8008a22:	9304      	str	r3, [sp, #16]
 8008a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a28:	4824      	ldr	r0, [pc, #144]	@ (8008abc <_svfiprintf_r+0x1e8>)
 8008a2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a2e:	2206      	movs	r2, #6
 8008a30:	f7f7 fbce 	bl	80001d0 <memchr>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d036      	beq.n	8008aa6 <_svfiprintf_r+0x1d2>
 8008a38:	4b21      	ldr	r3, [pc, #132]	@ (8008ac0 <_svfiprintf_r+0x1ec>)
 8008a3a:	bb1b      	cbnz	r3, 8008a84 <_svfiprintf_r+0x1b0>
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	3307      	adds	r3, #7
 8008a40:	f023 0307 	bic.w	r3, r3, #7
 8008a44:	3308      	adds	r3, #8
 8008a46:	9303      	str	r3, [sp, #12]
 8008a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a4a:	4433      	add	r3, r6
 8008a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a4e:	e76a      	b.n	8008926 <_svfiprintf_r+0x52>
 8008a50:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a54:	460c      	mov	r4, r1
 8008a56:	2001      	movs	r0, #1
 8008a58:	e7a8      	b.n	80089ac <_svfiprintf_r+0xd8>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	3401      	adds	r4, #1
 8008a5e:	9305      	str	r3, [sp, #20]
 8008a60:	4619      	mov	r1, r3
 8008a62:	f04f 0c0a 	mov.w	ip, #10
 8008a66:	4620      	mov	r0, r4
 8008a68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a6c:	3a30      	subs	r2, #48	@ 0x30
 8008a6e:	2a09      	cmp	r2, #9
 8008a70:	d903      	bls.n	8008a7a <_svfiprintf_r+0x1a6>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0c6      	beq.n	8008a04 <_svfiprintf_r+0x130>
 8008a76:	9105      	str	r1, [sp, #20]
 8008a78:	e7c4      	b.n	8008a04 <_svfiprintf_r+0x130>
 8008a7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a7e:	4604      	mov	r4, r0
 8008a80:	2301      	movs	r3, #1
 8008a82:	e7f0      	b.n	8008a66 <_svfiprintf_r+0x192>
 8008a84:	ab03      	add	r3, sp, #12
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	462a      	mov	r2, r5
 8008a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ac4 <_svfiprintf_r+0x1f0>)
 8008a8c:	a904      	add	r1, sp, #16
 8008a8e:	4638      	mov	r0, r7
 8008a90:	f7fd fe78 	bl	8006784 <_printf_float>
 8008a94:	1c42      	adds	r2, r0, #1
 8008a96:	4606      	mov	r6, r0
 8008a98:	d1d6      	bne.n	8008a48 <_svfiprintf_r+0x174>
 8008a9a:	89ab      	ldrh	r3, [r5, #12]
 8008a9c:	065b      	lsls	r3, r3, #25
 8008a9e:	f53f af2d 	bmi.w	80088fc <_svfiprintf_r+0x28>
 8008aa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008aa4:	e72c      	b.n	8008900 <_svfiprintf_r+0x2c>
 8008aa6:	ab03      	add	r3, sp, #12
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	462a      	mov	r2, r5
 8008aac:	4b05      	ldr	r3, [pc, #20]	@ (8008ac4 <_svfiprintf_r+0x1f0>)
 8008aae:	a904      	add	r1, sp, #16
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f7fe f8ff 	bl	8006cb4 <_printf_i>
 8008ab6:	e7ed      	b.n	8008a94 <_svfiprintf_r+0x1c0>
 8008ab8:	0800a8f0 	.word	0x0800a8f0
 8008abc:	0800a8fa 	.word	0x0800a8fa
 8008ac0:	08006785 	.word	0x08006785
 8008ac4:	0800881d 	.word	0x0800881d
 8008ac8:	0800a8f6 	.word	0x0800a8f6

08008acc <__sflush_r>:
 8008acc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad4:	0716      	lsls	r6, r2, #28
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	460c      	mov	r4, r1
 8008ada:	d454      	bmi.n	8008b86 <__sflush_r+0xba>
 8008adc:	684b      	ldr	r3, [r1, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	dc02      	bgt.n	8008ae8 <__sflush_r+0x1c>
 8008ae2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	dd48      	ble.n	8008b7a <__sflush_r+0xae>
 8008ae8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aea:	2e00      	cmp	r6, #0
 8008aec:	d045      	beq.n	8008b7a <__sflush_r+0xae>
 8008aee:	2300      	movs	r3, #0
 8008af0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008af4:	682f      	ldr	r7, [r5, #0]
 8008af6:	6a21      	ldr	r1, [r4, #32]
 8008af8:	602b      	str	r3, [r5, #0]
 8008afa:	d030      	beq.n	8008b5e <__sflush_r+0x92>
 8008afc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	0759      	lsls	r1, r3, #29
 8008b02:	d505      	bpl.n	8008b10 <__sflush_r+0x44>
 8008b04:	6863      	ldr	r3, [r4, #4]
 8008b06:	1ad2      	subs	r2, r2, r3
 8008b08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b0a:	b10b      	cbz	r3, 8008b10 <__sflush_r+0x44>
 8008b0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b0e:	1ad2      	subs	r2, r2, r3
 8008b10:	2300      	movs	r3, #0
 8008b12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b14:	6a21      	ldr	r1, [r4, #32]
 8008b16:	4628      	mov	r0, r5
 8008b18:	47b0      	blx	r6
 8008b1a:	1c43      	adds	r3, r0, #1
 8008b1c:	89a3      	ldrh	r3, [r4, #12]
 8008b1e:	d106      	bne.n	8008b2e <__sflush_r+0x62>
 8008b20:	6829      	ldr	r1, [r5, #0]
 8008b22:	291d      	cmp	r1, #29
 8008b24:	d82b      	bhi.n	8008b7e <__sflush_r+0xb2>
 8008b26:	4a2a      	ldr	r2, [pc, #168]	@ (8008bd0 <__sflush_r+0x104>)
 8008b28:	410a      	asrs	r2, r1
 8008b2a:	07d6      	lsls	r6, r2, #31
 8008b2c:	d427      	bmi.n	8008b7e <__sflush_r+0xb2>
 8008b2e:	2200      	movs	r2, #0
 8008b30:	6062      	str	r2, [r4, #4]
 8008b32:	04d9      	lsls	r1, r3, #19
 8008b34:	6922      	ldr	r2, [r4, #16]
 8008b36:	6022      	str	r2, [r4, #0]
 8008b38:	d504      	bpl.n	8008b44 <__sflush_r+0x78>
 8008b3a:	1c42      	adds	r2, r0, #1
 8008b3c:	d101      	bne.n	8008b42 <__sflush_r+0x76>
 8008b3e:	682b      	ldr	r3, [r5, #0]
 8008b40:	b903      	cbnz	r3, 8008b44 <__sflush_r+0x78>
 8008b42:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b46:	602f      	str	r7, [r5, #0]
 8008b48:	b1b9      	cbz	r1, 8008b7a <__sflush_r+0xae>
 8008b4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b4e:	4299      	cmp	r1, r3
 8008b50:	d002      	beq.n	8008b58 <__sflush_r+0x8c>
 8008b52:	4628      	mov	r0, r5
 8008b54:	f7ff f9e0 	bl	8007f18 <_free_r>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b5c:	e00d      	b.n	8008b7a <__sflush_r+0xae>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	4628      	mov	r0, r5
 8008b62:	47b0      	blx	r6
 8008b64:	4602      	mov	r2, r0
 8008b66:	1c50      	adds	r0, r2, #1
 8008b68:	d1c9      	bne.n	8008afe <__sflush_r+0x32>
 8008b6a:	682b      	ldr	r3, [r5, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0c6      	beq.n	8008afe <__sflush_r+0x32>
 8008b70:	2b1d      	cmp	r3, #29
 8008b72:	d001      	beq.n	8008b78 <__sflush_r+0xac>
 8008b74:	2b16      	cmp	r3, #22
 8008b76:	d11e      	bne.n	8008bb6 <__sflush_r+0xea>
 8008b78:	602f      	str	r7, [r5, #0]
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	e022      	b.n	8008bc4 <__sflush_r+0xf8>
 8008b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b82:	b21b      	sxth	r3, r3
 8008b84:	e01b      	b.n	8008bbe <__sflush_r+0xf2>
 8008b86:	690f      	ldr	r7, [r1, #16]
 8008b88:	2f00      	cmp	r7, #0
 8008b8a:	d0f6      	beq.n	8008b7a <__sflush_r+0xae>
 8008b8c:	0793      	lsls	r3, r2, #30
 8008b8e:	680e      	ldr	r6, [r1, #0]
 8008b90:	bf08      	it	eq
 8008b92:	694b      	ldreq	r3, [r1, #20]
 8008b94:	600f      	str	r7, [r1, #0]
 8008b96:	bf18      	it	ne
 8008b98:	2300      	movne	r3, #0
 8008b9a:	eba6 0807 	sub.w	r8, r6, r7
 8008b9e:	608b      	str	r3, [r1, #8]
 8008ba0:	f1b8 0f00 	cmp.w	r8, #0
 8008ba4:	dde9      	ble.n	8008b7a <__sflush_r+0xae>
 8008ba6:	6a21      	ldr	r1, [r4, #32]
 8008ba8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008baa:	4643      	mov	r3, r8
 8008bac:	463a      	mov	r2, r7
 8008bae:	4628      	mov	r0, r5
 8008bb0:	47b0      	blx	r6
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	dc08      	bgt.n	8008bc8 <__sflush_r+0xfc>
 8008bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bbe:	81a3      	strh	r3, [r4, #12]
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc8:	4407      	add	r7, r0
 8008bca:	eba8 0800 	sub.w	r8, r8, r0
 8008bce:	e7e7      	b.n	8008ba0 <__sflush_r+0xd4>
 8008bd0:	dfbffffe 	.word	0xdfbffffe

08008bd4 <_fflush_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	690b      	ldr	r3, [r1, #16]
 8008bd8:	4605      	mov	r5, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	b913      	cbnz	r3, 8008be4 <_fflush_r+0x10>
 8008bde:	2500      	movs	r5, #0
 8008be0:	4628      	mov	r0, r5
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	b118      	cbz	r0, 8008bee <_fflush_r+0x1a>
 8008be6:	6a03      	ldr	r3, [r0, #32]
 8008be8:	b90b      	cbnz	r3, 8008bee <_fflush_r+0x1a>
 8008bea:	f7fe fa0f 	bl	800700c <__sinit>
 8008bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0f3      	beq.n	8008bde <_fflush_r+0xa>
 8008bf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bf8:	07d0      	lsls	r0, r2, #31
 8008bfa:	d404      	bmi.n	8008c06 <_fflush_r+0x32>
 8008bfc:	0599      	lsls	r1, r3, #22
 8008bfe:	d402      	bmi.n	8008c06 <_fflush_r+0x32>
 8008c00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c02:	f7fe fb1a 	bl	800723a <__retarget_lock_acquire_recursive>
 8008c06:	4628      	mov	r0, r5
 8008c08:	4621      	mov	r1, r4
 8008c0a:	f7ff ff5f 	bl	8008acc <__sflush_r>
 8008c0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c10:	07da      	lsls	r2, r3, #31
 8008c12:	4605      	mov	r5, r0
 8008c14:	d4e4      	bmi.n	8008be0 <_fflush_r+0xc>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	059b      	lsls	r3, r3, #22
 8008c1a:	d4e1      	bmi.n	8008be0 <_fflush_r+0xc>
 8008c1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c1e:	f7fe fb0d 	bl	800723c <__retarget_lock_release_recursive>
 8008c22:	e7dd      	b.n	8008be0 <_fflush_r+0xc>

08008c24 <fiprintf>:
 8008c24:	b40e      	push	{r1, r2, r3}
 8008c26:	b503      	push	{r0, r1, lr}
 8008c28:	4601      	mov	r1, r0
 8008c2a:	ab03      	add	r3, sp, #12
 8008c2c:	4805      	ldr	r0, [pc, #20]	@ (8008c44 <fiprintf+0x20>)
 8008c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c32:	6800      	ldr	r0, [r0, #0]
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	f000 f8d1 	bl	8008ddc <_vfiprintf_r>
 8008c3a:	b002      	add	sp, #8
 8008c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c40:	b003      	add	sp, #12
 8008c42:	4770      	bx	lr
 8008c44:	20000020 	.word	0x20000020

08008c48 <memmove>:
 8008c48:	4288      	cmp	r0, r1
 8008c4a:	b510      	push	{r4, lr}
 8008c4c:	eb01 0402 	add.w	r4, r1, r2
 8008c50:	d902      	bls.n	8008c58 <memmove+0x10>
 8008c52:	4284      	cmp	r4, r0
 8008c54:	4623      	mov	r3, r4
 8008c56:	d807      	bhi.n	8008c68 <memmove+0x20>
 8008c58:	1e43      	subs	r3, r0, #1
 8008c5a:	42a1      	cmp	r1, r4
 8008c5c:	d008      	beq.n	8008c70 <memmove+0x28>
 8008c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c66:	e7f8      	b.n	8008c5a <memmove+0x12>
 8008c68:	4402      	add	r2, r0
 8008c6a:	4601      	mov	r1, r0
 8008c6c:	428a      	cmp	r2, r1
 8008c6e:	d100      	bne.n	8008c72 <memmove+0x2a>
 8008c70:	bd10      	pop	{r4, pc}
 8008c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c7a:	e7f7      	b.n	8008c6c <memmove+0x24>

08008c7c <_sbrk_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	4d06      	ldr	r5, [pc, #24]	@ (8008c98 <_sbrk_r+0x1c>)
 8008c80:	2300      	movs	r3, #0
 8008c82:	4604      	mov	r4, r0
 8008c84:	4608      	mov	r0, r1
 8008c86:	602b      	str	r3, [r5, #0]
 8008c88:	f7f9 fa1a 	bl	80020c0 <_sbrk>
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	d102      	bne.n	8008c96 <_sbrk_r+0x1a>
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	b103      	cbz	r3, 8008c96 <_sbrk_r+0x1a>
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	20000894 	.word	0x20000894

08008c9c <memcpy>:
 8008c9c:	440a      	add	r2, r1
 8008c9e:	4291      	cmp	r1, r2
 8008ca0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ca4:	d100      	bne.n	8008ca8 <memcpy+0xc>
 8008ca6:	4770      	bx	lr
 8008ca8:	b510      	push	{r4, lr}
 8008caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cb2:	4291      	cmp	r1, r2
 8008cb4:	d1f9      	bne.n	8008caa <memcpy+0xe>
 8008cb6:	bd10      	pop	{r4, pc}

08008cb8 <abort>:
 8008cb8:	b508      	push	{r3, lr}
 8008cba:	2006      	movs	r0, #6
 8008cbc:	f000 fa62 	bl	8009184 <raise>
 8008cc0:	2001      	movs	r0, #1
 8008cc2:	f7f9 f985 	bl	8001fd0 <_exit>

08008cc6 <_calloc_r>:
 8008cc6:	b570      	push	{r4, r5, r6, lr}
 8008cc8:	fba1 5402 	umull	r5, r4, r1, r2
 8008ccc:	b93c      	cbnz	r4, 8008cde <_calloc_r+0x18>
 8008cce:	4629      	mov	r1, r5
 8008cd0:	f7ff f996 	bl	8008000 <_malloc_r>
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	b928      	cbnz	r0, 8008ce4 <_calloc_r+0x1e>
 8008cd8:	2600      	movs	r6, #0
 8008cda:	4630      	mov	r0, r6
 8008cdc:	bd70      	pop	{r4, r5, r6, pc}
 8008cde:	220c      	movs	r2, #12
 8008ce0:	6002      	str	r2, [r0, #0]
 8008ce2:	e7f9      	b.n	8008cd8 <_calloc_r+0x12>
 8008ce4:	462a      	mov	r2, r5
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	f7fe fa29 	bl	800713e <memset>
 8008cec:	e7f5      	b.n	8008cda <_calloc_r+0x14>

08008cee <__ascii_mbtowc>:
 8008cee:	b082      	sub	sp, #8
 8008cf0:	b901      	cbnz	r1, 8008cf4 <__ascii_mbtowc+0x6>
 8008cf2:	a901      	add	r1, sp, #4
 8008cf4:	b142      	cbz	r2, 8008d08 <__ascii_mbtowc+0x1a>
 8008cf6:	b14b      	cbz	r3, 8008d0c <__ascii_mbtowc+0x1e>
 8008cf8:	7813      	ldrb	r3, [r2, #0]
 8008cfa:	600b      	str	r3, [r1, #0]
 8008cfc:	7812      	ldrb	r2, [r2, #0]
 8008cfe:	1e10      	subs	r0, r2, #0
 8008d00:	bf18      	it	ne
 8008d02:	2001      	movne	r0, #1
 8008d04:	b002      	add	sp, #8
 8008d06:	4770      	bx	lr
 8008d08:	4610      	mov	r0, r2
 8008d0a:	e7fb      	b.n	8008d04 <__ascii_mbtowc+0x16>
 8008d0c:	f06f 0001 	mvn.w	r0, #1
 8008d10:	e7f8      	b.n	8008d04 <__ascii_mbtowc+0x16>

08008d12 <_realloc_r>:
 8008d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d16:	4680      	mov	r8, r0
 8008d18:	4615      	mov	r5, r2
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	b921      	cbnz	r1, 8008d28 <_realloc_r+0x16>
 8008d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d22:	4611      	mov	r1, r2
 8008d24:	f7ff b96c 	b.w	8008000 <_malloc_r>
 8008d28:	b92a      	cbnz	r2, 8008d36 <_realloc_r+0x24>
 8008d2a:	f7ff f8f5 	bl	8007f18 <_free_r>
 8008d2e:	2400      	movs	r4, #0
 8008d30:	4620      	mov	r0, r4
 8008d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d36:	f000 fa41 	bl	80091bc <_malloc_usable_size_r>
 8008d3a:	4285      	cmp	r5, r0
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	d802      	bhi.n	8008d46 <_realloc_r+0x34>
 8008d40:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d44:	d8f4      	bhi.n	8008d30 <_realloc_r+0x1e>
 8008d46:	4629      	mov	r1, r5
 8008d48:	4640      	mov	r0, r8
 8008d4a:	f7ff f959 	bl	8008000 <_malloc_r>
 8008d4e:	4607      	mov	r7, r0
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d0ec      	beq.n	8008d2e <_realloc_r+0x1c>
 8008d54:	42b5      	cmp	r5, r6
 8008d56:	462a      	mov	r2, r5
 8008d58:	4621      	mov	r1, r4
 8008d5a:	bf28      	it	cs
 8008d5c:	4632      	movcs	r2, r6
 8008d5e:	f7ff ff9d 	bl	8008c9c <memcpy>
 8008d62:	4621      	mov	r1, r4
 8008d64:	4640      	mov	r0, r8
 8008d66:	f7ff f8d7 	bl	8007f18 <_free_r>
 8008d6a:	463c      	mov	r4, r7
 8008d6c:	e7e0      	b.n	8008d30 <_realloc_r+0x1e>

08008d6e <__ascii_wctomb>:
 8008d6e:	4603      	mov	r3, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	b141      	cbz	r1, 8008d86 <__ascii_wctomb+0x18>
 8008d74:	2aff      	cmp	r2, #255	@ 0xff
 8008d76:	d904      	bls.n	8008d82 <__ascii_wctomb+0x14>
 8008d78:	228a      	movs	r2, #138	@ 0x8a
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d80:	4770      	bx	lr
 8008d82:	700a      	strb	r2, [r1, #0]
 8008d84:	2001      	movs	r0, #1
 8008d86:	4770      	bx	lr

08008d88 <__sfputc_r>:
 8008d88:	6893      	ldr	r3, [r2, #8]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	b410      	push	{r4}
 8008d90:	6093      	str	r3, [r2, #8]
 8008d92:	da08      	bge.n	8008da6 <__sfputc_r+0x1e>
 8008d94:	6994      	ldr	r4, [r2, #24]
 8008d96:	42a3      	cmp	r3, r4
 8008d98:	db01      	blt.n	8008d9e <__sfputc_r+0x16>
 8008d9a:	290a      	cmp	r1, #10
 8008d9c:	d103      	bne.n	8008da6 <__sfputc_r+0x1e>
 8008d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008da2:	f000 b933 	b.w	800900c <__swbuf_r>
 8008da6:	6813      	ldr	r3, [r2, #0]
 8008da8:	1c58      	adds	r0, r3, #1
 8008daa:	6010      	str	r0, [r2, #0]
 8008dac:	7019      	strb	r1, [r3, #0]
 8008dae:	4608      	mov	r0, r1
 8008db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <__sfputs_r>:
 8008db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db8:	4606      	mov	r6, r0
 8008dba:	460f      	mov	r7, r1
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	18d5      	adds	r5, r2, r3
 8008dc0:	42ac      	cmp	r4, r5
 8008dc2:	d101      	bne.n	8008dc8 <__sfputs_r+0x12>
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	e007      	b.n	8008dd8 <__sfputs_r+0x22>
 8008dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dcc:	463a      	mov	r2, r7
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f7ff ffda 	bl	8008d88 <__sfputc_r>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d1f3      	bne.n	8008dc0 <__sfputs_r+0xa>
 8008dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ddc <_vfiprintf_r>:
 8008ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de0:	460d      	mov	r5, r1
 8008de2:	b09d      	sub	sp, #116	@ 0x74
 8008de4:	4614      	mov	r4, r2
 8008de6:	4698      	mov	r8, r3
 8008de8:	4606      	mov	r6, r0
 8008dea:	b118      	cbz	r0, 8008df4 <_vfiprintf_r+0x18>
 8008dec:	6a03      	ldr	r3, [r0, #32]
 8008dee:	b90b      	cbnz	r3, 8008df4 <_vfiprintf_r+0x18>
 8008df0:	f7fe f90c 	bl	800700c <__sinit>
 8008df4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008df6:	07d9      	lsls	r1, r3, #31
 8008df8:	d405      	bmi.n	8008e06 <_vfiprintf_r+0x2a>
 8008dfa:	89ab      	ldrh	r3, [r5, #12]
 8008dfc:	059a      	lsls	r2, r3, #22
 8008dfe:	d402      	bmi.n	8008e06 <_vfiprintf_r+0x2a>
 8008e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e02:	f7fe fa1a 	bl	800723a <__retarget_lock_acquire_recursive>
 8008e06:	89ab      	ldrh	r3, [r5, #12]
 8008e08:	071b      	lsls	r3, r3, #28
 8008e0a:	d501      	bpl.n	8008e10 <_vfiprintf_r+0x34>
 8008e0c:	692b      	ldr	r3, [r5, #16]
 8008e0e:	b99b      	cbnz	r3, 8008e38 <_vfiprintf_r+0x5c>
 8008e10:	4629      	mov	r1, r5
 8008e12:	4630      	mov	r0, r6
 8008e14:	f000 f938 	bl	8009088 <__swsetup_r>
 8008e18:	b170      	cbz	r0, 8008e38 <_vfiprintf_r+0x5c>
 8008e1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e1c:	07dc      	lsls	r4, r3, #31
 8008e1e:	d504      	bpl.n	8008e2a <_vfiprintf_r+0x4e>
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295
 8008e24:	b01d      	add	sp, #116	@ 0x74
 8008e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2a:	89ab      	ldrh	r3, [r5, #12]
 8008e2c:	0598      	lsls	r0, r3, #22
 8008e2e:	d4f7      	bmi.n	8008e20 <_vfiprintf_r+0x44>
 8008e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e32:	f7fe fa03 	bl	800723c <__retarget_lock_release_recursive>
 8008e36:	e7f3      	b.n	8008e20 <_vfiprintf_r+0x44>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e3c:	2320      	movs	r3, #32
 8008e3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e46:	2330      	movs	r3, #48	@ 0x30
 8008e48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ff8 <_vfiprintf_r+0x21c>
 8008e4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e50:	f04f 0901 	mov.w	r9, #1
 8008e54:	4623      	mov	r3, r4
 8008e56:	469a      	mov	sl, r3
 8008e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e5c:	b10a      	cbz	r2, 8008e62 <_vfiprintf_r+0x86>
 8008e5e:	2a25      	cmp	r2, #37	@ 0x25
 8008e60:	d1f9      	bne.n	8008e56 <_vfiprintf_r+0x7a>
 8008e62:	ebba 0b04 	subs.w	fp, sl, r4
 8008e66:	d00b      	beq.n	8008e80 <_vfiprintf_r+0xa4>
 8008e68:	465b      	mov	r3, fp
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f7ff ffa1 	bl	8008db6 <__sfputs_r>
 8008e74:	3001      	adds	r0, #1
 8008e76:	f000 80a7 	beq.w	8008fc8 <_vfiprintf_r+0x1ec>
 8008e7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e7c:	445a      	add	r2, fp
 8008e7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e80:	f89a 3000 	ldrb.w	r3, [sl]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f000 809f 	beq.w	8008fc8 <_vfiprintf_r+0x1ec>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e94:	f10a 0a01 	add.w	sl, sl, #1
 8008e98:	9304      	str	r3, [sp, #16]
 8008e9a:	9307      	str	r3, [sp, #28]
 8008e9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ea0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ea2:	4654      	mov	r4, sl
 8008ea4:	2205      	movs	r2, #5
 8008ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eaa:	4853      	ldr	r0, [pc, #332]	@ (8008ff8 <_vfiprintf_r+0x21c>)
 8008eac:	f7f7 f990 	bl	80001d0 <memchr>
 8008eb0:	9a04      	ldr	r2, [sp, #16]
 8008eb2:	b9d8      	cbnz	r0, 8008eec <_vfiprintf_r+0x110>
 8008eb4:	06d1      	lsls	r1, r2, #27
 8008eb6:	bf44      	itt	mi
 8008eb8:	2320      	movmi	r3, #32
 8008eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ebe:	0713      	lsls	r3, r2, #28
 8008ec0:	bf44      	itt	mi
 8008ec2:	232b      	movmi	r3, #43	@ 0x2b
 8008ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ece:	d015      	beq.n	8008efc <_vfiprintf_r+0x120>
 8008ed0:	9a07      	ldr	r2, [sp, #28]
 8008ed2:	4654      	mov	r4, sl
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	f04f 0c0a 	mov.w	ip, #10
 8008eda:	4621      	mov	r1, r4
 8008edc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ee0:	3b30      	subs	r3, #48	@ 0x30
 8008ee2:	2b09      	cmp	r3, #9
 8008ee4:	d94b      	bls.n	8008f7e <_vfiprintf_r+0x1a2>
 8008ee6:	b1b0      	cbz	r0, 8008f16 <_vfiprintf_r+0x13a>
 8008ee8:	9207      	str	r2, [sp, #28]
 8008eea:	e014      	b.n	8008f16 <_vfiprintf_r+0x13a>
 8008eec:	eba0 0308 	sub.w	r3, r0, r8
 8008ef0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	9304      	str	r3, [sp, #16]
 8008ef8:	46a2      	mov	sl, r4
 8008efa:	e7d2      	b.n	8008ea2 <_vfiprintf_r+0xc6>
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	1d19      	adds	r1, r3, #4
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	9103      	str	r1, [sp, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bfbb      	ittet	lt
 8008f08:	425b      	neglt	r3, r3
 8008f0a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f0e:	9307      	strge	r3, [sp, #28]
 8008f10:	9307      	strlt	r3, [sp, #28]
 8008f12:	bfb8      	it	lt
 8008f14:	9204      	strlt	r2, [sp, #16]
 8008f16:	7823      	ldrb	r3, [r4, #0]
 8008f18:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f1a:	d10a      	bne.n	8008f32 <_vfiprintf_r+0x156>
 8008f1c:	7863      	ldrb	r3, [r4, #1]
 8008f1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f20:	d132      	bne.n	8008f88 <_vfiprintf_r+0x1ac>
 8008f22:	9b03      	ldr	r3, [sp, #12]
 8008f24:	1d1a      	adds	r2, r3, #4
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	9203      	str	r2, [sp, #12]
 8008f2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f2e:	3402      	adds	r4, #2
 8008f30:	9305      	str	r3, [sp, #20]
 8008f32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009008 <_vfiprintf_r+0x22c>
 8008f36:	7821      	ldrb	r1, [r4, #0]
 8008f38:	2203      	movs	r2, #3
 8008f3a:	4650      	mov	r0, sl
 8008f3c:	f7f7 f948 	bl	80001d0 <memchr>
 8008f40:	b138      	cbz	r0, 8008f52 <_vfiprintf_r+0x176>
 8008f42:	9b04      	ldr	r3, [sp, #16]
 8008f44:	eba0 000a 	sub.w	r0, r0, sl
 8008f48:	2240      	movs	r2, #64	@ 0x40
 8008f4a:	4082      	lsls	r2, r0
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	3401      	adds	r4, #1
 8008f50:	9304      	str	r3, [sp, #16]
 8008f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f56:	4829      	ldr	r0, [pc, #164]	@ (8008ffc <_vfiprintf_r+0x220>)
 8008f58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f5c:	2206      	movs	r2, #6
 8008f5e:	f7f7 f937 	bl	80001d0 <memchr>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d03f      	beq.n	8008fe6 <_vfiprintf_r+0x20a>
 8008f66:	4b26      	ldr	r3, [pc, #152]	@ (8009000 <_vfiprintf_r+0x224>)
 8008f68:	bb1b      	cbnz	r3, 8008fb2 <_vfiprintf_r+0x1d6>
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	3307      	adds	r3, #7
 8008f6e:	f023 0307 	bic.w	r3, r3, #7
 8008f72:	3308      	adds	r3, #8
 8008f74:	9303      	str	r3, [sp, #12]
 8008f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f78:	443b      	add	r3, r7
 8008f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f7c:	e76a      	b.n	8008e54 <_vfiprintf_r+0x78>
 8008f7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f82:	460c      	mov	r4, r1
 8008f84:	2001      	movs	r0, #1
 8008f86:	e7a8      	b.n	8008eda <_vfiprintf_r+0xfe>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	3401      	adds	r4, #1
 8008f8c:	9305      	str	r3, [sp, #20]
 8008f8e:	4619      	mov	r1, r3
 8008f90:	f04f 0c0a 	mov.w	ip, #10
 8008f94:	4620      	mov	r0, r4
 8008f96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f9a:	3a30      	subs	r2, #48	@ 0x30
 8008f9c:	2a09      	cmp	r2, #9
 8008f9e:	d903      	bls.n	8008fa8 <_vfiprintf_r+0x1cc>
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d0c6      	beq.n	8008f32 <_vfiprintf_r+0x156>
 8008fa4:	9105      	str	r1, [sp, #20]
 8008fa6:	e7c4      	b.n	8008f32 <_vfiprintf_r+0x156>
 8008fa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fac:	4604      	mov	r4, r0
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e7f0      	b.n	8008f94 <_vfiprintf_r+0x1b8>
 8008fb2:	ab03      	add	r3, sp, #12
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	462a      	mov	r2, r5
 8008fb8:	4b12      	ldr	r3, [pc, #72]	@ (8009004 <_vfiprintf_r+0x228>)
 8008fba:	a904      	add	r1, sp, #16
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	f7fd fbe1 	bl	8006784 <_printf_float>
 8008fc2:	4607      	mov	r7, r0
 8008fc4:	1c78      	adds	r0, r7, #1
 8008fc6:	d1d6      	bne.n	8008f76 <_vfiprintf_r+0x19a>
 8008fc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fca:	07d9      	lsls	r1, r3, #31
 8008fcc:	d405      	bmi.n	8008fda <_vfiprintf_r+0x1fe>
 8008fce:	89ab      	ldrh	r3, [r5, #12]
 8008fd0:	059a      	lsls	r2, r3, #22
 8008fd2:	d402      	bmi.n	8008fda <_vfiprintf_r+0x1fe>
 8008fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fd6:	f7fe f931 	bl	800723c <__retarget_lock_release_recursive>
 8008fda:	89ab      	ldrh	r3, [r5, #12]
 8008fdc:	065b      	lsls	r3, r3, #25
 8008fde:	f53f af1f 	bmi.w	8008e20 <_vfiprintf_r+0x44>
 8008fe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fe4:	e71e      	b.n	8008e24 <_vfiprintf_r+0x48>
 8008fe6:	ab03      	add	r3, sp, #12
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	462a      	mov	r2, r5
 8008fec:	4b05      	ldr	r3, [pc, #20]	@ (8009004 <_vfiprintf_r+0x228>)
 8008fee:	a904      	add	r1, sp, #16
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f7fd fe5f 	bl	8006cb4 <_printf_i>
 8008ff6:	e7e4      	b.n	8008fc2 <_vfiprintf_r+0x1e6>
 8008ff8:	0800a8f0 	.word	0x0800a8f0
 8008ffc:	0800a8fa 	.word	0x0800a8fa
 8009000:	08006785 	.word	0x08006785
 8009004:	08008db7 	.word	0x08008db7
 8009008:	0800a8f6 	.word	0x0800a8f6

0800900c <__swbuf_r>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	460e      	mov	r6, r1
 8009010:	4614      	mov	r4, r2
 8009012:	4605      	mov	r5, r0
 8009014:	b118      	cbz	r0, 800901e <__swbuf_r+0x12>
 8009016:	6a03      	ldr	r3, [r0, #32]
 8009018:	b90b      	cbnz	r3, 800901e <__swbuf_r+0x12>
 800901a:	f7fd fff7 	bl	800700c <__sinit>
 800901e:	69a3      	ldr	r3, [r4, #24]
 8009020:	60a3      	str	r3, [r4, #8]
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	071a      	lsls	r2, r3, #28
 8009026:	d501      	bpl.n	800902c <__swbuf_r+0x20>
 8009028:	6923      	ldr	r3, [r4, #16]
 800902a:	b943      	cbnz	r3, 800903e <__swbuf_r+0x32>
 800902c:	4621      	mov	r1, r4
 800902e:	4628      	mov	r0, r5
 8009030:	f000 f82a 	bl	8009088 <__swsetup_r>
 8009034:	b118      	cbz	r0, 800903e <__swbuf_r+0x32>
 8009036:	f04f 37ff 	mov.w	r7, #4294967295
 800903a:	4638      	mov	r0, r7
 800903c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	6922      	ldr	r2, [r4, #16]
 8009042:	1a98      	subs	r0, r3, r2
 8009044:	6963      	ldr	r3, [r4, #20]
 8009046:	b2f6      	uxtb	r6, r6
 8009048:	4283      	cmp	r3, r0
 800904a:	4637      	mov	r7, r6
 800904c:	dc05      	bgt.n	800905a <__swbuf_r+0x4e>
 800904e:	4621      	mov	r1, r4
 8009050:	4628      	mov	r0, r5
 8009052:	f7ff fdbf 	bl	8008bd4 <_fflush_r>
 8009056:	2800      	cmp	r0, #0
 8009058:	d1ed      	bne.n	8009036 <__swbuf_r+0x2a>
 800905a:	68a3      	ldr	r3, [r4, #8]
 800905c:	3b01      	subs	r3, #1
 800905e:	60a3      	str	r3, [r4, #8]
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	1c5a      	adds	r2, r3, #1
 8009064:	6022      	str	r2, [r4, #0]
 8009066:	701e      	strb	r6, [r3, #0]
 8009068:	6962      	ldr	r2, [r4, #20]
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	429a      	cmp	r2, r3
 800906e:	d004      	beq.n	800907a <__swbuf_r+0x6e>
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	07db      	lsls	r3, r3, #31
 8009074:	d5e1      	bpl.n	800903a <__swbuf_r+0x2e>
 8009076:	2e0a      	cmp	r6, #10
 8009078:	d1df      	bne.n	800903a <__swbuf_r+0x2e>
 800907a:	4621      	mov	r1, r4
 800907c:	4628      	mov	r0, r5
 800907e:	f7ff fda9 	bl	8008bd4 <_fflush_r>
 8009082:	2800      	cmp	r0, #0
 8009084:	d0d9      	beq.n	800903a <__swbuf_r+0x2e>
 8009086:	e7d6      	b.n	8009036 <__swbuf_r+0x2a>

08009088 <__swsetup_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4b29      	ldr	r3, [pc, #164]	@ (8009130 <__swsetup_r+0xa8>)
 800908c:	4605      	mov	r5, r0
 800908e:	6818      	ldr	r0, [r3, #0]
 8009090:	460c      	mov	r4, r1
 8009092:	b118      	cbz	r0, 800909c <__swsetup_r+0x14>
 8009094:	6a03      	ldr	r3, [r0, #32]
 8009096:	b90b      	cbnz	r3, 800909c <__swsetup_r+0x14>
 8009098:	f7fd ffb8 	bl	800700c <__sinit>
 800909c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090a0:	0719      	lsls	r1, r3, #28
 80090a2:	d422      	bmi.n	80090ea <__swsetup_r+0x62>
 80090a4:	06da      	lsls	r2, r3, #27
 80090a6:	d407      	bmi.n	80090b8 <__swsetup_r+0x30>
 80090a8:	2209      	movs	r2, #9
 80090aa:	602a      	str	r2, [r5, #0]
 80090ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090b0:	81a3      	strh	r3, [r4, #12]
 80090b2:	f04f 30ff 	mov.w	r0, #4294967295
 80090b6:	e033      	b.n	8009120 <__swsetup_r+0x98>
 80090b8:	0758      	lsls	r0, r3, #29
 80090ba:	d512      	bpl.n	80090e2 <__swsetup_r+0x5a>
 80090bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090be:	b141      	cbz	r1, 80090d2 <__swsetup_r+0x4a>
 80090c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090c4:	4299      	cmp	r1, r3
 80090c6:	d002      	beq.n	80090ce <__swsetup_r+0x46>
 80090c8:	4628      	mov	r0, r5
 80090ca:	f7fe ff25 	bl	8007f18 <_free_r>
 80090ce:	2300      	movs	r3, #0
 80090d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80090d8:	81a3      	strh	r3, [r4, #12]
 80090da:	2300      	movs	r3, #0
 80090dc:	6063      	str	r3, [r4, #4]
 80090de:	6923      	ldr	r3, [r4, #16]
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	f043 0308 	orr.w	r3, r3, #8
 80090e8:	81a3      	strh	r3, [r4, #12]
 80090ea:	6923      	ldr	r3, [r4, #16]
 80090ec:	b94b      	cbnz	r3, 8009102 <__swsetup_r+0x7a>
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090f8:	d003      	beq.n	8009102 <__swsetup_r+0x7a>
 80090fa:	4621      	mov	r1, r4
 80090fc:	4628      	mov	r0, r5
 80090fe:	f000 f88b 	bl	8009218 <__smakebuf_r>
 8009102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009106:	f013 0201 	ands.w	r2, r3, #1
 800910a:	d00a      	beq.n	8009122 <__swsetup_r+0x9a>
 800910c:	2200      	movs	r2, #0
 800910e:	60a2      	str	r2, [r4, #8]
 8009110:	6962      	ldr	r2, [r4, #20]
 8009112:	4252      	negs	r2, r2
 8009114:	61a2      	str	r2, [r4, #24]
 8009116:	6922      	ldr	r2, [r4, #16]
 8009118:	b942      	cbnz	r2, 800912c <__swsetup_r+0xa4>
 800911a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800911e:	d1c5      	bne.n	80090ac <__swsetup_r+0x24>
 8009120:	bd38      	pop	{r3, r4, r5, pc}
 8009122:	0799      	lsls	r1, r3, #30
 8009124:	bf58      	it	pl
 8009126:	6962      	ldrpl	r2, [r4, #20]
 8009128:	60a2      	str	r2, [r4, #8]
 800912a:	e7f4      	b.n	8009116 <__swsetup_r+0x8e>
 800912c:	2000      	movs	r0, #0
 800912e:	e7f7      	b.n	8009120 <__swsetup_r+0x98>
 8009130:	20000020 	.word	0x20000020

08009134 <_raise_r>:
 8009134:	291f      	cmp	r1, #31
 8009136:	b538      	push	{r3, r4, r5, lr}
 8009138:	4605      	mov	r5, r0
 800913a:	460c      	mov	r4, r1
 800913c:	d904      	bls.n	8009148 <_raise_r+0x14>
 800913e:	2316      	movs	r3, #22
 8009140:	6003      	str	r3, [r0, #0]
 8009142:	f04f 30ff 	mov.w	r0, #4294967295
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800914a:	b112      	cbz	r2, 8009152 <_raise_r+0x1e>
 800914c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009150:	b94b      	cbnz	r3, 8009166 <_raise_r+0x32>
 8009152:	4628      	mov	r0, r5
 8009154:	f000 f830 	bl	80091b8 <_getpid_r>
 8009158:	4622      	mov	r2, r4
 800915a:	4601      	mov	r1, r0
 800915c:	4628      	mov	r0, r5
 800915e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009162:	f000 b817 	b.w	8009194 <_kill_r>
 8009166:	2b01      	cmp	r3, #1
 8009168:	d00a      	beq.n	8009180 <_raise_r+0x4c>
 800916a:	1c59      	adds	r1, r3, #1
 800916c:	d103      	bne.n	8009176 <_raise_r+0x42>
 800916e:	2316      	movs	r3, #22
 8009170:	6003      	str	r3, [r0, #0]
 8009172:	2001      	movs	r0, #1
 8009174:	e7e7      	b.n	8009146 <_raise_r+0x12>
 8009176:	2100      	movs	r1, #0
 8009178:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800917c:	4620      	mov	r0, r4
 800917e:	4798      	blx	r3
 8009180:	2000      	movs	r0, #0
 8009182:	e7e0      	b.n	8009146 <_raise_r+0x12>

08009184 <raise>:
 8009184:	4b02      	ldr	r3, [pc, #8]	@ (8009190 <raise+0xc>)
 8009186:	4601      	mov	r1, r0
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	f7ff bfd3 	b.w	8009134 <_raise_r>
 800918e:	bf00      	nop
 8009190:	20000020 	.word	0x20000020

08009194 <_kill_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4d07      	ldr	r5, [pc, #28]	@ (80091b4 <_kill_r+0x20>)
 8009198:	2300      	movs	r3, #0
 800919a:	4604      	mov	r4, r0
 800919c:	4608      	mov	r0, r1
 800919e:	4611      	mov	r1, r2
 80091a0:	602b      	str	r3, [r5, #0]
 80091a2:	f7f8 ff05 	bl	8001fb0 <_kill>
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	d102      	bne.n	80091b0 <_kill_r+0x1c>
 80091aa:	682b      	ldr	r3, [r5, #0]
 80091ac:	b103      	cbz	r3, 80091b0 <_kill_r+0x1c>
 80091ae:	6023      	str	r3, [r4, #0]
 80091b0:	bd38      	pop	{r3, r4, r5, pc}
 80091b2:	bf00      	nop
 80091b4:	20000894 	.word	0x20000894

080091b8 <_getpid_r>:
 80091b8:	f7f8 bef2 	b.w	8001fa0 <_getpid>

080091bc <_malloc_usable_size_r>:
 80091bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c0:	1f18      	subs	r0, r3, #4
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bfbc      	itt	lt
 80091c6:	580b      	ldrlt	r3, [r1, r0]
 80091c8:	18c0      	addlt	r0, r0, r3
 80091ca:	4770      	bx	lr

080091cc <__swhatbuf_r>:
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	460c      	mov	r4, r1
 80091d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d4:	2900      	cmp	r1, #0
 80091d6:	b096      	sub	sp, #88	@ 0x58
 80091d8:	4615      	mov	r5, r2
 80091da:	461e      	mov	r6, r3
 80091dc:	da0d      	bge.n	80091fa <__swhatbuf_r+0x2e>
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091e4:	f04f 0100 	mov.w	r1, #0
 80091e8:	bf14      	ite	ne
 80091ea:	2340      	movne	r3, #64	@ 0x40
 80091ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091f0:	2000      	movs	r0, #0
 80091f2:	6031      	str	r1, [r6, #0]
 80091f4:	602b      	str	r3, [r5, #0]
 80091f6:	b016      	add	sp, #88	@ 0x58
 80091f8:	bd70      	pop	{r4, r5, r6, pc}
 80091fa:	466a      	mov	r2, sp
 80091fc:	f000 f848 	bl	8009290 <_fstat_r>
 8009200:	2800      	cmp	r0, #0
 8009202:	dbec      	blt.n	80091de <__swhatbuf_r+0x12>
 8009204:	9901      	ldr	r1, [sp, #4]
 8009206:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800920a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800920e:	4259      	negs	r1, r3
 8009210:	4159      	adcs	r1, r3
 8009212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009216:	e7eb      	b.n	80091f0 <__swhatbuf_r+0x24>

08009218 <__smakebuf_r>:
 8009218:	898b      	ldrh	r3, [r1, #12]
 800921a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800921c:	079d      	lsls	r5, r3, #30
 800921e:	4606      	mov	r6, r0
 8009220:	460c      	mov	r4, r1
 8009222:	d507      	bpl.n	8009234 <__smakebuf_r+0x1c>
 8009224:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	6123      	str	r3, [r4, #16]
 800922c:	2301      	movs	r3, #1
 800922e:	6163      	str	r3, [r4, #20]
 8009230:	b003      	add	sp, #12
 8009232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009234:	ab01      	add	r3, sp, #4
 8009236:	466a      	mov	r2, sp
 8009238:	f7ff ffc8 	bl	80091cc <__swhatbuf_r>
 800923c:	9f00      	ldr	r7, [sp, #0]
 800923e:	4605      	mov	r5, r0
 8009240:	4639      	mov	r1, r7
 8009242:	4630      	mov	r0, r6
 8009244:	f7fe fedc 	bl	8008000 <_malloc_r>
 8009248:	b948      	cbnz	r0, 800925e <__smakebuf_r+0x46>
 800924a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800924e:	059a      	lsls	r2, r3, #22
 8009250:	d4ee      	bmi.n	8009230 <__smakebuf_r+0x18>
 8009252:	f023 0303 	bic.w	r3, r3, #3
 8009256:	f043 0302 	orr.w	r3, r3, #2
 800925a:	81a3      	strh	r3, [r4, #12]
 800925c:	e7e2      	b.n	8009224 <__smakebuf_r+0xc>
 800925e:	89a3      	ldrh	r3, [r4, #12]
 8009260:	6020      	str	r0, [r4, #0]
 8009262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009266:	81a3      	strh	r3, [r4, #12]
 8009268:	9b01      	ldr	r3, [sp, #4]
 800926a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800926e:	b15b      	cbz	r3, 8009288 <__smakebuf_r+0x70>
 8009270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009274:	4630      	mov	r0, r6
 8009276:	f000 f81d 	bl	80092b4 <_isatty_r>
 800927a:	b128      	cbz	r0, 8009288 <__smakebuf_r+0x70>
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	f023 0303 	bic.w	r3, r3, #3
 8009282:	f043 0301 	orr.w	r3, r3, #1
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	431d      	orrs	r5, r3
 800928c:	81a5      	strh	r5, [r4, #12]
 800928e:	e7cf      	b.n	8009230 <__smakebuf_r+0x18>

08009290 <_fstat_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4d07      	ldr	r5, [pc, #28]	@ (80092b0 <_fstat_r+0x20>)
 8009294:	2300      	movs	r3, #0
 8009296:	4604      	mov	r4, r0
 8009298:	4608      	mov	r0, r1
 800929a:	4611      	mov	r1, r2
 800929c:	602b      	str	r3, [r5, #0]
 800929e:	f7f8 fee7 	bl	8002070 <_fstat>
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	d102      	bne.n	80092ac <_fstat_r+0x1c>
 80092a6:	682b      	ldr	r3, [r5, #0]
 80092a8:	b103      	cbz	r3, 80092ac <_fstat_r+0x1c>
 80092aa:	6023      	str	r3, [r4, #0]
 80092ac:	bd38      	pop	{r3, r4, r5, pc}
 80092ae:	bf00      	nop
 80092b0:	20000894 	.word	0x20000894

080092b4 <_isatty_r>:
 80092b4:	b538      	push	{r3, r4, r5, lr}
 80092b6:	4d06      	ldr	r5, [pc, #24]	@ (80092d0 <_isatty_r+0x1c>)
 80092b8:	2300      	movs	r3, #0
 80092ba:	4604      	mov	r4, r0
 80092bc:	4608      	mov	r0, r1
 80092be:	602b      	str	r3, [r5, #0]
 80092c0:	f7f8 fee6 	bl	8002090 <_isatty>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d102      	bne.n	80092ce <_isatty_r+0x1a>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	b103      	cbz	r3, 80092ce <_isatty_r+0x1a>
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	20000894 	.word	0x20000894
 80092d4:	00000000 	.word	0x00000000

080092d8 <tan>:
 80092d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092da:	ec53 2b10 	vmov	r2, r3, d0
 80092de:	4816      	ldr	r0, [pc, #88]	@ (8009338 <tan+0x60>)
 80092e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80092e4:	4281      	cmp	r1, r0
 80092e6:	d807      	bhi.n	80092f8 <tan+0x20>
 80092e8:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8009330 <tan+0x58>
 80092ec:	2001      	movs	r0, #1
 80092ee:	b005      	add	sp, #20
 80092f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f4:	f000 b824 	b.w	8009340 <__kernel_tan>
 80092f8:	4810      	ldr	r0, [pc, #64]	@ (800933c <tan+0x64>)
 80092fa:	4281      	cmp	r1, r0
 80092fc:	d908      	bls.n	8009310 <tan+0x38>
 80092fe:	4610      	mov	r0, r2
 8009300:	4619      	mov	r1, r3
 8009302:	f7f6 ffc1 	bl	8000288 <__aeabi_dsub>
 8009306:	ec41 0b10 	vmov	d0, r0, r1
 800930a:	b005      	add	sp, #20
 800930c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009310:	4668      	mov	r0, sp
 8009312:	f000 fa19 	bl	8009748 <__ieee754_rem_pio2>
 8009316:	0040      	lsls	r0, r0, #1
 8009318:	f000 0002 	and.w	r0, r0, #2
 800931c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009320:	ed9d 0b00 	vldr	d0, [sp]
 8009324:	f1c0 0001 	rsb	r0, r0, #1
 8009328:	f000 f80a 	bl	8009340 <__kernel_tan>
 800932c:	e7ed      	b.n	800930a <tan+0x32>
 800932e:	bf00      	nop
	...
 8009338:	3fe921fb 	.word	0x3fe921fb
 800933c:	7fefffff 	.word	0x7fefffff

08009340 <__kernel_tan>:
 8009340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009344:	ec5b ab10 	vmov	sl, fp, d0
 8009348:	4bdb      	ldr	r3, [pc, #876]	@ (80096b8 <__kernel_tan+0x378>)
 800934a:	b089      	sub	sp, #36	@ 0x24
 800934c:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 8009350:	429f      	cmp	r7, r3
 8009352:	ec59 8b11 	vmov	r8, r9, d1
 8009356:	4606      	mov	r6, r0
 8009358:	f8cd b008 	str.w	fp, [sp, #8]
 800935c:	d85d      	bhi.n	800941a <__kernel_tan+0xda>
 800935e:	4650      	mov	r0, sl
 8009360:	4659      	mov	r1, fp
 8009362:	f7f7 fbf9 	bl	8000b58 <__aeabi_d2iz>
 8009366:	4605      	mov	r5, r0
 8009368:	2800      	cmp	r0, #0
 800936a:	d17c      	bne.n	8009466 <__kernel_tan+0x126>
 800936c:	1c73      	adds	r3, r6, #1
 800936e:	4652      	mov	r2, sl
 8009370:	4313      	orrs	r3, r2
 8009372:	433b      	orrs	r3, r7
 8009374:	d110      	bne.n	8009398 <__kernel_tan+0x58>
 8009376:	ec4b ab10 	vmov	d0, sl, fp
 800937a:	f000 fbe1 	bl	8009b40 <fabs>
 800937e:	49cf      	ldr	r1, [pc, #828]	@ (80096bc <__kernel_tan+0x37c>)
 8009380:	ec53 2b10 	vmov	r2, r3, d0
 8009384:	2000      	movs	r0, #0
 8009386:	f7f7 fa61 	bl	800084c <__aeabi_ddiv>
 800938a:	4682      	mov	sl, r0
 800938c:	468b      	mov	fp, r1
 800938e:	ec4b ab10 	vmov	d0, sl, fp
 8009392:	b009      	add	sp, #36	@ 0x24
 8009394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009398:	2e01      	cmp	r6, #1
 800939a:	d0f8      	beq.n	800938e <__kernel_tan+0x4e>
 800939c:	4642      	mov	r2, r8
 800939e:	464b      	mov	r3, r9
 80093a0:	4650      	mov	r0, sl
 80093a2:	4659      	mov	r1, fp
 80093a4:	f7f6 ff72 	bl	800028c <__adddf3>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	460f      	mov	r7, r1
 80093ae:	2000      	movs	r0, #0
 80093b0:	49c3      	ldr	r1, [pc, #780]	@ (80096c0 <__kernel_tan+0x380>)
 80093b2:	f7f7 fa4b 	bl	800084c <__aeabi_ddiv>
 80093b6:	e9cd 0100 	strd	r0, r1, [sp]
 80093ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093be:	462e      	mov	r6, r5
 80093c0:	4652      	mov	r2, sl
 80093c2:	462c      	mov	r4, r5
 80093c4:	4630      	mov	r0, r6
 80093c6:	461d      	mov	r5, r3
 80093c8:	4639      	mov	r1, r7
 80093ca:	465b      	mov	r3, fp
 80093cc:	f7f6 ff5c 	bl	8000288 <__aeabi_dsub>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4640      	mov	r0, r8
 80093d6:	4649      	mov	r1, r9
 80093d8:	f7f6 ff56 	bl	8000288 <__aeabi_dsub>
 80093dc:	4632      	mov	r2, r6
 80093de:	462b      	mov	r3, r5
 80093e0:	f7f7 f90a 	bl	80005f8 <__aeabi_dmul>
 80093e4:	4632      	mov	r2, r6
 80093e6:	4682      	mov	sl, r0
 80093e8:	468b      	mov	fp, r1
 80093ea:	462b      	mov	r3, r5
 80093ec:	4630      	mov	r0, r6
 80093ee:	4639      	mov	r1, r7
 80093f0:	f7f7 f902 	bl	80005f8 <__aeabi_dmul>
 80093f4:	4bb1      	ldr	r3, [pc, #708]	@ (80096bc <__kernel_tan+0x37c>)
 80093f6:	2200      	movs	r2, #0
 80093f8:	f7f6 ff48 	bl	800028c <__adddf3>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4650      	mov	r0, sl
 8009402:	4659      	mov	r1, fp
 8009404:	f7f6 ff42 	bl	800028c <__adddf3>
 8009408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800940c:	f7f7 f8f4 	bl	80005f8 <__aeabi_dmul>
 8009410:	4622      	mov	r2, r4
 8009412:	462b      	mov	r3, r5
 8009414:	f7f6 ff3a 	bl	800028c <__adddf3>
 8009418:	e7b7      	b.n	800938a <__kernel_tan+0x4a>
 800941a:	4baa      	ldr	r3, [pc, #680]	@ (80096c4 <__kernel_tan+0x384>)
 800941c:	429f      	cmp	r7, r3
 800941e:	d922      	bls.n	8009466 <__kernel_tan+0x126>
 8009420:	9b02      	ldr	r3, [sp, #8]
 8009422:	2b00      	cmp	r3, #0
 8009424:	da05      	bge.n	8009432 <__kernel_tan+0xf2>
 8009426:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800942a:	469b      	mov	fp, r3
 800942c:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009430:	4699      	mov	r9, r3
 8009432:	4652      	mov	r2, sl
 8009434:	465b      	mov	r3, fp
 8009436:	a182      	add	r1, pc, #520	@ (adr r1, 8009640 <__kernel_tan+0x300>)
 8009438:	e9d1 0100 	ldrd	r0, r1, [r1]
 800943c:	f7f6 ff24 	bl	8000288 <__aeabi_dsub>
 8009440:	4642      	mov	r2, r8
 8009442:	464b      	mov	r3, r9
 8009444:	4604      	mov	r4, r0
 8009446:	460d      	mov	r5, r1
 8009448:	a17f      	add	r1, pc, #508	@ (adr r1, 8009648 <__kernel_tan+0x308>)
 800944a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800944e:	f7f6 ff1b 	bl	8000288 <__aeabi_dsub>
 8009452:	4622      	mov	r2, r4
 8009454:	462b      	mov	r3, r5
 8009456:	f7f6 ff19 	bl	800028c <__adddf3>
 800945a:	f04f 0800 	mov.w	r8, #0
 800945e:	4682      	mov	sl, r0
 8009460:	468b      	mov	fp, r1
 8009462:	f04f 0900 	mov.w	r9, #0
 8009466:	4652      	mov	r2, sl
 8009468:	465b      	mov	r3, fp
 800946a:	4650      	mov	r0, sl
 800946c:	4659      	mov	r1, fp
 800946e:	f7f7 f8c3 	bl	80005f8 <__aeabi_dmul>
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	e9cd 2300 	strd	r2, r3, [sp]
 800947a:	f7f7 f8bd 	bl	80005f8 <__aeabi_dmul>
 800947e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009482:	4604      	mov	r4, r0
 8009484:	460d      	mov	r5, r1
 8009486:	4650      	mov	r0, sl
 8009488:	4659      	mov	r1, fp
 800948a:	f7f7 f8b5 	bl	80005f8 <__aeabi_dmul>
 800948e:	a370      	add	r3, pc, #448	@ (adr r3, 8009650 <__kernel_tan+0x310>)
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009498:	4620      	mov	r0, r4
 800949a:	4629      	mov	r1, r5
 800949c:	f7f7 f8ac 	bl	80005f8 <__aeabi_dmul>
 80094a0:	a36d      	add	r3, pc, #436	@ (adr r3, 8009658 <__kernel_tan+0x318>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	f7f6 fef1 	bl	800028c <__adddf3>
 80094aa:	4622      	mov	r2, r4
 80094ac:	462b      	mov	r3, r5
 80094ae:	f7f7 f8a3 	bl	80005f8 <__aeabi_dmul>
 80094b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009660 <__kernel_tan+0x320>)
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	f7f6 fee8 	bl	800028c <__adddf3>
 80094bc:	4622      	mov	r2, r4
 80094be:	462b      	mov	r3, r5
 80094c0:	f7f7 f89a 	bl	80005f8 <__aeabi_dmul>
 80094c4:	a368      	add	r3, pc, #416	@ (adr r3, 8009668 <__kernel_tan+0x328>)
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	f7f6 fedf 	bl	800028c <__adddf3>
 80094ce:	4622      	mov	r2, r4
 80094d0:	462b      	mov	r3, r5
 80094d2:	f7f7 f891 	bl	80005f8 <__aeabi_dmul>
 80094d6:	a366      	add	r3, pc, #408	@ (adr r3, 8009670 <__kernel_tan+0x330>)
 80094d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094dc:	f7f6 fed6 	bl	800028c <__adddf3>
 80094e0:	4622      	mov	r2, r4
 80094e2:	462b      	mov	r3, r5
 80094e4:	f7f7 f888 	bl	80005f8 <__aeabi_dmul>
 80094e8:	a363      	add	r3, pc, #396	@ (adr r3, 8009678 <__kernel_tan+0x338>)
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	f7f6 fecd 	bl	800028c <__adddf3>
 80094f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094f6:	f7f7 f87f 	bl	80005f8 <__aeabi_dmul>
 80094fa:	a361      	add	r3, pc, #388	@ (adr r3, 8009680 <__kernel_tan+0x340>)
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009504:	4620      	mov	r0, r4
 8009506:	4629      	mov	r1, r5
 8009508:	f7f7 f876 	bl	80005f8 <__aeabi_dmul>
 800950c:	a35e      	add	r3, pc, #376	@ (adr r3, 8009688 <__kernel_tan+0x348>)
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f7f6 febb 	bl	800028c <__adddf3>
 8009516:	4622      	mov	r2, r4
 8009518:	462b      	mov	r3, r5
 800951a:	f7f7 f86d 	bl	80005f8 <__aeabi_dmul>
 800951e:	a35c      	add	r3, pc, #368	@ (adr r3, 8009690 <__kernel_tan+0x350>)
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	f7f6 feb2 	bl	800028c <__adddf3>
 8009528:	4622      	mov	r2, r4
 800952a:	462b      	mov	r3, r5
 800952c:	f7f7 f864 	bl	80005f8 <__aeabi_dmul>
 8009530:	a359      	add	r3, pc, #356	@ (adr r3, 8009698 <__kernel_tan+0x358>)
 8009532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009536:	f7f6 fea9 	bl	800028c <__adddf3>
 800953a:	4622      	mov	r2, r4
 800953c:	462b      	mov	r3, r5
 800953e:	f7f7 f85b 	bl	80005f8 <__aeabi_dmul>
 8009542:	a357      	add	r3, pc, #348	@ (adr r3, 80096a0 <__kernel_tan+0x360>)
 8009544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009548:	f7f6 fea0 	bl	800028c <__adddf3>
 800954c:	4622      	mov	r2, r4
 800954e:	462b      	mov	r3, r5
 8009550:	f7f7 f852 	bl	80005f8 <__aeabi_dmul>
 8009554:	a354      	add	r3, pc, #336	@ (adr r3, 80096a8 <__kernel_tan+0x368>)
 8009556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955a:	f7f6 fe97 	bl	800028c <__adddf3>
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009566:	f7f6 fe91 	bl	800028c <__adddf3>
 800956a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800956e:	f7f7 f843 	bl	80005f8 <__aeabi_dmul>
 8009572:	4642      	mov	r2, r8
 8009574:	464b      	mov	r3, r9
 8009576:	f7f6 fe89 	bl	800028c <__adddf3>
 800957a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800957e:	f7f7 f83b 	bl	80005f8 <__aeabi_dmul>
 8009582:	4642      	mov	r2, r8
 8009584:	464b      	mov	r3, r9
 8009586:	f7f6 fe81 	bl	800028c <__adddf3>
 800958a:	a349      	add	r3, pc, #292	@ (adr r3, 80096b0 <__kernel_tan+0x370>)
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	4604      	mov	r4, r0
 8009592:	460d      	mov	r5, r1
 8009594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009598:	f7f7 f82e 	bl	80005f8 <__aeabi_dmul>
 800959c:	4622      	mov	r2, r4
 800959e:	462b      	mov	r3, r5
 80095a0:	f7f6 fe74 	bl	800028c <__adddf3>
 80095a4:	e9cd 0100 	strd	r0, r1, [sp]
 80095a8:	460b      	mov	r3, r1
 80095aa:	4602      	mov	r2, r0
 80095ac:	4659      	mov	r1, fp
 80095ae:	4650      	mov	r0, sl
 80095b0:	f7f6 fe6c 	bl	800028c <__adddf3>
 80095b4:	4b43      	ldr	r3, [pc, #268]	@ (80096c4 <__kernel_tan+0x384>)
 80095b6:	429f      	cmp	r7, r3
 80095b8:	4604      	mov	r4, r0
 80095ba:	460d      	mov	r5, r1
 80095bc:	f240 8084 	bls.w	80096c8 <__kernel_tan+0x388>
 80095c0:	4630      	mov	r0, r6
 80095c2:	f7f6 ffaf 	bl	8000524 <__aeabi_i2d>
 80095c6:	4622      	mov	r2, r4
 80095c8:	4680      	mov	r8, r0
 80095ca:	4689      	mov	r9, r1
 80095cc:	462b      	mov	r3, r5
 80095ce:	4620      	mov	r0, r4
 80095d0:	4629      	mov	r1, r5
 80095d2:	f7f7 f811 	bl	80005f8 <__aeabi_dmul>
 80095d6:	4642      	mov	r2, r8
 80095d8:	4606      	mov	r6, r0
 80095da:	460f      	mov	r7, r1
 80095dc:	464b      	mov	r3, r9
 80095de:	4620      	mov	r0, r4
 80095e0:	4629      	mov	r1, r5
 80095e2:	f7f6 fe53 	bl	800028c <__adddf3>
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	4630      	mov	r0, r6
 80095ec:	4639      	mov	r1, r7
 80095ee:	f7f7 f92d 	bl	800084c <__aeabi_ddiv>
 80095f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095f6:	f7f6 fe47 	bl	8000288 <__aeabi_dsub>
 80095fa:	4602      	mov	r2, r0
 80095fc:	460b      	mov	r3, r1
 80095fe:	4650      	mov	r0, sl
 8009600:	4659      	mov	r1, fp
 8009602:	f7f6 fe41 	bl	8000288 <__aeabi_dsub>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	f7f6 fe3f 	bl	800028c <__adddf3>
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	4640      	mov	r0, r8
 8009614:	4649      	mov	r1, r9
 8009616:	f7f6 fe37 	bl	8000288 <__aeabi_dsub>
 800961a:	9b02      	ldr	r3, [sp, #8]
 800961c:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8009620:	f00a 0a02 	and.w	sl, sl, #2
 8009624:	4604      	mov	r4, r0
 8009626:	f1ca 0001 	rsb	r0, sl, #1
 800962a:	460d      	mov	r5, r1
 800962c:	f7f6 ff7a 	bl	8000524 <__aeabi_i2d>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	4620      	mov	r0, r4
 8009636:	4629      	mov	r1, r5
 8009638:	f7f6 ffde 	bl	80005f8 <__aeabi_dmul>
 800963c:	e6a5      	b.n	800938a <__kernel_tan+0x4a>
 800963e:	bf00      	nop
 8009640:	54442d18 	.word	0x54442d18
 8009644:	3fe921fb 	.word	0x3fe921fb
 8009648:	33145c07 	.word	0x33145c07
 800964c:	3c81a626 	.word	0x3c81a626
 8009650:	74bf7ad4 	.word	0x74bf7ad4
 8009654:	3efb2a70 	.word	0x3efb2a70
 8009658:	32f0a7e9 	.word	0x32f0a7e9
 800965c:	3f12b80f 	.word	0x3f12b80f
 8009660:	1a8d1068 	.word	0x1a8d1068
 8009664:	3f3026f7 	.word	0x3f3026f7
 8009668:	fee08315 	.word	0xfee08315
 800966c:	3f57dbc8 	.word	0x3f57dbc8
 8009670:	e96e8493 	.word	0xe96e8493
 8009674:	3f8226e3 	.word	0x3f8226e3
 8009678:	1bb341fe 	.word	0x1bb341fe
 800967c:	3faba1ba 	.word	0x3faba1ba
 8009680:	db605373 	.word	0xdb605373
 8009684:	bef375cb 	.word	0xbef375cb
 8009688:	a03792a6 	.word	0xa03792a6
 800968c:	3f147e88 	.word	0x3f147e88
 8009690:	f2f26501 	.word	0xf2f26501
 8009694:	3f4344d8 	.word	0x3f4344d8
 8009698:	c9560328 	.word	0xc9560328
 800969c:	3f6d6d22 	.word	0x3f6d6d22
 80096a0:	8406d637 	.word	0x8406d637
 80096a4:	3f9664f4 	.word	0x3f9664f4
 80096a8:	1110fe7a 	.word	0x1110fe7a
 80096ac:	3fc11111 	.word	0x3fc11111
 80096b0:	55555563 	.word	0x55555563
 80096b4:	3fd55555 	.word	0x3fd55555
 80096b8:	3e2fffff 	.word	0x3e2fffff
 80096bc:	3ff00000 	.word	0x3ff00000
 80096c0:	bff00000 	.word	0xbff00000
 80096c4:	3fe59427 	.word	0x3fe59427
 80096c8:	2e01      	cmp	r6, #1
 80096ca:	d033      	beq.n	8009734 <__kernel_tan+0x3f4>
 80096cc:	f04f 0800 	mov.w	r8, #0
 80096d0:	4689      	mov	r9, r1
 80096d2:	4602      	mov	r2, r0
 80096d4:	460b      	mov	r3, r1
 80096d6:	2000      	movs	r0, #0
 80096d8:	4918      	ldr	r1, [pc, #96]	@ (800973c <__kernel_tan+0x3fc>)
 80096da:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80096de:	f7f7 f8b5 	bl	800084c <__aeabi_ddiv>
 80096e2:	4652      	mov	r2, sl
 80096e4:	460f      	mov	r7, r1
 80096e6:	465b      	mov	r3, fp
 80096e8:	4606      	mov	r6, r0
 80096ea:	460d      	mov	r5, r1
 80096ec:	4640      	mov	r0, r8
 80096ee:	4649      	mov	r1, r9
 80096f0:	f7f6 fdca 	bl	8000288 <__aeabi_dsub>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096fc:	f7f6 fdc4 	bl	8000288 <__aeabi_dsub>
 8009700:	4642      	mov	r2, r8
 8009702:	463b      	mov	r3, r7
 8009704:	f7f6 ff78 	bl	80005f8 <__aeabi_dmul>
 8009708:	4642      	mov	r2, r8
 800970a:	4682      	mov	sl, r0
 800970c:	468b      	mov	fp, r1
 800970e:	463b      	mov	r3, r7
 8009710:	4640      	mov	r0, r8
 8009712:	4649      	mov	r1, r9
 8009714:	f7f6 ff70 	bl	80005f8 <__aeabi_dmul>
 8009718:	4b09      	ldr	r3, [pc, #36]	@ (8009740 <__kernel_tan+0x400>)
 800971a:	2200      	movs	r2, #0
 800971c:	f7f6 fdb6 	bl	800028c <__adddf3>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4650      	mov	r0, sl
 8009726:	4659      	mov	r1, fp
 8009728:	f7f6 fdb0 	bl	800028c <__adddf3>
 800972c:	4644      	mov	r4, r8
 800972e:	4632      	mov	r2, r6
 8009730:	463b      	mov	r3, r7
 8009732:	e66b      	b.n	800940c <__kernel_tan+0xcc>
 8009734:	4682      	mov	sl, r0
 8009736:	468b      	mov	fp, r1
 8009738:	e629      	b.n	800938e <__kernel_tan+0x4e>
 800973a:	bf00      	nop
 800973c:	bff00000 	.word	0xbff00000
 8009740:	3ff00000 	.word	0x3ff00000
 8009744:	00000000 	.word	0x00000000

08009748 <__ieee754_rem_pio2>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	ec57 6b10 	vmov	r6, r7, d0
 8009750:	4bc5      	ldr	r3, [pc, #788]	@ (8009a68 <__ieee754_rem_pio2+0x320>)
 8009752:	b08d      	sub	sp, #52	@ 0x34
 8009754:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009758:	4598      	cmp	r8, r3
 800975a:	4604      	mov	r4, r0
 800975c:	9704      	str	r7, [sp, #16]
 800975e:	d807      	bhi.n	8009770 <__ieee754_rem_pio2+0x28>
 8009760:	2200      	movs	r2, #0
 8009762:	2300      	movs	r3, #0
 8009764:	ed80 0b00 	vstr	d0, [r0]
 8009768:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800976c:	2500      	movs	r5, #0
 800976e:	e028      	b.n	80097c2 <__ieee754_rem_pio2+0x7a>
 8009770:	4bbe      	ldr	r3, [pc, #760]	@ (8009a6c <__ieee754_rem_pio2+0x324>)
 8009772:	4598      	cmp	r8, r3
 8009774:	d878      	bhi.n	8009868 <__ieee754_rem_pio2+0x120>
 8009776:	9b04      	ldr	r3, [sp, #16]
 8009778:	4dbd      	ldr	r5, [pc, #756]	@ (8009a70 <__ieee754_rem_pio2+0x328>)
 800977a:	2b00      	cmp	r3, #0
 800977c:	4630      	mov	r0, r6
 800977e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009a30 <__ieee754_rem_pio2+0x2e8>)
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	4639      	mov	r1, r7
 8009786:	dd38      	ble.n	80097fa <__ieee754_rem_pio2+0xb2>
 8009788:	f7f6 fd7e 	bl	8000288 <__aeabi_dsub>
 800978c:	45a8      	cmp	r8, r5
 800978e:	4606      	mov	r6, r0
 8009790:	460f      	mov	r7, r1
 8009792:	d01a      	beq.n	80097ca <__ieee754_rem_pio2+0x82>
 8009794:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009a38 <__ieee754_rem_pio2+0x2f0>)
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	f7f6 fd75 	bl	8000288 <__aeabi_dsub>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4680      	mov	r8, r0
 80097a4:	4689      	mov	r9, r1
 80097a6:	4630      	mov	r0, r6
 80097a8:	4639      	mov	r1, r7
 80097aa:	f7f6 fd6d 	bl	8000288 <__aeabi_dsub>
 80097ae:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009a38 <__ieee754_rem_pio2+0x2f0>)
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	f7f6 fd68 	bl	8000288 <__aeabi_dsub>
 80097b8:	e9c4 8900 	strd	r8, r9, [r4]
 80097bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80097c0:	2501      	movs	r5, #1
 80097c2:	4628      	mov	r0, r5
 80097c4:	b00d      	add	sp, #52	@ 0x34
 80097c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ca:	a39d      	add	r3, pc, #628	@ (adr r3, 8009a40 <__ieee754_rem_pio2+0x2f8>)
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	f7f6 fd5a 	bl	8000288 <__aeabi_dsub>
 80097d4:	a39c      	add	r3, pc, #624	@ (adr r3, 8009a48 <__ieee754_rem_pio2+0x300>)
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	4606      	mov	r6, r0
 80097dc:	460f      	mov	r7, r1
 80097de:	f7f6 fd53 	bl	8000288 <__aeabi_dsub>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4680      	mov	r8, r0
 80097e8:	4689      	mov	r9, r1
 80097ea:	4630      	mov	r0, r6
 80097ec:	4639      	mov	r1, r7
 80097ee:	f7f6 fd4b 	bl	8000288 <__aeabi_dsub>
 80097f2:	a395      	add	r3, pc, #596	@ (adr r3, 8009a48 <__ieee754_rem_pio2+0x300>)
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	e7dc      	b.n	80097b4 <__ieee754_rem_pio2+0x6c>
 80097fa:	f7f6 fd47 	bl	800028c <__adddf3>
 80097fe:	45a8      	cmp	r8, r5
 8009800:	4606      	mov	r6, r0
 8009802:	460f      	mov	r7, r1
 8009804:	d018      	beq.n	8009838 <__ieee754_rem_pio2+0xf0>
 8009806:	a38c      	add	r3, pc, #560	@ (adr r3, 8009a38 <__ieee754_rem_pio2+0x2f0>)
 8009808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980c:	f7f6 fd3e 	bl	800028c <__adddf3>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4680      	mov	r8, r0
 8009816:	4689      	mov	r9, r1
 8009818:	4630      	mov	r0, r6
 800981a:	4639      	mov	r1, r7
 800981c:	f7f6 fd34 	bl	8000288 <__aeabi_dsub>
 8009820:	a385      	add	r3, pc, #532	@ (adr r3, 8009a38 <__ieee754_rem_pio2+0x2f0>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f7f6 fd31 	bl	800028c <__adddf3>
 800982a:	f04f 35ff 	mov.w	r5, #4294967295
 800982e:	e9c4 8900 	strd	r8, r9, [r4]
 8009832:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009836:	e7c4      	b.n	80097c2 <__ieee754_rem_pio2+0x7a>
 8009838:	a381      	add	r3, pc, #516	@ (adr r3, 8009a40 <__ieee754_rem_pio2+0x2f8>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f7f6 fd25 	bl	800028c <__adddf3>
 8009842:	a381      	add	r3, pc, #516	@ (adr r3, 8009a48 <__ieee754_rem_pio2+0x300>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	4606      	mov	r6, r0
 800984a:	460f      	mov	r7, r1
 800984c:	f7f6 fd1e 	bl	800028c <__adddf3>
 8009850:	4602      	mov	r2, r0
 8009852:	460b      	mov	r3, r1
 8009854:	4680      	mov	r8, r0
 8009856:	4689      	mov	r9, r1
 8009858:	4630      	mov	r0, r6
 800985a:	4639      	mov	r1, r7
 800985c:	f7f6 fd14 	bl	8000288 <__aeabi_dsub>
 8009860:	a379      	add	r3, pc, #484	@ (adr r3, 8009a48 <__ieee754_rem_pio2+0x300>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	e7de      	b.n	8009826 <__ieee754_rem_pio2+0xde>
 8009868:	4b82      	ldr	r3, [pc, #520]	@ (8009a74 <__ieee754_rem_pio2+0x32c>)
 800986a:	4598      	cmp	r8, r3
 800986c:	f200 80d1 	bhi.w	8009a12 <__ieee754_rem_pio2+0x2ca>
 8009870:	f000 f966 	bl	8009b40 <fabs>
 8009874:	ec57 6b10 	vmov	r6, r7, d0
 8009878:	a375      	add	r3, pc, #468	@ (adr r3, 8009a50 <__ieee754_rem_pio2+0x308>)
 800987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987e:	4630      	mov	r0, r6
 8009880:	4639      	mov	r1, r7
 8009882:	f7f6 feb9 	bl	80005f8 <__aeabi_dmul>
 8009886:	4b7c      	ldr	r3, [pc, #496]	@ (8009a78 <__ieee754_rem_pio2+0x330>)
 8009888:	2200      	movs	r2, #0
 800988a:	f7f6 fcff 	bl	800028c <__adddf3>
 800988e:	f7f7 f963 	bl	8000b58 <__aeabi_d2iz>
 8009892:	4605      	mov	r5, r0
 8009894:	f7f6 fe46 	bl	8000524 <__aeabi_i2d>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098a0:	a363      	add	r3, pc, #396	@ (adr r3, 8009a30 <__ieee754_rem_pio2+0x2e8>)
 80098a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a6:	f7f6 fea7 	bl	80005f8 <__aeabi_dmul>
 80098aa:	4602      	mov	r2, r0
 80098ac:	460b      	mov	r3, r1
 80098ae:	4630      	mov	r0, r6
 80098b0:	4639      	mov	r1, r7
 80098b2:	f7f6 fce9 	bl	8000288 <__aeabi_dsub>
 80098b6:	a360      	add	r3, pc, #384	@ (adr r3, 8009a38 <__ieee754_rem_pio2+0x2f0>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	4682      	mov	sl, r0
 80098be:	468b      	mov	fp, r1
 80098c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098c4:	f7f6 fe98 	bl	80005f8 <__aeabi_dmul>
 80098c8:	2d1f      	cmp	r5, #31
 80098ca:	4606      	mov	r6, r0
 80098cc:	460f      	mov	r7, r1
 80098ce:	dc0c      	bgt.n	80098ea <__ieee754_rem_pio2+0x1a2>
 80098d0:	4b6a      	ldr	r3, [pc, #424]	@ (8009a7c <__ieee754_rem_pio2+0x334>)
 80098d2:	1e6a      	subs	r2, r5, #1
 80098d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d8:	4543      	cmp	r3, r8
 80098da:	d006      	beq.n	80098ea <__ieee754_rem_pio2+0x1a2>
 80098dc:	4632      	mov	r2, r6
 80098de:	463b      	mov	r3, r7
 80098e0:	4650      	mov	r0, sl
 80098e2:	4659      	mov	r1, fp
 80098e4:	f7f6 fcd0 	bl	8000288 <__aeabi_dsub>
 80098e8:	e00e      	b.n	8009908 <__ieee754_rem_pio2+0x1c0>
 80098ea:	463b      	mov	r3, r7
 80098ec:	4632      	mov	r2, r6
 80098ee:	4650      	mov	r0, sl
 80098f0:	4659      	mov	r1, fp
 80098f2:	f7f6 fcc9 	bl	8000288 <__aeabi_dsub>
 80098f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80098fa:	9305      	str	r3, [sp, #20]
 80098fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009900:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009904:	2b10      	cmp	r3, #16
 8009906:	dc02      	bgt.n	800990e <__ieee754_rem_pio2+0x1c6>
 8009908:	e9c4 0100 	strd	r0, r1, [r4]
 800990c:	e039      	b.n	8009982 <__ieee754_rem_pio2+0x23a>
 800990e:	a34c      	add	r3, pc, #304	@ (adr r3, 8009a40 <__ieee754_rem_pio2+0x2f8>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009918:	f7f6 fe6e 	bl	80005f8 <__aeabi_dmul>
 800991c:	4606      	mov	r6, r0
 800991e:	460f      	mov	r7, r1
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4650      	mov	r0, sl
 8009926:	4659      	mov	r1, fp
 8009928:	f7f6 fcae 	bl	8000288 <__aeabi_dsub>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4680      	mov	r8, r0
 8009932:	4689      	mov	r9, r1
 8009934:	4650      	mov	r0, sl
 8009936:	4659      	mov	r1, fp
 8009938:	f7f6 fca6 	bl	8000288 <__aeabi_dsub>
 800993c:	4632      	mov	r2, r6
 800993e:	463b      	mov	r3, r7
 8009940:	f7f6 fca2 	bl	8000288 <__aeabi_dsub>
 8009944:	a340      	add	r3, pc, #256	@ (adr r3, 8009a48 <__ieee754_rem_pio2+0x300>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	4606      	mov	r6, r0
 800994c:	460f      	mov	r7, r1
 800994e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009952:	f7f6 fe51 	bl	80005f8 <__aeabi_dmul>
 8009956:	4632      	mov	r2, r6
 8009958:	463b      	mov	r3, r7
 800995a:	f7f6 fc95 	bl	8000288 <__aeabi_dsub>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4606      	mov	r6, r0
 8009964:	460f      	mov	r7, r1
 8009966:	4640      	mov	r0, r8
 8009968:	4649      	mov	r1, r9
 800996a:	f7f6 fc8d 	bl	8000288 <__aeabi_dsub>
 800996e:	9a05      	ldr	r2, [sp, #20]
 8009970:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	2b31      	cmp	r3, #49	@ 0x31
 8009978:	dc20      	bgt.n	80099bc <__ieee754_rem_pio2+0x274>
 800997a:	e9c4 0100 	strd	r0, r1, [r4]
 800997e:	46c2      	mov	sl, r8
 8009980:	46cb      	mov	fp, r9
 8009982:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009986:	4650      	mov	r0, sl
 8009988:	4642      	mov	r2, r8
 800998a:	464b      	mov	r3, r9
 800998c:	4659      	mov	r1, fp
 800998e:	f7f6 fc7b 	bl	8000288 <__aeabi_dsub>
 8009992:	463b      	mov	r3, r7
 8009994:	4632      	mov	r2, r6
 8009996:	f7f6 fc77 	bl	8000288 <__aeabi_dsub>
 800999a:	9b04      	ldr	r3, [sp, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80099a2:	f6bf af0e 	bge.w	80097c2 <__ieee754_rem_pio2+0x7a>
 80099a6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80099aa:	6063      	str	r3, [r4, #4]
 80099ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099b0:	f8c4 8000 	str.w	r8, [r4]
 80099b4:	60a0      	str	r0, [r4, #8]
 80099b6:	60e3      	str	r3, [r4, #12]
 80099b8:	426d      	negs	r5, r5
 80099ba:	e702      	b.n	80097c2 <__ieee754_rem_pio2+0x7a>
 80099bc:	a326      	add	r3, pc, #152	@ (adr r3, 8009a58 <__ieee754_rem_pio2+0x310>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099c6:	f7f6 fe17 	bl	80005f8 <__aeabi_dmul>
 80099ca:	4606      	mov	r6, r0
 80099cc:	460f      	mov	r7, r1
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4640      	mov	r0, r8
 80099d4:	4649      	mov	r1, r9
 80099d6:	f7f6 fc57 	bl	8000288 <__aeabi_dsub>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4682      	mov	sl, r0
 80099e0:	468b      	mov	fp, r1
 80099e2:	4640      	mov	r0, r8
 80099e4:	4649      	mov	r1, r9
 80099e6:	f7f6 fc4f 	bl	8000288 <__aeabi_dsub>
 80099ea:	4632      	mov	r2, r6
 80099ec:	463b      	mov	r3, r7
 80099ee:	f7f6 fc4b 	bl	8000288 <__aeabi_dsub>
 80099f2:	a31b      	add	r3, pc, #108	@ (adr r3, 8009a60 <__ieee754_rem_pio2+0x318>)
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	4606      	mov	r6, r0
 80099fa:	460f      	mov	r7, r1
 80099fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a00:	f7f6 fdfa 	bl	80005f8 <__aeabi_dmul>
 8009a04:	4632      	mov	r2, r6
 8009a06:	463b      	mov	r3, r7
 8009a08:	f7f6 fc3e 	bl	8000288 <__aeabi_dsub>
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	460f      	mov	r7, r1
 8009a10:	e764      	b.n	80098dc <__ieee754_rem_pio2+0x194>
 8009a12:	4b1b      	ldr	r3, [pc, #108]	@ (8009a80 <__ieee754_rem_pio2+0x338>)
 8009a14:	4598      	cmp	r8, r3
 8009a16:	d935      	bls.n	8009a84 <__ieee754_rem_pio2+0x33c>
 8009a18:	4632      	mov	r2, r6
 8009a1a:	463b      	mov	r3, r7
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	4639      	mov	r1, r7
 8009a20:	f7f6 fc32 	bl	8000288 <__aeabi_dsub>
 8009a24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a28:	e9c4 0100 	strd	r0, r1, [r4]
 8009a2c:	e69e      	b.n	800976c <__ieee754_rem_pio2+0x24>
 8009a2e:	bf00      	nop
 8009a30:	54400000 	.word	0x54400000
 8009a34:	3ff921fb 	.word	0x3ff921fb
 8009a38:	1a626331 	.word	0x1a626331
 8009a3c:	3dd0b461 	.word	0x3dd0b461
 8009a40:	1a600000 	.word	0x1a600000
 8009a44:	3dd0b461 	.word	0x3dd0b461
 8009a48:	2e037073 	.word	0x2e037073
 8009a4c:	3ba3198a 	.word	0x3ba3198a
 8009a50:	6dc9c883 	.word	0x6dc9c883
 8009a54:	3fe45f30 	.word	0x3fe45f30
 8009a58:	2e000000 	.word	0x2e000000
 8009a5c:	3ba3198a 	.word	0x3ba3198a
 8009a60:	252049c1 	.word	0x252049c1
 8009a64:	397b839a 	.word	0x397b839a
 8009a68:	3fe921fb 	.word	0x3fe921fb
 8009a6c:	4002d97b 	.word	0x4002d97b
 8009a70:	3ff921fb 	.word	0x3ff921fb
 8009a74:	413921fb 	.word	0x413921fb
 8009a78:	3fe00000 	.word	0x3fe00000
 8009a7c:	0800aa0c 	.word	0x0800aa0c
 8009a80:	7fefffff 	.word	0x7fefffff
 8009a84:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009a88:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009a8c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009a90:	4630      	mov	r0, r6
 8009a92:	460f      	mov	r7, r1
 8009a94:	f7f7 f860 	bl	8000b58 <__aeabi_d2iz>
 8009a98:	f7f6 fd44 	bl	8000524 <__aeabi_i2d>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009aa8:	f7f6 fbee 	bl	8000288 <__aeabi_dsub>
 8009aac:	4b22      	ldr	r3, [pc, #136]	@ (8009b38 <__ieee754_rem_pio2+0x3f0>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f7f6 fda2 	bl	80005f8 <__aeabi_dmul>
 8009ab4:	460f      	mov	r7, r1
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	f7f7 f84e 	bl	8000b58 <__aeabi_d2iz>
 8009abc:	f7f6 fd32 	bl	8000524 <__aeabi_i2d>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009acc:	f7f6 fbdc 	bl	8000288 <__aeabi_dsub>
 8009ad0:	4b19      	ldr	r3, [pc, #100]	@ (8009b38 <__ieee754_rem_pio2+0x3f0>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f7f6 fd90 	bl	80005f8 <__aeabi_dmul>
 8009ad8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009adc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009ae0:	f04f 0803 	mov.w	r8, #3
 8009ae4:	2600      	movs	r6, #0
 8009ae6:	2700      	movs	r7, #0
 8009ae8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009aec:	4632      	mov	r2, r6
 8009aee:	463b      	mov	r3, r7
 8009af0:	46c2      	mov	sl, r8
 8009af2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009af6:	f7f6 ffe7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d1f4      	bne.n	8009ae8 <__ieee754_rem_pio2+0x3a0>
 8009afe:	4b0f      	ldr	r3, [pc, #60]	@ (8009b3c <__ieee754_rem_pio2+0x3f4>)
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	2302      	movs	r3, #2
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	462a      	mov	r2, r5
 8009b08:	4653      	mov	r3, sl
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	a806      	add	r0, sp, #24
 8009b0e:	f000 f81f 	bl	8009b50 <__kernel_rem_pio2>
 8009b12:	9b04      	ldr	r3, [sp, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	4605      	mov	r5, r0
 8009b18:	f6bf ae53 	bge.w	80097c2 <__ieee754_rem_pio2+0x7a>
 8009b1c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009b20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b24:	e9c4 2300 	strd	r2, r3, [r4]
 8009b28:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009b2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b30:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009b34:	e740      	b.n	80099b8 <__ieee754_rem_pio2+0x270>
 8009b36:	bf00      	nop
 8009b38:	41700000 	.word	0x41700000
 8009b3c:	0800aa8c 	.word	0x0800aa8c

08009b40 <fabs>:
 8009b40:	ec51 0b10 	vmov	r0, r1, d0
 8009b44:	4602      	mov	r2, r0
 8009b46:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009b4a:	ec43 2b10 	vmov	d0, r2, r3
 8009b4e:	4770      	bx	lr

08009b50 <__kernel_rem_pio2>:
 8009b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b54:	ed2d 8b02 	vpush	{d8}
 8009b58:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009b5c:	f112 0f14 	cmn.w	r2, #20
 8009b60:	9306      	str	r3, [sp, #24]
 8009b62:	9104      	str	r1, [sp, #16]
 8009b64:	4bbe      	ldr	r3, [pc, #760]	@ (8009e60 <__kernel_rem_pio2+0x310>)
 8009b66:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009b68:	9008      	str	r0, [sp, #32]
 8009b6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	9b06      	ldr	r3, [sp, #24]
 8009b72:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b76:	bfa8      	it	ge
 8009b78:	1ed4      	subge	r4, r2, #3
 8009b7a:	9305      	str	r3, [sp, #20]
 8009b7c:	bfb2      	itee	lt
 8009b7e:	2400      	movlt	r4, #0
 8009b80:	2318      	movge	r3, #24
 8009b82:	fb94 f4f3 	sdivge	r4, r4, r3
 8009b86:	f06f 0317 	mvn.w	r3, #23
 8009b8a:	fb04 3303 	mla	r3, r4, r3, r3
 8009b8e:	eb03 0b02 	add.w	fp, r3, r2
 8009b92:	9b00      	ldr	r3, [sp, #0]
 8009b94:	9a05      	ldr	r2, [sp, #20]
 8009b96:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009e50 <__kernel_rem_pio2+0x300>
 8009b9a:	eb03 0802 	add.w	r8, r3, r2
 8009b9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009ba0:	1aa7      	subs	r7, r4, r2
 8009ba2:	ae20      	add	r6, sp, #128	@ 0x80
 8009ba4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009ba8:	2500      	movs	r5, #0
 8009baa:	4545      	cmp	r5, r8
 8009bac:	dd13      	ble.n	8009bd6 <__kernel_rem_pio2+0x86>
 8009bae:	9b06      	ldr	r3, [sp, #24]
 8009bb0:	aa20      	add	r2, sp, #128	@ 0x80
 8009bb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009bb6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009bba:	f04f 0800 	mov.w	r8, #0
 8009bbe:	9b00      	ldr	r3, [sp, #0]
 8009bc0:	4598      	cmp	r8, r3
 8009bc2:	dc31      	bgt.n	8009c28 <__kernel_rem_pio2+0xd8>
 8009bc4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009e50 <__kernel_rem_pio2+0x300>
 8009bc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bd0:	462f      	mov	r7, r5
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	e01b      	b.n	8009c0e <__kernel_rem_pio2+0xbe>
 8009bd6:	42ef      	cmn	r7, r5
 8009bd8:	d407      	bmi.n	8009bea <__kernel_rem_pio2+0x9a>
 8009bda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009bde:	f7f6 fca1 	bl	8000524 <__aeabi_i2d>
 8009be2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009be6:	3501      	adds	r5, #1
 8009be8:	e7df      	b.n	8009baa <__kernel_rem_pio2+0x5a>
 8009bea:	ec51 0b18 	vmov	r0, r1, d8
 8009bee:	e7f8      	b.n	8009be2 <__kernel_rem_pio2+0x92>
 8009bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bf4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009bf8:	f7f6 fcfe 	bl	80005f8 <__aeabi_dmul>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c04:	f7f6 fb42 	bl	800028c <__adddf3>
 8009c08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c0c:	3601      	adds	r6, #1
 8009c0e:	9b05      	ldr	r3, [sp, #20]
 8009c10:	429e      	cmp	r6, r3
 8009c12:	f1a7 0708 	sub.w	r7, r7, #8
 8009c16:	ddeb      	ble.n	8009bf0 <__kernel_rem_pio2+0xa0>
 8009c18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c1c:	f108 0801 	add.w	r8, r8, #1
 8009c20:	ecaa 7b02 	vstmia	sl!, {d7}
 8009c24:	3508      	adds	r5, #8
 8009c26:	e7ca      	b.n	8009bbe <__kernel_rem_pio2+0x6e>
 8009c28:	9b00      	ldr	r3, [sp, #0]
 8009c2a:	f8dd 8000 	ldr.w	r8, [sp]
 8009c2e:	aa0c      	add	r2, sp, #48	@ 0x30
 8009c30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c34:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009c38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c3e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009c42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c44:	ab98      	add	r3, sp, #608	@ 0x260
 8009c46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009c4a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009c4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c52:	ac0c      	add	r4, sp, #48	@ 0x30
 8009c54:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009c56:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009c5a:	46a1      	mov	r9, r4
 8009c5c:	46c2      	mov	sl, r8
 8009c5e:	f1ba 0f00 	cmp.w	sl, #0
 8009c62:	f1a5 0508 	sub.w	r5, r5, #8
 8009c66:	dc77      	bgt.n	8009d58 <__kernel_rem_pio2+0x208>
 8009c68:	4658      	mov	r0, fp
 8009c6a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009c6e:	f000 fac7 	bl	800a200 <scalbn>
 8009c72:	ec57 6b10 	vmov	r6, r7, d0
 8009c76:	2200      	movs	r2, #0
 8009c78:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	4639      	mov	r1, r7
 8009c80:	f7f6 fcba 	bl	80005f8 <__aeabi_dmul>
 8009c84:	ec41 0b10 	vmov	d0, r0, r1
 8009c88:	f000 fb3a 	bl	800a300 <floor>
 8009c8c:	4b75      	ldr	r3, [pc, #468]	@ (8009e64 <__kernel_rem_pio2+0x314>)
 8009c8e:	ec51 0b10 	vmov	r0, r1, d0
 8009c92:	2200      	movs	r2, #0
 8009c94:	f7f6 fcb0 	bl	80005f8 <__aeabi_dmul>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	f7f6 faf2 	bl	8000288 <__aeabi_dsub>
 8009ca4:	460f      	mov	r7, r1
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	f7f6 ff56 	bl	8000b58 <__aeabi_d2iz>
 8009cac:	9002      	str	r0, [sp, #8]
 8009cae:	f7f6 fc39 	bl	8000524 <__aeabi_i2d>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	4639      	mov	r1, r7
 8009cba:	f7f6 fae5 	bl	8000288 <__aeabi_dsub>
 8009cbe:	f1bb 0f00 	cmp.w	fp, #0
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	460f      	mov	r7, r1
 8009cc6:	dd6c      	ble.n	8009da2 <__kernel_rem_pio2+0x252>
 8009cc8:	f108 31ff 	add.w	r1, r8, #4294967295
 8009ccc:	ab0c      	add	r3, sp, #48	@ 0x30
 8009cce:	9d02      	ldr	r5, [sp, #8]
 8009cd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009cd4:	f1cb 0018 	rsb	r0, fp, #24
 8009cd8:	fa43 f200 	asr.w	r2, r3, r0
 8009cdc:	4415      	add	r5, r2
 8009cde:	4082      	lsls	r2, r0
 8009ce0:	1a9b      	subs	r3, r3, r2
 8009ce2:	aa0c      	add	r2, sp, #48	@ 0x30
 8009ce4:	9502      	str	r5, [sp, #8]
 8009ce6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009cea:	f1cb 0217 	rsb	r2, fp, #23
 8009cee:	fa43 f902 	asr.w	r9, r3, r2
 8009cf2:	f1b9 0f00 	cmp.w	r9, #0
 8009cf6:	dd64      	ble.n	8009dc2 <__kernel_rem_pio2+0x272>
 8009cf8:	9b02      	ldr	r3, [sp, #8]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	9302      	str	r3, [sp, #8]
 8009d00:	4615      	mov	r5, r2
 8009d02:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009d06:	4590      	cmp	r8, r2
 8009d08:	f300 80b8 	bgt.w	8009e7c <__kernel_rem_pio2+0x32c>
 8009d0c:	f1bb 0f00 	cmp.w	fp, #0
 8009d10:	dd07      	ble.n	8009d22 <__kernel_rem_pio2+0x1d2>
 8009d12:	f1bb 0f01 	cmp.w	fp, #1
 8009d16:	f000 80bf 	beq.w	8009e98 <__kernel_rem_pio2+0x348>
 8009d1a:	f1bb 0f02 	cmp.w	fp, #2
 8009d1e:	f000 80c6 	beq.w	8009eae <__kernel_rem_pio2+0x35e>
 8009d22:	f1b9 0f02 	cmp.w	r9, #2
 8009d26:	d14c      	bne.n	8009dc2 <__kernel_rem_pio2+0x272>
 8009d28:	4632      	mov	r2, r6
 8009d2a:	463b      	mov	r3, r7
 8009d2c:	494e      	ldr	r1, [pc, #312]	@ (8009e68 <__kernel_rem_pio2+0x318>)
 8009d2e:	2000      	movs	r0, #0
 8009d30:	f7f6 faaa 	bl	8000288 <__aeabi_dsub>
 8009d34:	4606      	mov	r6, r0
 8009d36:	460f      	mov	r7, r1
 8009d38:	2d00      	cmp	r5, #0
 8009d3a:	d042      	beq.n	8009dc2 <__kernel_rem_pio2+0x272>
 8009d3c:	4658      	mov	r0, fp
 8009d3e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009e58 <__kernel_rem_pio2+0x308>
 8009d42:	f000 fa5d 	bl	800a200 <scalbn>
 8009d46:	4630      	mov	r0, r6
 8009d48:	4639      	mov	r1, r7
 8009d4a:	ec53 2b10 	vmov	r2, r3, d0
 8009d4e:	f7f6 fa9b 	bl	8000288 <__aeabi_dsub>
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	e034      	b.n	8009dc2 <__kernel_rem_pio2+0x272>
 8009d58:	4b44      	ldr	r3, [pc, #272]	@ (8009e6c <__kernel_rem_pio2+0x31c>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d60:	f7f6 fc4a 	bl	80005f8 <__aeabi_dmul>
 8009d64:	f7f6 fef8 	bl	8000b58 <__aeabi_d2iz>
 8009d68:	f7f6 fbdc 	bl	8000524 <__aeabi_i2d>
 8009d6c:	4b40      	ldr	r3, [pc, #256]	@ (8009e70 <__kernel_rem_pio2+0x320>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	4606      	mov	r6, r0
 8009d72:	460f      	mov	r7, r1
 8009d74:	f7f6 fc40 	bl	80005f8 <__aeabi_dmul>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d80:	f7f6 fa82 	bl	8000288 <__aeabi_dsub>
 8009d84:	f7f6 fee8 	bl	8000b58 <__aeabi_d2iz>
 8009d88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d8c:	f849 0b04 	str.w	r0, [r9], #4
 8009d90:	4639      	mov	r1, r7
 8009d92:	4630      	mov	r0, r6
 8009d94:	f7f6 fa7a 	bl	800028c <__adddf3>
 8009d98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009da0:	e75d      	b.n	8009c5e <__kernel_rem_pio2+0x10e>
 8009da2:	d107      	bne.n	8009db4 <__kernel_rem_pio2+0x264>
 8009da4:	f108 33ff 	add.w	r3, r8, #4294967295
 8009da8:	aa0c      	add	r2, sp, #48	@ 0x30
 8009daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009db2:	e79e      	b.n	8009cf2 <__kernel_rem_pio2+0x1a2>
 8009db4:	4b2f      	ldr	r3, [pc, #188]	@ (8009e74 <__kernel_rem_pio2+0x324>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	f7f6 fea4 	bl	8000b04 <__aeabi_dcmpge>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d143      	bne.n	8009e48 <__kernel_rem_pio2+0x2f8>
 8009dc0:	4681      	mov	r9, r0
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	4639      	mov	r1, r7
 8009dca:	f7f6 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	f000 80bf 	beq.w	8009f52 <__kernel_rem_pio2+0x402>
 8009dd4:	f108 33ff 	add.w	r3, r8, #4294967295
 8009dd8:	2200      	movs	r2, #0
 8009dda:	9900      	ldr	r1, [sp, #0]
 8009ddc:	428b      	cmp	r3, r1
 8009dde:	da6e      	bge.n	8009ebe <__kernel_rem_pio2+0x36e>
 8009de0:	2a00      	cmp	r2, #0
 8009de2:	f000 8089 	beq.w	8009ef8 <__kernel_rem_pio2+0x3a8>
 8009de6:	f108 38ff 	add.w	r8, r8, #4294967295
 8009dea:	ab0c      	add	r3, sp, #48	@ 0x30
 8009dec:	f1ab 0b18 	sub.w	fp, fp, #24
 8009df0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d0f6      	beq.n	8009de6 <__kernel_rem_pio2+0x296>
 8009df8:	4658      	mov	r0, fp
 8009dfa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009e58 <__kernel_rem_pio2+0x308>
 8009dfe:	f000 f9ff 	bl	800a200 <scalbn>
 8009e02:	f108 0301 	add.w	r3, r8, #1
 8009e06:	00da      	lsls	r2, r3, #3
 8009e08:	9205      	str	r2, [sp, #20]
 8009e0a:	ec55 4b10 	vmov	r4, r5, d0
 8009e0e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009e10:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009e6c <__kernel_rem_pio2+0x31c>
 8009e14:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009e18:	4646      	mov	r6, r8
 8009e1a:	f04f 0a00 	mov.w	sl, #0
 8009e1e:	2e00      	cmp	r6, #0
 8009e20:	f280 80cf 	bge.w	8009fc2 <__kernel_rem_pio2+0x472>
 8009e24:	4644      	mov	r4, r8
 8009e26:	2c00      	cmp	r4, #0
 8009e28:	f2c0 80fd 	blt.w	800a026 <__kernel_rem_pio2+0x4d6>
 8009e2c:	4b12      	ldr	r3, [pc, #72]	@ (8009e78 <__kernel_rem_pio2+0x328>)
 8009e2e:	461f      	mov	r7, r3
 8009e30:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009e32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e36:	9306      	str	r3, [sp, #24]
 8009e38:	f04f 0a00 	mov.w	sl, #0
 8009e3c:	f04f 0b00 	mov.w	fp, #0
 8009e40:	2600      	movs	r6, #0
 8009e42:	eba8 0504 	sub.w	r5, r8, r4
 8009e46:	e0e2      	b.n	800a00e <__kernel_rem_pio2+0x4be>
 8009e48:	f04f 0902 	mov.w	r9, #2
 8009e4c:	e754      	b.n	8009cf8 <__kernel_rem_pio2+0x1a8>
 8009e4e:	bf00      	nop
	...
 8009e5c:	3ff00000 	.word	0x3ff00000
 8009e60:	0800abd8 	.word	0x0800abd8
 8009e64:	40200000 	.word	0x40200000
 8009e68:	3ff00000 	.word	0x3ff00000
 8009e6c:	3e700000 	.word	0x3e700000
 8009e70:	41700000 	.word	0x41700000
 8009e74:	3fe00000 	.word	0x3fe00000
 8009e78:	0800ab98 	.word	0x0800ab98
 8009e7c:	f854 3b04 	ldr.w	r3, [r4], #4
 8009e80:	b945      	cbnz	r5, 8009e94 <__kernel_rem_pio2+0x344>
 8009e82:	b123      	cbz	r3, 8009e8e <__kernel_rem_pio2+0x33e>
 8009e84:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009e88:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	3201      	adds	r2, #1
 8009e90:	461d      	mov	r5, r3
 8009e92:	e738      	b.n	8009d06 <__kernel_rem_pio2+0x1b6>
 8009e94:	1acb      	subs	r3, r1, r3
 8009e96:	e7f7      	b.n	8009e88 <__kernel_rem_pio2+0x338>
 8009e98:	f108 32ff 	add.w	r2, r8, #4294967295
 8009e9c:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009ea6:	a90c      	add	r1, sp, #48	@ 0x30
 8009ea8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009eac:	e739      	b.n	8009d22 <__kernel_rem_pio2+0x1d2>
 8009eae:	f108 32ff 	add.w	r2, r8, #4294967295
 8009eb2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009ebc:	e7f3      	b.n	8009ea6 <__kernel_rem_pio2+0x356>
 8009ebe:	a90c      	add	r1, sp, #48	@ 0x30
 8009ec0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	430a      	orrs	r2, r1
 8009ec8:	e787      	b.n	8009dda <__kernel_rem_pio2+0x28a>
 8009eca:	3401      	adds	r4, #1
 8009ecc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009ed0:	2a00      	cmp	r2, #0
 8009ed2:	d0fa      	beq.n	8009eca <__kernel_rem_pio2+0x37a>
 8009ed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ed6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009eda:	eb0d 0503 	add.w	r5, sp, r3
 8009ede:	9b06      	ldr	r3, [sp, #24]
 8009ee0:	aa20      	add	r2, sp, #128	@ 0x80
 8009ee2:	4443      	add	r3, r8
 8009ee4:	f108 0701 	add.w	r7, r8, #1
 8009ee8:	3d98      	subs	r5, #152	@ 0x98
 8009eea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009eee:	4444      	add	r4, r8
 8009ef0:	42bc      	cmp	r4, r7
 8009ef2:	da04      	bge.n	8009efe <__kernel_rem_pio2+0x3ae>
 8009ef4:	46a0      	mov	r8, r4
 8009ef6:	e6a2      	b.n	8009c3e <__kernel_rem_pio2+0xee>
 8009ef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009efa:	2401      	movs	r4, #1
 8009efc:	e7e6      	b.n	8009ecc <__kernel_rem_pio2+0x37c>
 8009efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f00:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009f04:	f7f6 fb0e 	bl	8000524 <__aeabi_i2d>
 8009f08:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a1d0 <__kernel_rem_pio2+0x680>
 8009f0c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009f10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f18:	46b2      	mov	sl, r6
 8009f1a:	f04f 0800 	mov.w	r8, #0
 8009f1e:	9b05      	ldr	r3, [sp, #20]
 8009f20:	4598      	cmp	r8, r3
 8009f22:	dd05      	ble.n	8009f30 <__kernel_rem_pio2+0x3e0>
 8009f24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f28:	3701      	adds	r7, #1
 8009f2a:	eca5 7b02 	vstmia	r5!, {d7}
 8009f2e:	e7df      	b.n	8009ef0 <__kernel_rem_pio2+0x3a0>
 8009f30:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009f34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009f38:	f7f6 fb5e 	bl	80005f8 <__aeabi_dmul>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f44:	f7f6 f9a2 	bl	800028c <__adddf3>
 8009f48:	f108 0801 	add.w	r8, r8, #1
 8009f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f50:	e7e5      	b.n	8009f1e <__kernel_rem_pio2+0x3ce>
 8009f52:	f1cb 0000 	rsb	r0, fp, #0
 8009f56:	ec47 6b10 	vmov	d0, r6, r7
 8009f5a:	f000 f951 	bl	800a200 <scalbn>
 8009f5e:	ec55 4b10 	vmov	r4, r5, d0
 8009f62:	4b9d      	ldr	r3, [pc, #628]	@ (800a1d8 <__kernel_rem_pio2+0x688>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	4620      	mov	r0, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7f6 fdcb 	bl	8000b04 <__aeabi_dcmpge>
 8009f6e:	b300      	cbz	r0, 8009fb2 <__kernel_rem_pio2+0x462>
 8009f70:	4b9a      	ldr	r3, [pc, #616]	@ (800a1dc <__kernel_rem_pio2+0x68c>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	4620      	mov	r0, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7f6 fb3e 	bl	80005f8 <__aeabi_dmul>
 8009f7c:	f7f6 fdec 	bl	8000b58 <__aeabi_d2iz>
 8009f80:	4606      	mov	r6, r0
 8009f82:	f7f6 facf 	bl	8000524 <__aeabi_i2d>
 8009f86:	4b94      	ldr	r3, [pc, #592]	@ (800a1d8 <__kernel_rem_pio2+0x688>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f7f6 fb35 	bl	80005f8 <__aeabi_dmul>
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4602      	mov	r2, r0
 8009f92:	4629      	mov	r1, r5
 8009f94:	4620      	mov	r0, r4
 8009f96:	f7f6 f977 	bl	8000288 <__aeabi_dsub>
 8009f9a:	f7f6 fddd 	bl	8000b58 <__aeabi_d2iz>
 8009f9e:	ab0c      	add	r3, sp, #48	@ 0x30
 8009fa0:	f10b 0b18 	add.w	fp, fp, #24
 8009fa4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009fa8:	f108 0801 	add.w	r8, r8, #1
 8009fac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009fb0:	e722      	b.n	8009df8 <__kernel_rem_pio2+0x2a8>
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	f7f6 fdcf 	bl	8000b58 <__aeabi_d2iz>
 8009fba:	ab0c      	add	r3, sp, #48	@ 0x30
 8009fbc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009fc0:	e71a      	b.n	8009df8 <__kernel_rem_pio2+0x2a8>
 8009fc2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009fc4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009fc8:	f7f6 faac 	bl	8000524 <__aeabi_i2d>
 8009fcc:	4622      	mov	r2, r4
 8009fce:	462b      	mov	r3, r5
 8009fd0:	f7f6 fb12 	bl	80005f8 <__aeabi_dmul>
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009fda:	465b      	mov	r3, fp
 8009fdc:	4620      	mov	r0, r4
 8009fde:	4629      	mov	r1, r5
 8009fe0:	f7f6 fb0a 	bl	80005f8 <__aeabi_dmul>
 8009fe4:	3e01      	subs	r6, #1
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	460d      	mov	r5, r1
 8009fea:	e718      	b.n	8009e1e <__kernel_rem_pio2+0x2ce>
 8009fec:	9906      	ldr	r1, [sp, #24]
 8009fee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009ff2:	9106      	str	r1, [sp, #24]
 8009ff4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009ff8:	f7f6 fafe 	bl	80005f8 <__aeabi_dmul>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4650      	mov	r0, sl
 800a002:	4659      	mov	r1, fp
 800a004:	f7f6 f942 	bl	800028c <__adddf3>
 800a008:	3601      	adds	r6, #1
 800a00a:	4682      	mov	sl, r0
 800a00c:	468b      	mov	fp, r1
 800a00e:	9b00      	ldr	r3, [sp, #0]
 800a010:	429e      	cmp	r6, r3
 800a012:	dc01      	bgt.n	800a018 <__kernel_rem_pio2+0x4c8>
 800a014:	42b5      	cmp	r5, r6
 800a016:	dae9      	bge.n	8009fec <__kernel_rem_pio2+0x49c>
 800a018:	ab48      	add	r3, sp, #288	@ 0x120
 800a01a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a01e:	e9c5 ab00 	strd	sl, fp, [r5]
 800a022:	3c01      	subs	r4, #1
 800a024:	e6ff      	b.n	8009e26 <__kernel_rem_pio2+0x2d6>
 800a026:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a028:	2b02      	cmp	r3, #2
 800a02a:	dc0b      	bgt.n	800a044 <__kernel_rem_pio2+0x4f4>
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	dc39      	bgt.n	800a0a4 <__kernel_rem_pio2+0x554>
 800a030:	d05d      	beq.n	800a0ee <__kernel_rem_pio2+0x59e>
 800a032:	9b02      	ldr	r3, [sp, #8]
 800a034:	f003 0007 	and.w	r0, r3, #7
 800a038:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a03c:	ecbd 8b02 	vpop	{d8}
 800a040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a044:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a046:	2b03      	cmp	r3, #3
 800a048:	d1f3      	bne.n	800a032 <__kernel_rem_pio2+0x4e2>
 800a04a:	9b05      	ldr	r3, [sp, #20]
 800a04c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a050:	eb0d 0403 	add.w	r4, sp, r3
 800a054:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a058:	4625      	mov	r5, r4
 800a05a:	46c2      	mov	sl, r8
 800a05c:	f1ba 0f00 	cmp.w	sl, #0
 800a060:	f1a5 0508 	sub.w	r5, r5, #8
 800a064:	dc6b      	bgt.n	800a13e <__kernel_rem_pio2+0x5ee>
 800a066:	4645      	mov	r5, r8
 800a068:	2d01      	cmp	r5, #1
 800a06a:	f1a4 0408 	sub.w	r4, r4, #8
 800a06e:	f300 8087 	bgt.w	800a180 <__kernel_rem_pio2+0x630>
 800a072:	9c05      	ldr	r4, [sp, #20]
 800a074:	ab48      	add	r3, sp, #288	@ 0x120
 800a076:	441c      	add	r4, r3
 800a078:	2000      	movs	r0, #0
 800a07a:	2100      	movs	r1, #0
 800a07c:	f1b8 0f01 	cmp.w	r8, #1
 800a080:	f300 809c 	bgt.w	800a1bc <__kernel_rem_pio2+0x66c>
 800a084:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a088:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a08c:	f1b9 0f00 	cmp.w	r9, #0
 800a090:	f040 80a6 	bne.w	800a1e0 <__kernel_rem_pio2+0x690>
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	e9c3 7800 	strd	r7, r8, [r3]
 800a09a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a09e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a0a2:	e7c6      	b.n	800a032 <__kernel_rem_pio2+0x4e2>
 800a0a4:	9d05      	ldr	r5, [sp, #20]
 800a0a6:	ab48      	add	r3, sp, #288	@ 0x120
 800a0a8:	441d      	add	r5, r3
 800a0aa:	4644      	mov	r4, r8
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	2c00      	cmp	r4, #0
 800a0b2:	da35      	bge.n	800a120 <__kernel_rem_pio2+0x5d0>
 800a0b4:	f1b9 0f00 	cmp.w	r9, #0
 800a0b8:	d038      	beq.n	800a12c <__kernel_rem_pio2+0x5dc>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0c0:	9c04      	ldr	r4, [sp, #16]
 800a0c2:	e9c4 2300 	strd	r2, r3, [r4]
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a0ce:	f7f6 f8db 	bl	8000288 <__aeabi_dsub>
 800a0d2:	ad4a      	add	r5, sp, #296	@ 0x128
 800a0d4:	2401      	movs	r4, #1
 800a0d6:	45a0      	cmp	r8, r4
 800a0d8:	da2b      	bge.n	800a132 <__kernel_rem_pio2+0x5e2>
 800a0da:	f1b9 0f00 	cmp.w	r9, #0
 800a0de:	d002      	beq.n	800a0e6 <__kernel_rem_pio2+0x596>
 800a0e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	9b04      	ldr	r3, [sp, #16]
 800a0e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a0ec:	e7a1      	b.n	800a032 <__kernel_rem_pio2+0x4e2>
 800a0ee:	9c05      	ldr	r4, [sp, #20]
 800a0f0:	ab48      	add	r3, sp, #288	@ 0x120
 800a0f2:	441c      	add	r4, r3
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	f1b8 0f00 	cmp.w	r8, #0
 800a0fc:	da09      	bge.n	800a112 <__kernel_rem_pio2+0x5c2>
 800a0fe:	f1b9 0f00 	cmp.w	r9, #0
 800a102:	d002      	beq.n	800a10a <__kernel_rem_pio2+0x5ba>
 800a104:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a108:	4619      	mov	r1, r3
 800a10a:	9b04      	ldr	r3, [sp, #16]
 800a10c:	e9c3 0100 	strd	r0, r1, [r3]
 800a110:	e78f      	b.n	800a032 <__kernel_rem_pio2+0x4e2>
 800a112:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a116:	f7f6 f8b9 	bl	800028c <__adddf3>
 800a11a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a11e:	e7eb      	b.n	800a0f8 <__kernel_rem_pio2+0x5a8>
 800a120:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a124:	f7f6 f8b2 	bl	800028c <__adddf3>
 800a128:	3c01      	subs	r4, #1
 800a12a:	e7c1      	b.n	800a0b0 <__kernel_rem_pio2+0x560>
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	e7c6      	b.n	800a0c0 <__kernel_rem_pio2+0x570>
 800a132:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a136:	f7f6 f8a9 	bl	800028c <__adddf3>
 800a13a:	3401      	adds	r4, #1
 800a13c:	e7cb      	b.n	800a0d6 <__kernel_rem_pio2+0x586>
 800a13e:	ed95 7b00 	vldr	d7, [r5]
 800a142:	ed8d 7b00 	vstr	d7, [sp]
 800a146:	ed95 7b02 	vldr	d7, [r5, #8]
 800a14a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a14e:	ec53 2b17 	vmov	r2, r3, d7
 800a152:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a156:	f7f6 f899 	bl	800028c <__adddf3>
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	4606      	mov	r6, r0
 800a160:	460f      	mov	r7, r1
 800a162:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a166:	f7f6 f88f 	bl	8000288 <__aeabi_dsub>
 800a16a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a16e:	f7f6 f88d 	bl	800028c <__adddf3>
 800a172:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a176:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a17a:	e9c5 6700 	strd	r6, r7, [r5]
 800a17e:	e76d      	b.n	800a05c <__kernel_rem_pio2+0x50c>
 800a180:	ed94 7b00 	vldr	d7, [r4]
 800a184:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a188:	ec51 0b17 	vmov	r0, r1, d7
 800a18c:	4652      	mov	r2, sl
 800a18e:	465b      	mov	r3, fp
 800a190:	ed8d 7b00 	vstr	d7, [sp]
 800a194:	f7f6 f87a 	bl	800028c <__adddf3>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4606      	mov	r6, r0
 800a19e:	460f      	mov	r7, r1
 800a1a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1a4:	f7f6 f870 	bl	8000288 <__aeabi_dsub>
 800a1a8:	4652      	mov	r2, sl
 800a1aa:	465b      	mov	r3, fp
 800a1ac:	f7f6 f86e 	bl	800028c <__adddf3>
 800a1b0:	3d01      	subs	r5, #1
 800a1b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a1b6:	e9c4 6700 	strd	r6, r7, [r4]
 800a1ba:	e755      	b.n	800a068 <__kernel_rem_pio2+0x518>
 800a1bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a1c0:	f7f6 f864 	bl	800028c <__adddf3>
 800a1c4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1c8:	e758      	b.n	800a07c <__kernel_rem_pio2+0x52c>
 800a1ca:	bf00      	nop
 800a1cc:	f3af 8000 	nop.w
	...
 800a1d8:	41700000 	.word	0x41700000
 800a1dc:	3e700000 	.word	0x3e700000
 800a1e0:	9b04      	ldr	r3, [sp, #16]
 800a1e2:	9a04      	ldr	r2, [sp, #16]
 800a1e4:	601f      	str	r7, [r3, #0]
 800a1e6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a1ea:	605c      	str	r4, [r3, #4]
 800a1ec:	609d      	str	r5, [r3, #8]
 800a1ee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a1f2:	60d3      	str	r3, [r2, #12]
 800a1f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a1f8:	6110      	str	r0, [r2, #16]
 800a1fa:	6153      	str	r3, [r2, #20]
 800a1fc:	e719      	b.n	800a032 <__kernel_rem_pio2+0x4e2>
 800a1fe:	bf00      	nop

0800a200 <scalbn>:
 800a200:	b570      	push	{r4, r5, r6, lr}
 800a202:	ec55 4b10 	vmov	r4, r5, d0
 800a206:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a20a:	4606      	mov	r6, r0
 800a20c:	462b      	mov	r3, r5
 800a20e:	b991      	cbnz	r1, 800a236 <scalbn+0x36>
 800a210:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a214:	4323      	orrs	r3, r4
 800a216:	d03d      	beq.n	800a294 <scalbn+0x94>
 800a218:	4b35      	ldr	r3, [pc, #212]	@ (800a2f0 <scalbn+0xf0>)
 800a21a:	4620      	mov	r0, r4
 800a21c:	4629      	mov	r1, r5
 800a21e:	2200      	movs	r2, #0
 800a220:	f7f6 f9ea 	bl	80005f8 <__aeabi_dmul>
 800a224:	4b33      	ldr	r3, [pc, #204]	@ (800a2f4 <scalbn+0xf4>)
 800a226:	429e      	cmp	r6, r3
 800a228:	4604      	mov	r4, r0
 800a22a:	460d      	mov	r5, r1
 800a22c:	da0f      	bge.n	800a24e <scalbn+0x4e>
 800a22e:	a328      	add	r3, pc, #160	@ (adr r3, 800a2d0 <scalbn+0xd0>)
 800a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a234:	e01e      	b.n	800a274 <scalbn+0x74>
 800a236:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a23a:	4291      	cmp	r1, r2
 800a23c:	d10b      	bne.n	800a256 <scalbn+0x56>
 800a23e:	4622      	mov	r2, r4
 800a240:	4620      	mov	r0, r4
 800a242:	4629      	mov	r1, r5
 800a244:	f7f6 f822 	bl	800028c <__adddf3>
 800a248:	4604      	mov	r4, r0
 800a24a:	460d      	mov	r5, r1
 800a24c:	e022      	b.n	800a294 <scalbn+0x94>
 800a24e:	460b      	mov	r3, r1
 800a250:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a254:	3936      	subs	r1, #54	@ 0x36
 800a256:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a25a:	4296      	cmp	r6, r2
 800a25c:	dd0d      	ble.n	800a27a <scalbn+0x7a>
 800a25e:	2d00      	cmp	r5, #0
 800a260:	a11d      	add	r1, pc, #116	@ (adr r1, 800a2d8 <scalbn+0xd8>)
 800a262:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a266:	da02      	bge.n	800a26e <scalbn+0x6e>
 800a268:	a11d      	add	r1, pc, #116	@ (adr r1, 800a2e0 <scalbn+0xe0>)
 800a26a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a26e:	a31a      	add	r3, pc, #104	@ (adr r3, 800a2d8 <scalbn+0xd8>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	f7f6 f9c0 	bl	80005f8 <__aeabi_dmul>
 800a278:	e7e6      	b.n	800a248 <scalbn+0x48>
 800a27a:	1872      	adds	r2, r6, r1
 800a27c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a280:	428a      	cmp	r2, r1
 800a282:	dcec      	bgt.n	800a25e <scalbn+0x5e>
 800a284:	2a00      	cmp	r2, #0
 800a286:	dd08      	ble.n	800a29a <scalbn+0x9a>
 800a288:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a28c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a290:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a294:	ec45 4b10 	vmov	d0, r4, r5
 800a298:	bd70      	pop	{r4, r5, r6, pc}
 800a29a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a29e:	da08      	bge.n	800a2b2 <scalbn+0xb2>
 800a2a0:	2d00      	cmp	r5, #0
 800a2a2:	a10b      	add	r1, pc, #44	@ (adr r1, 800a2d0 <scalbn+0xd0>)
 800a2a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2a8:	dac1      	bge.n	800a22e <scalbn+0x2e>
 800a2aa:	a10f      	add	r1, pc, #60	@ (adr r1, 800a2e8 <scalbn+0xe8>)
 800a2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2b0:	e7bd      	b.n	800a22e <scalbn+0x2e>
 800a2b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a2b6:	3236      	adds	r2, #54	@ 0x36
 800a2b8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a2bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f8 <scalbn+0xf8>)
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	e7d4      	b.n	800a274 <scalbn+0x74>
 800a2ca:	bf00      	nop
 800a2cc:	f3af 8000 	nop.w
 800a2d0:	c2f8f359 	.word	0xc2f8f359
 800a2d4:	01a56e1f 	.word	0x01a56e1f
 800a2d8:	8800759c 	.word	0x8800759c
 800a2dc:	7e37e43c 	.word	0x7e37e43c
 800a2e0:	8800759c 	.word	0x8800759c
 800a2e4:	fe37e43c 	.word	0xfe37e43c
 800a2e8:	c2f8f359 	.word	0xc2f8f359
 800a2ec:	81a56e1f 	.word	0x81a56e1f
 800a2f0:	43500000 	.word	0x43500000
 800a2f4:	ffff3cb0 	.word	0xffff3cb0
 800a2f8:	3c900000 	.word	0x3c900000
 800a2fc:	00000000 	.word	0x00000000

0800a300 <floor>:
 800a300:	ec51 0b10 	vmov	r0, r1, d0
 800a304:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a30c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a310:	2e13      	cmp	r6, #19
 800a312:	460c      	mov	r4, r1
 800a314:	4605      	mov	r5, r0
 800a316:	4680      	mov	r8, r0
 800a318:	dc34      	bgt.n	800a384 <floor+0x84>
 800a31a:	2e00      	cmp	r6, #0
 800a31c:	da17      	bge.n	800a34e <floor+0x4e>
 800a31e:	a332      	add	r3, pc, #200	@ (adr r3, 800a3e8 <floor+0xe8>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	f7f5 ffb2 	bl	800028c <__adddf3>
 800a328:	2200      	movs	r2, #0
 800a32a:	2300      	movs	r3, #0
 800a32c:	f7f6 fbf4 	bl	8000b18 <__aeabi_dcmpgt>
 800a330:	b150      	cbz	r0, 800a348 <floor+0x48>
 800a332:	2c00      	cmp	r4, #0
 800a334:	da55      	bge.n	800a3e2 <floor+0xe2>
 800a336:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a33a:	432c      	orrs	r4, r5
 800a33c:	2500      	movs	r5, #0
 800a33e:	42ac      	cmp	r4, r5
 800a340:	4c2b      	ldr	r4, [pc, #172]	@ (800a3f0 <floor+0xf0>)
 800a342:	bf08      	it	eq
 800a344:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a348:	4621      	mov	r1, r4
 800a34a:	4628      	mov	r0, r5
 800a34c:	e023      	b.n	800a396 <floor+0x96>
 800a34e:	4f29      	ldr	r7, [pc, #164]	@ (800a3f4 <floor+0xf4>)
 800a350:	4137      	asrs	r7, r6
 800a352:	ea01 0307 	and.w	r3, r1, r7
 800a356:	4303      	orrs	r3, r0
 800a358:	d01d      	beq.n	800a396 <floor+0x96>
 800a35a:	a323      	add	r3, pc, #140	@ (adr r3, 800a3e8 <floor+0xe8>)
 800a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a360:	f7f5 ff94 	bl	800028c <__adddf3>
 800a364:	2200      	movs	r2, #0
 800a366:	2300      	movs	r3, #0
 800a368:	f7f6 fbd6 	bl	8000b18 <__aeabi_dcmpgt>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d0eb      	beq.n	800a348 <floor+0x48>
 800a370:	2c00      	cmp	r4, #0
 800a372:	bfbe      	ittt	lt
 800a374:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a378:	4133      	asrlt	r3, r6
 800a37a:	18e4      	addlt	r4, r4, r3
 800a37c:	ea24 0407 	bic.w	r4, r4, r7
 800a380:	2500      	movs	r5, #0
 800a382:	e7e1      	b.n	800a348 <floor+0x48>
 800a384:	2e33      	cmp	r6, #51	@ 0x33
 800a386:	dd0a      	ble.n	800a39e <floor+0x9e>
 800a388:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a38c:	d103      	bne.n	800a396 <floor+0x96>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	f7f5 ff7b 	bl	800028c <__adddf3>
 800a396:	ec41 0b10 	vmov	d0, r0, r1
 800a39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a39e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a3a2:	f04f 37ff 	mov.w	r7, #4294967295
 800a3a6:	40df      	lsrs	r7, r3
 800a3a8:	4207      	tst	r7, r0
 800a3aa:	d0f4      	beq.n	800a396 <floor+0x96>
 800a3ac:	a30e      	add	r3, pc, #56	@ (adr r3, 800a3e8 <floor+0xe8>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	f7f5 ff6b 	bl	800028c <__adddf3>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f7f6 fbad 	bl	8000b18 <__aeabi_dcmpgt>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d0c2      	beq.n	800a348 <floor+0x48>
 800a3c2:	2c00      	cmp	r4, #0
 800a3c4:	da0a      	bge.n	800a3dc <floor+0xdc>
 800a3c6:	2e14      	cmp	r6, #20
 800a3c8:	d101      	bne.n	800a3ce <floor+0xce>
 800a3ca:	3401      	adds	r4, #1
 800a3cc:	e006      	b.n	800a3dc <floor+0xdc>
 800a3ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	40b3      	lsls	r3, r6
 800a3d6:	441d      	add	r5, r3
 800a3d8:	4545      	cmp	r5, r8
 800a3da:	d3f6      	bcc.n	800a3ca <floor+0xca>
 800a3dc:	ea25 0507 	bic.w	r5, r5, r7
 800a3e0:	e7b2      	b.n	800a348 <floor+0x48>
 800a3e2:	2500      	movs	r5, #0
 800a3e4:	462c      	mov	r4, r5
 800a3e6:	e7af      	b.n	800a348 <floor+0x48>
 800a3e8:	8800759c 	.word	0x8800759c
 800a3ec:	7e37e43c 	.word	0x7e37e43c
 800a3f0:	bff00000 	.word	0xbff00000
 800a3f4:	000fffff 	.word	0x000fffff

0800a3f8 <_init>:
 800a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fa:	bf00      	nop
 800a3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fe:	bc08      	pop	{r3}
 800a400:	469e      	mov	lr, r3
 800a402:	4770      	bx	lr

0800a404 <_fini>:
 800a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a406:	bf00      	nop
 800a408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a40a:	bc08      	pop	{r3}
 800a40c:	469e      	mov	lr, r3
 800a40e:	4770      	bx	lr
